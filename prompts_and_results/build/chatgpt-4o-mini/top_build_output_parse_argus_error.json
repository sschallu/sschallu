{"id": "10018496_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10058575_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake generate", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}]}]}]}
{"id": "10141640_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This is where you would set up any necessary database config. Ensure your config/database.yml is set properly or handle any secret vars.\necho \"DATABASE_URL=postgres://user:password@localhost:5432/mydatabase\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rake db:deploy  # Adjust this as needed for your Rake tasks\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "101786_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.32", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --notest --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "perlcritic --severity 5 .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -l t/*.t", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cpanm App::cpanminus\ncpanm --installdeps .\nmkdir -p pkg\ntar -czf pkg/myapp.tar.gz .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "myapp-package", "CIvars": []}, {"type": "arg", "name": "path", "value": "pkg/myapp.tar.gz", "CIvars": []}]}]}]}
{"id": "10193828_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install doxygen\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "doxygen Doxyfile  # Ensure Doxyfile is set up correctly in the repo\n# If using Appledoc, the command could be:\n# appledoc --output docs .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -d \"html\" ]; then\n  mv html docs  # Doxygen's HTML output; adjust based on your setup\nfi\n# For Appledoc, you would move its output if in a different directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add docs\ngit commit -m \"Update documentation\" || echo \"No changes to commit\"\ngit push origin main  # Make sure you have the right permissions set\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10232042_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet\npuppet --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\n# If you have a Gemfile for puppet module testing, include it here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here\n# Example of running RSpec tests\nrspec tests/unit\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y puppet-apply\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet apply --modulepath=modules manifests/init.pp  # Adjust according to your module path\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10235026_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=production bundle exec rake assets:precompile", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl https://cli-assets.heroku.com/install.sh | sh\necho \"machine api.heroku.com\" >> ~/.netrc\necho \"  login ${{ secrets.HEROKU_EMAIL }}\" >> ~/.netrc\necho \"  password ${HEROKU_API_KEY}\" >> ~/.netrc\necho \"machine git.heroku.com\" >> ~/.netrc\necho \"  login ${{ secrets.HEROKU_EMAIL }}\" >> ~/.netrc\necho \"  password ${HEROKU_API_KEY}\" >> ~/.netrc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git HEAD:refs/heads/main", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10242059_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github actions/config/database.yml\nRAILS_ENV=test bundle exec rake db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake jasmine:ci\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jasmine-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/jasmine/tests/results", "CIvars": []}]}]}]}
{"id": "10278754_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawrence/actions-cmake", "version": "v2.3.0", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y libdependency-dev  # Install dependencies as needed\n# Add more dependencies as required by your projects\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..  # Configure the project\ncmake --build . --target all -- -j2  # Build the project, adjust the number of jobs as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure  # Run tests and display output on failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build", "CIvars": []}]}]}]}
{"id": "10280526_0", "jobs": [{"name": "coverage-report", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-clover coverage.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\n\\$cloverData = simplexml_load_file('coverage.xml');\n\\$report = '';\n\nforeach (\\$cloverData->file as \\$file) {\n    \\$fileName = (string) \\$file['name'];\n    \\$lines = count(\\$file->lines->line);\n    \\$covered = count(array_filter((array) \\$file->lines->line, function(\\$line) {\n        return (string) \\$line['type'] === 'stmt' && (string) \\$line['count'] > 0;\n    }));\n\n    \\$coverage = \\$covered / \\$lines * 100;\n    \\$report .= \\\"File: \\$fileName - Coverage: \\\".number_format(\\$coverage, 2).\\\"%\\\\n\\\";\n}\n\nfile_put_contents('coverage-report.txt', \\$report);\necho \\$report;\n\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage-report.txt", "CIvars": []}]}]}]}
{"id": "10696112_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Production Server...\"\n# Add deployment commands here, for example:\n# scp -r ./dist user@server:/path/to/deploy\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "channel", "value": "#your-slack-channel", "CIvars": []}, {"type": "arg", "name": "message", "value": "Deployment Successful! \ud83c\udf89", "CIvars": []}, {"type": "arg", "name": "slack-token", "value": "${{ secrets.SLACK_TOKEN }}", "CIvars": [{"name": "SLACK_TOKEN", "expression": "secrets.SLACK_TOKEN", "type": "secret"}]}]}]}]}
{"id": "10747196_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -archivePath MyApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10803469_2", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "10807480_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty --test --no-column\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Tests passed!\";", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p coverage\nxcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme CODE_COVERAGE=YES\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "CodeCoverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage", "CIvars": []}]}]}]}
{"id": "10815617_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test --jacoco", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn cobertura:cobertura", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cobertura-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/site/cobertura/", "CIvars": []}]}]}, {"name": "cobertura-display", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cobertura-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "cobertura-report", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd cobertura-report\nnpm install -g http-server\nhttp-server -p 8080 & # Serve the report\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "marocchino/sticky-pull-request-comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "GITHUB_TOKEN", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "comment", "value": "Coverage report is available at: [Coverage Report](http://127.0.0.1:8080)", "CIvars": []}]}]}]}
{"id": "10904188_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectName.Tests\ndotnet test --no-build --verbosity normal\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir $(System.DefaultWorkingDirectory)/TestResults\nmv *.trx $(System.DefaultWorkingDirectory)/TestResults/\necho \"##vso[task.setvariable variable=TestResults;isOutput=true]$(System.DefaultWorkingDirectory)/TestResults\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10975509_0", "jobs": [{"name": "manage-issues", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "labels", "value": "new, needs-triage", "CIvars": []}, {"type": "arg", "name": "issue-number", "value": "${{ github.event.issue.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slash-command-dispatch", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.issue.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}, {"type": "arg", "name": "command", "value": "assign @your-github-username", "CIvars": []}, {"type": "arg", "name": "reaction", "value": "eyes", "CIvars": []}]}]}]}
{"id": "11051925_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --frozen-lockfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nRAILS_ENV=test bundle exec rails db:create\nRAILS_ENV=test bundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake test:coverage\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11064453_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install WinRM if necessary\n# Configure WinRM for the target server\n\n$securePassword = ConvertTo-SecureString $WIN_SERVER_PASSWORD -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential ($WIN_SERVER_USER, $securePassword)\n\n# Define the command to deploy the application/code\n$deployCommand = \"Your commands or script to update the application\"\n\n# Using Invoke-Command to run the command on the remote server\nInvoke-Command -ComputerName $WIN_SERVER_IP -Credential $cred -ScriptBlock { $using:deployCommand }\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$securePassword = ConvertTo-SecureString $WIN_SERVER_PASSWORD -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential ($WIN_SERVER_USER, $securePassword)\n\n$deployCommand = \"Your commands or script to update the application\"\n\nInvoke-Command -ComputerName $WIN_SERVER_IP -Credential $cred -ScriptBlock { $using:deployCommand }\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11101725_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have any build steps like npm/Yarn or other build tools. Adjust accordingly.\necho \"Building assets if needed...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "ftp.example.com", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/wordpress/directory", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to WordPress site completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11117334_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.10.8", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "11148362_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/server/directory", "CIvars": []}, {"type": "arg", "name": "git-ftp-args", "value": "--insecure", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -u $FTP_USERNAME:$FTP_PASSWORD ftp://$FTP_SERVER/path/to/cache/ -Q \"DELE cache_file_name\"  # Example to clear cache\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11152852_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Invoke-WebRequest -Uri https://download.microsoft.com/download/e/5/3/e53c9b94-c9bc-4c6e-8cba-dcf43d7f191f/WebDeploy_x64_en.exe -OutFile webdeploy.exe\nStart-Process -FilePath .\\webdeploy.exe -ArgumentList '/install /quiet' -Wait\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msdeploy -source:package=\"PATH\\TO\\YOUR\\PACKAGE.zip\" ^\n         -dest:auto,computerName=$DEPLOY_URL,username=$DEPLOY_USERNAME,password=$DEPLOY_PASSWORD,authType=Basic ^\n         -allowUntrusted ^\n         -setParam:name='IIS Web Application Name',value='YOUR_WEB_APP_NAME' ^\n         -skip:objectName=directory,name=<folder-to-skip> ^\n         -skip:objectName=file,name=*.ext_to_skip  # Adjust the extensions to skip as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1116088_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal --logger \"trx;LogFileName=TestResults.trx\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.nunit_tests.outcome }}\" != \"success\" ]; then\n  echo \"NUnit tests failed. Reporting to CruiseControl.NET server...\"\n  curl -X POST https://your-cruisecontrol-server/report \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"project\": \"YourProjectName\",\n          \"status\": \"failed\",\n          \"log\": \"${{ steps.nunit_tests.outputs.test-results }}\"\n        }'\n  exit 1\nelse\n  echo \"All NUnit tests passed!\"\n  curl -X POST https://your-cruisecontrol-server/report \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"project\": \"YourProjectName\",\n          \"status\": \"success\"\n        }'\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "TestResults.trx", "CIvars": []}]}]}]}
{"id": "11170104_0", "jobs": [{"name": "database-migration", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msdeploy -verb:sync -source:package='path\\to\\your\\package.zip' \\\n-dest:auto,computerName='https://$MSDEPLOY_SERVER:8172/msdeploy.axd?site=YourSiteName',\nuserName=$MSDEPLOY_USERNAME,password=$MSDEPLOY_PASSWORD \\\n-allowUntrusted\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11282972_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl https://cli-assets.heroku.com/install.sh | sh\necho 'export PATH=\"/usr/local/heroku/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku auth:token", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11351224_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Install dependencies from requirements file (if any).\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./scripts/setup-environment.ps1  # Path to your PowerShell script.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python ./scripts/build.py  # Path to your Python build script.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pwsh ./scripts/run-tests.ps1  # Path to your PowerShell test script.\npython -m unittest discover -s tests/  # Running python unittests (modify as needed).\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output/", "CIvars": []}]}]}]}
{"id": "11364237_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp phpunit.xml.dist phpunit.xml  # Adjust if your config is named differently\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=mysql://user:password@localhost:3306/test_db\" >> .env\necho \"COMPOSE_NAME=${{ github.repository }}\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phing test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports/", "CIvars": []}]}]}]}
{"id": "11762089_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build ./${{ matrix.service }} -t myapp/${{ matrix.service }}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run myapp/${{ matrix.service }}:latest npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run myapp/${{ matrix.service }}:latest npm run test:integration\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build ./${{ matrix.service }} -t myapp/${{ matrix.service }}:latest\ndocker push myapp/${{ matrix.service }}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a deployment script or a command to deploy your application\n./deploy.sh\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "CI/CD pipeline completed.", "CIvars": []}]}]}]}
{"id": "11769219_0", "jobs": [{"name": "checkout-and-run-chef", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the path to your Chef configuration (e.g. repo, cookbooks)\ncd your-chef-directory\nchef-client -z -o 'recipe[your_cookbook::default]'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11783854_0", "jobs": [{"name": "phpspec", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpspec run --format=pretty", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpspec run --format=pretty --coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}]}]}
{"id": "11799340_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader\n# Add any other dependency installations as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start SSH Agent and add the key\neval \"$(ssh-agent -s)\"\necho \"$SSH_PRIVATE_KEY\" | ssh-add -\n# Ensure the host is known (skip strict host key checking, if necessary)\nmkdir -p ~/.ssh\nssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts\n\n# Change to the deployment path\nssh $DEPLOY_USER@$DEPLOY_SERVER \"cd $DEPLOY_PATH && git pull\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11832674_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, json, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DB_CONNECTION=mysql\" >> .env\necho \"DB_HOST=127.0.0.1\" >> .env\necho \"DB_PORT=3306\" >> .env\necho \"DB_DATABASE=your_database_name\" >> .env\necho \"DB_USERNAME=root\" >> .env\necho \"DB_PASSWORD=your_root_password\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --format=pretty", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11852982_0", "jobs": [{"name": "create-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/create-repo", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "folder-name/repo-name", "CIvars": []}, {"type": "arg", "name": "private", "value": true, "CIvars": []}, {"type": "arg", "name": "description", "value": "This is a new repository created by GitHub Actions", "CIvars": []}, {"type": "arg", "name": "visibility", "value": "public", "CIvars": []}]}]}]}
{"id": "1198789_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.30", "CIvars": []}, {"type": "arg", "name": "install", "value": "cpanm", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -l t/*.t", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1200721_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f package.json ]; then\n  npm install\nelse\n  echo \"No package.json found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f package.json ]; then\n  npm test\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f requirements.txt ]; then\n  pip install -r requirements.txt\nelse\n  echo \"No requirements.txt found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f requirements.txt ]; then\n  pytest  # or your preferred test command\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f pom.xml ]; then\n  mvn install\nelif [ -f build.gradle ]; then\n  gradle build\nelse\n  echo \"No build file found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-go", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "go-version", "value": "1.18", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f go.mod ]; then\n  go mod tidy\nelse\n  echo \"No go.mod found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f go.mod ]; then\n  go test ./...\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Gemfile ]; then\n  bundle install\nelse\n  echo \"No Gemfile found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f Gemfile ]; then\n  bundle exec rspec  # or your preferred test command\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1207771_0", "jobs": [{"name": "send_notification", "steps": [{"type": "gh_action", "cmd": "", "name": "fikovnik/teams-notifier", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "webhook-url", "value": "${{ secrets.TEAMS_WEBHOOK_URL }}", "CIvars": [{"name": "TEAMS_WEBHOOK_URL", "expression": "secrets.TEAMS_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "A new commit has been pushed to the main branch!\nCommit message: ${{ github.event.head_commit.message }}\nAuthor: ${{ github.event.head_commit.author.name }}\nView commit: ${{ github.event.head_commit.url }}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.head_commit.author.name", "expression": "github.event.head_commit.author.name", "type": "context"}, {"name": "event.head_commit.url", "expression": "github.event.head_commit.url", "type": "context"}]}]}]}]}
{"id": "12098241_0", "jobs": [{"name": "msbuild-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "msbuild path/to/your/project.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "ccnet-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Assuming CCNet is already installed and available in PATH\nccnet.exe /path/to/ccnet.config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Label generation for CCNet completed successfully.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12235620_0", "jobs": [{"name": "close-issues", "steps": [{"type": "shell_cmd", "cmd": "echo \"Finding issues to close...\"\n# Check if pull request body contains references to issues\nif [[ \"${{ github.event.pull_request.body }}\" =~ (fixes|closes|resolves) #[0-9]+ ]]; then\n  echo \"Extracting issue numbers...\"\n  # Extract all issue numbers from the pull request body\n  issues=$(echo \"${{ github.event.pull_request.body }}\" | grep -o '#[0-9]\\+' | sed 's/#//g' | tr '\\n' ',' | sed 's/,$//')\n  echo \"issues=${issues}\" >> $GITHUB_ENV\nelse\n  echo \"No issues to close.\"\n  echo \"issues=\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/close-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "issue_number", "value": "${{ env.issues }}", "CIvars": [{"name": "issues", "expression": "env.issues", "type": "env"}]}, {"type": "arg", "name": "comment", "value": "This issue was closed automatically by the merge of PR #${{ github.event.pull_request.number }}.", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "12242368_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nRAILS_ENV=test bin/rails db:create\nRAILS_ENV=test bin/rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec   # Use this if you are using RSpec for testing\n# For Minitest, use: bundle exec rake test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12269007_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create RAILS_ENV=test\nrails db:migrate RAILS_ENV=test\nbundle exec rspec  # Use your test suite command, e.g., rspec, minitest, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/<your-heroku-app-name>.git\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1228170_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential\n# Add any other dependencies your project needs here. For example:\n# sudo apt-get install -y libboost-all-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake -S . -B ./build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build ./build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ctest --output-on-failure --test-dir ./build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12309720_0", "jobs": [{"name": "handle-branch-deletion", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-notify", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "Branch deleted: ${GITHUB_REF}", "CIvars": [{"name": "GITHUB_REF", "expression": "GITHUB_REF", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources for deleted branch: ${GITHUB_REF}\"\n# Add your cleanup commands here\n# For example, delete specific files, or clear cache\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12313093_0", "jobs": [{"name": "start-rails-server", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler && bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "nohup rails server -b 0.0.0.0 -p 3000 &\nuntil curl --output /dev/null --silent --head --fail http://localhost:3000; do\n  echo 'Waiting for server to start...'\n  sleep 5\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Server is up and running!\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Find the PID of the Rails server and terminate it\nkill $(ps aux | grep '[r]ails server' | awk '{print $2}')\necho \"Rails server has been shut down.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12345262_0", "jobs": [{"name": "view-logs", "steps": [{"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Fetch logs using the GitHub API\necho \"Fetching recent commit logs...\"\n\n# Fetch logs\ncurl -H \"Authorization: token $GITHUB_TOKEN\" \\\n     -H \"Accept: application/vnd.github.v3+json\" \\\n     \"https://api.github.com/repos/${{ github.repository }}/commits\" | \\\njq '.[].commit.message' # Display commit messages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12409546_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "find . -name '*.php' -exec php -l {} \\;", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Unit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/php-cs-fixer fix --dry-run --diff", "name": "", "version": "", "shell": "bash"}]}, {"name": "static_analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12425608_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2012", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir output\nCopy-Item -Path \"path\\to\\your\\project\\bin\\Release\\*\" -Destination output -Recurse\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "web-application-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "output", "CIvars": []}]}]}]}
{"id": "12471469_0", "jobs": [{"name": "build_and_deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild \"path/to/your/SSAS/project.sln\" /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You will need to install necessary tools to deploy your SSAS project\n# Here assuming you're using a command line tool or PowerShell script for deployment\ndeployment_script.ps1 -path \"path/to/your/SSAS/project.deployment\" -server \"yourSSASserver\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild \"path/to/your/SSRS/project.sln\" /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Similar logic to deploy SSRS projects\ndeployment_script.ps1 -path \"path/to/your/SSRS/report.rdl\" -server \"yourSSRSserver\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment of SSAS and SSRS projects completed successfully.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12526851_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # No --fail-fast option here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test_results\ncp -r spec/reports/* test_results/ || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test_results/", "CIvars": []}]}]}]}
{"id": "12555390_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "4.7.x", "CIvars": []}, {"type": "arg", "name": "include-prerelease", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "choco install visualstudio2019community --package-parameters \"--allWorkloads\" --yes --force\nchoco install visualstudio2019buildtools --package-parameters \"--allWorkloads\" --yes --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" YourSolution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" YourTestProject.csproj /p:Configuration=Release /p:Platform=\"Any CPU\" /p:TargetFramework=net472 /p:RunTest=TRUE\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12629290_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y cxxtest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12677905_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml  # You might need to create this file\nRAILS_ENV=test bundle exec rails db:create\nRAILS_ENV=test bundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec  # or whatever test framework you use\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-heroku-app.git  # Replace with your Heroku app name\ngit push heroku main  # Push to Heroku main branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12704139_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2012", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set environment variable with the encrypted password\n# Use a proper base64 or custom encryption, this is just an example\necho \"MY_ENCRYPTED_PASSWORD=$(echo -n 'YourActualPassword' | base64)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here, we retrieve and decode the password\necho \"DECRYPTED_PASSWORD=$(echo $MY_ENCRYPTED_PASSWORD | base64 --decode)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# The MSBuild task to publish using the decrypted password\n& \"C:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe\" YourProject.sln /p:PublishProfile=YourPublishProfile /p:Password=$DECRYPTED_PASSWORD\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clean up any sensitive information if needed\necho \"Cleaning up...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12743657_0", "jobs": [{"name": "build-and-generate-test-data", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "16.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore path/to/your/databaseproject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild path/to/your/databaseproject.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Deploy the database to the target server\n# You could use SqlPackage.exe or other tools to deploy the DACPAC\nSqlPackage.exe /Action:Publish /SourceFile:output\\yourdatabase.dacpac /TargetConnectionString:\"<your-connection-string>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a script or command that generates test data,\n# you can execute it here\nsqlcmd -S <your-server-name> -d <your-database-name> -U <your-username> -P <your-password> -i path/to/your/testdatagenerator.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optionally clean up resources or delete temp files\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12755268_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unused", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12781627_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rails\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:migrate RAILS_ENV=test\nbundle exec rspec  # Replace with your test framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/YOUR_APP_NAME.git\ngit push heroku main  # Change to your branch if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12817011_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# If you are using CocoaPods, uncomment the next line\n# pod install\n# If you are using Swift Package Manager, uncomment the next line\n# swift package update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProjectName.xcodeproj \\\n           -scheme YourSchemeName \\\n           -destination 'platform=iOS Simulator,name=iPhone 14' \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProjectName.xcodeproj \\\n                -scheme YourSchemeName \\\n                -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProjectName.xcodeproj \\\n           -scheme YourSchemeName \\\n           -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n           archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourAppArchive", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "12905060_1", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php send_email.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12959349_1", "jobs": [{"name": "rename-files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore path/to/your/project.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild RenameFiles.proj /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"GitHub Actions\"\ngit config --local user.email \"actions@github.com\"\ngit add path/to/your/files/*.md\ngit commit -m \"Renamed .txt files to .md\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13040718_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13075890_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "javac ModifyExitCode.java\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "java ModifyExitCode ${{ github.event.action }} # Pass arguments to your Java program\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.exit_code_run.outcome }}\" == \"failure\" ]]; then\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13078033_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "fivemat/xcode-build", "version": "v1.0", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CODESIGN_KEY }}\" | base64 --decode > ./cert.p12\necho \"${{ secrets.CODESIGN_PASSWORD }}\" > ./cert_password.txt\nsecurity create-keychain -p \"\" build.keychain\nsecurity import ./cert.p12 -k ~/Library/Keychains/build.keychain -P \"${{ secrets.CODESIGN_PASSWORD }}\" -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory  # Navigate to your project directory\npod install  # or any other dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13136354_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2012", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:Configuration=Release /p:Platform=\"Any CPU\"\n# Replace \"YourProject.sln\" with the actual name of your solution file.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can run any tests you want to execute after building.\n# For example, if you have unit tests, you can run them using vstest.console.exe.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13205032_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install git-ftp", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Configure Git-FTP\ngit config git-ftp.url \"ftp://$FTP_SERVER\"\ngit config git-ftp.username \"$FTP_USERNAME\"\ngit config git-ftp.password \"$FTP_PASSWORD\"\n\n# Check if there are changes\ngit ftp fetch || true  # Fetch the status, ignore errors if the directory is missing\n\n# Only upload if there are changes\nif git diff --quiet HEAD HEAD~1; then\n  echo \"No changes to deploy.\"\nelse\n  git ftp push --dry-run | grep -v 'No changes' || echo \"Changes detected, deploying...\"\n  git ftp push\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "132139_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "13268577_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_APP_NAME", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "13277823_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "16.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Syncing the build files to OneDrive...\"\n# Here you would implement your logic to sync with OneDrive.\n# This might involve using the OneDrive CLI or other methods.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13369597_1", "jobs": [{"name": "label-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php path/to/check_labels.php # Adjust the path as needed.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13372566_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "tcrundall/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  sudo gem install cocoapods\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13474041_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test:integration", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}]}, {"name": "sonarcloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "v1.4.0", "shell": "bash", "with": [{"type": "arg", "name": "extra-args", "value": "-Dsonar.projectKey=YOUR_PROJECT_KEY -Dsonar.organization=YOUR_ORG_NAME -Dsonar.sources=./src -Dsonar.tests=./tests -Dsonar.coverage.exclusions=**/node_modules/**,**/*.spec.js\n", "CIvars": []}]}]}]}
{"id": "13573708_1", "jobs": [{"name": "pull_repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install git", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby pull_repositories.rb", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13592348_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Adjust if you're using a different testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install rubocop\nrubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"All checks passed!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Some checks failed, please review!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13636466_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "get-notify/action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "The specs have failed! Please check the Actions tab for details.", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "13681510_0", "jobs": [{"name": "monticello", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "smalltalkhub/smalltalk:latest", "version": null, "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Assuming you have a script or command to load your Monticello packages\necho \"Loading Monticello packages\"\n# Example of loading a Monticello baseline\n./path/to/your/script_to_load_monticello.st\n\n# You might want to run tests if applicable\necho \"Running tests\"\n./path/to/your/test_script.st\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources if needed\"\n# Include any clean-up commands you want to run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13701517_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish --no-restore", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.1", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./publish", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "${{ secrets.DEPLOYMENT_PATH }}", "CIvars": [{"name": "DEPLOYMENT_PATH", "expression": "secrets.DEPLOYMENT_PATH", "type": "secret"}]}]}]}]}
{"id": "1374441_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem build your_gem_name.gemspec  # Replace with your gemspec name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem push your_gem_name-*.gem --key ${{ secrets.RUBYGEMS_API_KEY }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13801836_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-jdk", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package --file pom.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v4.1.9", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "13862033_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "compiler", "value": "gcc", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ntar -cvzf artifacts.tar.gz .  # Create an archive of the build artifacts\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cpp-build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/artifacts.tar.gz", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm -rf build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13894020_1", "jobs": [{"name": "trigger_repo_a", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "username/repo-a", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "create-symlink.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "13967560_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Test Results: Check the logs above for output.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1409479_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you have a specific PowerShell script or commands to install SharePoint Developer Tools.\n# This may include setting up the SharePoint SDK, if available for TFS 2008 projects.\nWrite-Host \"Installing SharePoint Developer Tools, if needed.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "nuget restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:Configuration=Release /p:Platform=\"Any CPU\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add commands to run your tests here, e.g., using VSTest\nvstest.console.exe YourTestProject.dll\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "bin/Release/*\n", "CIvars": []}]}]}]}
{"id": "14110639_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14115385_0", "jobs": [{"name": "identify_build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=token::${{ secrets.GITHUB_TOKEN }}\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Fetching workflow runs...\"\nRUNS=$(curl -s -H \"Authorization: token ${{ steps.get_token.outputs.token }}\" \\\n  \"https://api.github.com/repos/${{ github.repository }}/actions/runs\" \\\n  | jq '.workflow_runs | map({id: .id, name: .name, status: .status, conclusion: .conclusion, created_at: .created_at})')\necho \"::set-output name=runs::$RUNS\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Latest Build Information:\"\necho \"${{ steps.workflow_runs.outputs.runs }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "LATEST_RUN=$(echo \"${{ steps.workflow_runs.outputs.runs }}\" | jq '.[0]')\necho \"::set-output name=latest_run::$LATEST_RUN\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Latest Build ID: ${{ steps.latest_run.outputs.latest_run.id }}\"\necho \"Latest Build Name: ${{ steps.latest_run.outputs.latest_run.name }}\"\necho \"Status: ${{ steps.latest_run.outputs.latest_run.status }}\"\necho \"Conclusion: ${{ steps.latest_run.outputs.latest_run.conclusion }}\"\necho \"Created At: ${{ steps.latest_run.outputs.latest_run.created_at }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1411641_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --reporter=json > test-results.json", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results.json", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "${{ secrets.SMTP_USER }}", "CIvars": [{"name": "SMTP_USER", "expression": "secrets.SMTP_USER", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "CI Build Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The CI build finished with a status of ${{ job.status }}.\nTest results have been generated.\nHere are the results:\n```json\n$(cat test-results.json)\n```\n", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm test-results.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "141319_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\necho \"::add-path::${HOME}/.composer/vendor/bin\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14194509_0", "jobs": [{"name": "syntax-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "find . -name '*.php' -exec php -l {} \\; || exit 1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14274293_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -eq 0 ]; then\n  echo \"Build successful!\"\n  echo \"::set-output name=status::success\"\nelse\n  echo \"Build failed!\"\n  echo \"::set-output name=status::failure\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-action-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Build Status: ${{ steps.build_status.outputs.status }}\n", "CIvars": [{"name": "build_status.outputs.status", "expression": "steps.build_status.outputs.status", "type": "steps"}]}]}]}]}
{"id": "14295751_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"A new commit has been pushed to the 'feature-branch'.\"\necho \"You can clone this branch with the following command:\"\necho \"git clone -b feature-branch https://github.com/USERNAME/REPO.git\"\necho \"Please check the branch for the latest changes.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Branch Shared: feature-branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "The `feature-branch` has been updated with new changes.\nYou can review it [here](https://github.com/USERNAME/REPO/tree/feature-branch).\nPlease reach out to the repository owner for access.\n", "CIvars": []}, {"type": "arg", "name": "labels", "value": "notification", "CIvars": []}, {"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "14333096_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install capistrano\ngem install capistrano-rails # if you're using capistrano-rails\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --frozen-lockfile # if you are using Yarn for JS dependencies\n# npm install --ci # Uncomment if using npm instead of Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh # Create SSH directory\necho \"${SSH_KEY}\" > ~/.ssh/id_rsa # Add private key\nchmod 600 ~/.ssh/id_rsa # Set permissions for the private key\nssh-keyscan -H ${HOST} >> ~/.ssh/known_hosts # Add host to known hosts\nbundle exec cap production deploy # Run your Capistrano deployment command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -f ~/.ssh/id_rsa", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14401278_0", "jobs": [{"name": "install-app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release -sdk iphonesimulator\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "APP_PATH=$(find ./build/ -name '*.app' -print -quit)\necho \"APP_PATH=$APP_PATH\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl boot \"iPhone 14\" # Or the simulator you want to use\nsleep 10 # Give the simulator some time to boot\nxcrun simctl install booted ${{ env.APP_PATH }}\nxcrun simctl launch booted com.yourcompany.yourapp # Replace with your app's bundle identifier\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14410567_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, sqlite3", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-html coverage-report", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage-report", "CIvars": []}]}]}]}
{"id": "144274_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}]}]}
{"id": "14482636_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14485983_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-progress --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can customize the command to run your Twig tests\nvendor/bin/phpunit --testsuite TwigTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "apt-get update\napt-get install -y tidy\n# Assuming your HTML files are in a `html` directory\ntidy -c -q html/*.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g htmlhint\nhtmlhint html/*.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Using twigcs for Twig standards\ncomposer require --dev squizlabs/php_codesniffer\nvendor/bin/phpcs --standard=PSR12 --extensions=twig twig/**/*.twig\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14541617_0", "jobs": [{"name": "upstream", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Dummy command to simulate upstream work\necho \"Upstream Job is running...\"\n# Commit some changes (optional)\necho \"Changes made\" >> changes.txt\ngit config user.name \"Your Name\"\ngit config user.email \"your_email@example.com\"\ngit add changes.txt\ngit commit -m \"Making changes\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "downstream", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the authors of the last commits made in the last push\nauthors=$(git log --format='%ae' -n 5) # Adjust `n` as needed\necho \"repo_authors=${authors}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Notification: Change Made to Repository", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nChanges have been made to the upstream repository. \n\nBest,\nYour Team\n", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ env.repo_authors }}", "CIvars": [{"name": "repo_authors", "expression": "env.repo_authors", "type": "env"}]}]}]}]}
{"id": "145586_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y g++ # Install the g++ compiler (you can specify other dependencies too)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake test # Assuming your CMakeLists.txt is set up to run tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14765725_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Fetch the current version\ncurrent_version=$(grep -oP '\\d+\\.\\d+\\.\\d+' lib/gem_name/version.rb)\nIFS='.' read -r major minor patch <<< \"$current_version\"\n\n# Increment the version (for example, increment patch version)\nnew_patch=$((patch + 1))\nnew_version=\"$major.$minor.$new_patch\"\n\n# Update the version in the gemspec and version files\nsed -i \"s/$current_version/$new_version/g\" lib/gem_name/version.rb\nsed -i \"s/version = \\\"$current_version\\\"/version = \\\"$new_version\\\"/g\" gem_name.gemspec\n\necho \"New version: $new_version\"\necho \"::set-output name=new_version::$new_version\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"github-actions@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit commit -am \"Bump version to ${{ steps.bump_version.outputs.new_version }}\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build gem_name.gemspec\ngem push gem_name-*.gem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14769258_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git log --pretty=format:'%ae' | sort -u > authors.txt\necho \"::set-output name=authors::$(cat authors.txt | tr '\\n' ',')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Build Failure Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build for commit `${{ github.sha }}` has failed. Please investigate the issue.", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "to", "value": "${{ steps.get_authors.outputs.authors }}", "CIvars": [{"name": "get_authors.outputs.authors", "expression": "steps.get_authors.outputs.authors", "type": "steps"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_FROM }}", "CIvars": [{"name": "EMAIL_FROM", "expression": "secrets.EMAIL_FROM", "type": "secret"}]}]}]}]}
{"id": "14776321_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "s4u/setup-maven", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "maven-version", "value": "3.8.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py collectstatic --noinput", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t your-django-app-name .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.DOCKER_HUB_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_HUB_USERNAME }}\" --password-stdin\ndocker tag your-django-app-name your-dockerhub-username/your-django-app-name:latest\ndocker push your-dockerhub-username/your-django-app-name:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\nssh -o StrictHostKeyChecking=no -i private_key.pem user@your-server-ip 'docker pull your-dockerhub-username/your-django-app-name:latest && docker-compose up -d'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14814644_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore ${{ matrix.project }}/${{ matrix.project }}.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ${{ matrix.project }}/${{ matrix.project }}.csproj --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish ${{ matrix.project }}/${{ matrix.project }}.csproj --configuration Release --output ${{ github.workspace }}/${{ matrix.project }}/publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_WEB_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "${{ github.workspace }}/${{ matrix.project }}/publish", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}, {"name": "project", "expression": "matrix.project", "type": "matrix"}]}]}]}]}
{"id": "14913586_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\nscp -o StrictHostKeyChecking=no -r ./path/to/your/application $USER@$HOST:/path/to/deployment/\nssh -o StrictHostKeyChecking=no $USER@$HOST 'cd /path/to/deployment && php artisan migrate'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14932150_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull_request_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge_method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "commit_title", "value": "Auto Merged Pull Request #${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "commit_message", "value": "This pull request has been automatically merged by GitHub Actions", "CIvars": []}, {"type": "arg", "name": "delete_branch", "value": true, "CIvars": []}]}]}]}
{"id": "1510771_0", "jobs": [{"name": "diagnose-timeouts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install any dependencies your CCNet requires\n# For example, using NuGet\ndotnet restore\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace CCNetPath with the actual path to your CCNet installation\nCCNetPath=\"C:\\path\\to\\ccnet\\\"\nccnet.exe //diagnostics\n# You can also check logs or perform any additional commands to gather data\n# E.g., analyzing log file for timeouts\n$logPath = \"${{ github.workspace }}\\ccnet\\logs\"\nGet-Content \"$logPath\\ccnet.log\" | Select-String -Pattern \"timeout\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ccnet-logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "C:\\path\\to\\ccnet\\logs\\*.log  # Adjust as necessary\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "some/notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "The diagnostic run for CCNet has completed. Please check the logs.", "CIvars": []}]}]}]}
{"id": "1517188_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vsVersion", "value": "2008", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Ensure MSBuild can find your solution file\n# You may need to change the path to point to your solution file\nmsbuild ./YourSolution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a test project and you want to run tests as part of your build\n# You may need to change the path to point to your test project file\nmsbuild ./YourTestProject.csproj /p:Configuration=Release /p:RunTests=true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "152579_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "soapdog/coverage-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "./coverage", "CIvars": []}]}]}]}
{"id": "15281504_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "setup-msbuild/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2012", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourDatabaseProject.sqlproj /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.pubxml /p:DbConnectionString=\"YourConnectionString\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1544119_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode_13.4.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15509677_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nRAILS_ENV=test bundle exec rails db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15548867_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "nuget restore MySolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild MySolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=xap_file::$(find . -name '*.xap' -print -quit)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$XapFile = \"${{ steps.locate_xap.outputs.xap_file }}\"\n$CertPath = \"path\\to\\your\\certificate.pfx\"\n$CertPassword = \"your_certificate_password\"\n\nif (Test-Path $XapFile) {\n    & \"SignTool.exe\" sign /f $CertPath /p $CertPassword /t http://timestamp.digicert.com $XapFile\n} else {\n    Write-Error \"XAP file not found: $XapFile\"\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "signed-xap", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ steps.locate_xap.outputs.xap_file }}", "CIvars": [{"name": "locate_xap.outputs.xap_file", "expression": "steps.locate_xap.outputs.xap_file", "type": "steps"}]}]}]}]}
{"id": "1558103_0", "jobs": [{"name": "build_vs2008", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "\"C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\Common7\\IDE\\devenv.exe\" YourSolution.sln /Build Release\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "build_msbuild", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1561923_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name Pester -SkipPublisherCheck -Force -Scope CurrentUser\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": ".\\scripts\\YourScript.ps1\n# or run a test if you have one\nInvoke-Pester .\\tests\\YourTest.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if ($LASTEXITCODE -ne 0) {\n  Write-Host \"Error: The last command failed with exit code $LASTEXITCODE.\"\n  exit $LASTEXITCODE\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15767089_0", "jobs": [{"name": "check-slave-status", "steps": [{"type": "shell_cmd", "cmd": "# Sample script to check if slave is offline\n# Replace this with your actual logic\nSLAVE_STATUS=$(curl -s http://your-slave-address/status)\nif [[ \"$SLAVE_STATUS\" == \"offline\" ]]; then\n  echo \"slave_status=offline\" >> $GITHUB_ENV\nelse\n  echo \"slave_status=online\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendgrid-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "your-sender-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Slave Offline Alert", "CIvars": []}, {"type": "arg", "name": "content", "value": "Attention! The slave is currently offline. Please check the status.\n", "CIvars": []}]}]}]}
{"id": "15814307_0", "jobs": [{"name": "R-CMD-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('devtools')\ndevtools::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check --as-cran .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"library(testthat); test_dir('tests/testthat')\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"covr::codecov()\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15819946_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your custom Minitest runner\nbundle exec ruby -I test your_custom_minitest_runner.rb\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you are using minitest-ci for test reporting\nif [[ -f 'test/reports/minitest_report.xml' ]]; then\n  echo \"Uploading test report...\"\n  # Upload the test result to the CI reporting service\n  # Here you might want to modify this command based on your CI report configuration\n  # For example, if you have some specific command or API call\n  # Example: bundle exec ci_reporter --format=xml --output=report.json\nelse\n  echo \"No test report found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15825770_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "const pr_number = context.payload.pull_request.number;\nconst message = \"\u2705 This pull request is good to merge!\";\nawait github.issues.createComment({\n  ...context.repo,\n  issue_number: pr_number,\n  body: message\n});\n", "CIvars": []}]}]}]}
{"id": "15890547_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"${{ secrets.DEPLOY_KEY }}\" >> ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cap production deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1607682_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a deploy script in your repository\nruby script/deploy.rb\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start CruiseControl.rb in production mode\n# Adjust the path if your CruiseControl.rb is in a different directory\nnohup ruby -rubygems -e 'require \"cruise_control\" ; CruiseControl::Application.run' &\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optionally, insert a wait time or check to confirm CC server is running\nsleep 10  # Adjust the sleep time as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16086932_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "R -e \"install.packages('constroptim')\"\nR -e \"install.packages('ggplot2')\" # Include any other dependencies needed.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R # Replace with your actual R script name.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16211147_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y g++ cmake  # Install additional dependencies as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\ncmake --build .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure -D Experimental\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest -D Experimental --submit <CDASH_PROJECT_PATH> --build \"<BUILD_TYPE> - Build Type\" --c-test --no-setup  # Ensure to adjust placeholders\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16244738_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysql, mysqli, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}, {"type": "arg", "name": "ini_values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16306012_0", "jobs": [{"name": "check_duplicates", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch origin +refs/pull/*/merge:refs/remotes/origin/pr/*\ngit checkout ${{ github.head_ref }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=base_branch::$(echo ${GITHUB_BASE_REF})\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "BASE_BRANCH=\"${{ steps.get_base_branch.outputs.base_branch }}\"\necho \"Checking for duplicate commits against ${BASE_BRANCH}\"\n\n# Get the commits on the current PR branch that are not in the base branch\ngit log --oneline ${BASE_BRANCH}..${GITHUB_SHA} > commits.txt\n\n# Get the commits that are already in the base branch\ngit log --oneline ${BASE_BRANCH}.. | grep -Ff commits.txt > duplicates.txt || true\n\n# Count duplicate commits\nDUPLICATES_COUNT=$(wc -l < duplicates.txt)\n\nif [ $DUPLICATES_COUNT -gt 0 ]; then\n  echo \"Found ${DUPLICATES_COUNT} duplicate commits in the pull request.\"\n  echo \"::set-output name=duplicates::true\"\n  cat duplicates.txt\nelse\n  echo \"No duplicate commits found.\"\n  echo \"::set-output name=duplicates::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "\u26a0\ufe0f Your pull request contains some commits that are already present in the base branch:\n```bash\n$(cat duplicates.txt)\n```\nPlease consider removing these commits to clean up your PR history.\n", "CIvars": []}]}]}]}
{"id": "16366517_0", "jobs": [{"name": "code-quality", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "coinmarketcap/action-composer", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "~/.composer/vendor/bin/phpcs --standard=ruleset.xml path/to/your/code\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1640312_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you're using a package manager like CocoaPods or Carthage\npod install  # For CocoaPods\n# or\n# carthage bootstrap --platform macOS  # For Carthage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourSchemeName -configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProject.xcodeproj -scheme YourSchemeName -configuration Debug\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16416917_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppUITests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12' test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "DerivedData/YourApp/Logs/Test/", "CIvars": []}]}]}]}
{"id": "1642381_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "svn-tools/svn-checkout", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "<SVN_REPOSITORY_URL>", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SVN_USERNAME }}", "CIvars": [{"name": "SVN_USERNAME", "expression": "secrets.SVN_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SVN_PASSWORD }}", "CIvars": [{"name": "SVN_PASSWORD", "expression": "secrets.SVN_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/project.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build path/to/your/project.csproj --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish path/to/your/project.csproj --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "aspnet-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output", "CIvars": []}]}]}]}
{"id": "16440059_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -l $(find . -name '*.php')", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can include any build steps necessary for your application, such as:\n# - asset compilation\n# - preparing files for deployment\necho \"Preparing package for deployment...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "php-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/package", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "php-artifact", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying...\"\n# Implement deployment logic here\n# For example, you could use:\n# - Powershell to deploy to an Azure Web App\n# - Use FTP to upload files\n# This is just a placeholder; fill in with your actual deployment command.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16570781_0", "jobs": [{"name": "reverse-bundle-install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --without env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify the gems you want to uninstall\nBUNDLE_GEMFILE=Gemfile bundle exec gem list | grep -v 'env' | awk '{print $1}' | xargs gem uninstall -x\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# List installed gems to confirm uninstallation\ngem list\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16695038_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running parent build steps...\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peterjuras/trigger-workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "owner", "value": "${{ github.repository_owner }}", "CIvars": [{"name": "repository_owner", "expression": "github.repository_owner", "type": "context"}]}, {"type": "arg", "name": "repo", "value": "your-repo-name", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "child.yml", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "16748115_0", "jobs": [{"name": "modify-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Adjust according to your project (e.g., `yarn install`)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "node modify-pr.js # A script to modify the PR content as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thanks for your contribution! \nYour PR has been modified successfully. \n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\ngit add .\ngit commit -m \"Automated modifications to PR\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16765137_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py test\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.USERNAME }}", "CIvars": [{"name": "USERNAME", "expression": "secrets.USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.PORT }}", "CIvars": [{"name": "PORT", "expression": "secrets.PORT", "type": "secret"}]}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/deploy/directory", "CIvars": []}]}]}]}
{"id": "16794423_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/jenkins-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "${{ secrets.JENKINS_URL }}", "CIvars": [{"name": "JENKINS_URL", "expression": "secrets.JENKINS_URL", "type": "secret"}]}, {"type": "arg", "name": "job", "value": "my-job-name", "CIvars": []}, {"type": "arg", "name": "user", "value": "${{ secrets.JENKINS_USER }}", "CIvars": [{"name": "JENKINS_USER", "expression": "secrets.JENKINS_USER", "type": "secret"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.JENKINS_TOKEN }}", "CIvars": [{"name": "JENKINS_TOKEN", "expression": "secrets.JENKINS_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "parameters", "value": "param1=value1", "CIvars": []}, {"type": "arg", "name": "wait", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -u \"${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}\" \\\n    \"${{ secrets.JENKINS_URL }}/job/my-job-name/lastSuccessfulBuild/artifact/*zip*/archive.zip\" \\\n    -O\necho \"Artifacts archived successfully.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Your commands to upload the archived zip file to cloud storage.\n# This could be AWS S3, Google Cloud Storage, etc.\necho \"Uploading artifacts to cloud storage.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1685111_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:schema:load RAILS_ENV=test\nbundle exec rspec # Change this line if you are using a different testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails assets:precompile", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --format SimpleCov::Formatter\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16932635_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew check", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install\nnpm run lint\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/libs/*.jar", "CIvars": []}]}]}, {"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Pull Request Title: ${{ github.event.pull_request.title }}\"\necho \"Pull Request Body: ${{ github.event.pull_request.body }}\"\necho \"Author: ${{ github.event.pull_request.user.login }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thank you for your contribution! Your pull request is under review. Please ensure all checks pass.\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Notify the team that a PR has been opened for review.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16947246_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.32", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "perl Makefile.PL && make && make test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"=== Build Logs ===\"\ncat build.log\necho \"=== Test Logs ===\"\ncat test.log\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17026405_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, json, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer:v2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --bootstrap vendor/autoload.php tests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"One or more tests failed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17092599_0", "jobs": [{"name": "performance-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y default-jdk wget\nwget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz\ntar -xzf apache-jmeter-5.5.tgz\necho \"export PATH=\\$PATH:$(pwd)/apache-jmeter-5.5/bin\" >> $BASH_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "jmeter -n -t ./tests/YourTestPlan.jmx -l ./results/results.jtl -j ./results/jmeter.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "BlazeMeter/BlazeMeter-Github-Actions", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "apiKey", "value": "${{ secrets.BLAZEMETER_API_KEY }}", "CIvars": [{"name": "BLAZEMETER_API_KEY", "expression": "secrets.BLAZEMETER_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "jmeterResultsFile", "value": "./results/results.jtl", "CIvars": []}, {"type": "arg", "name": "projectName", "value": "YourProjectName", "CIvars": []}, {"type": "arg", "name": "testName", "value": "Performance Test - ${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "STATUS_URL=\"https://a2.blazemeter.com/api/v1/test/${{ steps.upload_results.outputs.testId }}\"\nRESULT=$(curl -s -H \"X-API-Key: ${{ secrets.BLAZEMETER_API_KEY }}\" $STATUS_URL)\n\nSTATUS=$(echo $RESULT | jq -r '.status')\n\necho \"Test Status: $STATUS\"\n\nif [[ \"$STATUS\" == \"finished\" ]]; then\n  SCORE=$(echo $RESULT | jq -r '.score')\n  echo \"Performance Score: $SCORE\"\n\n  if [[ $SCORE -lt 70 ]]; then\n    echo \"Performance test failed. Score below threshold.\"\n    exit 1\n  else\n    echo \"Performance test passed.\"\n  fi\nelse\n  echo \"Test did not finish properly.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ./publish-results\ncp ./results/results.jtl ./publish-results/\ncp ./results/jmeter.log ./publish-results/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jmeter-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./publish-results", "CIvars": []}]}]}]}
{"id": "17126099_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.3", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, bcmath, sqlite3, json", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -R /path/to/drupal7 /path/to/drupal\ncp /path/to/drupal/sites/default/default.settings.php /path/to/drupal/sites/default/settings.php\n# Set up the database connection or any further configuration needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Put any commands to set up your database here\n# Example: drush si -y\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.composer/cache\nvendor\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "1715989_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build . --config ${{ matrix.configuration }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17201345_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Or your testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.cloudbees.com/v1/deploy\" \\\n-H \"Authorization: Bearer $CLOUDBEES_API_TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n      \"appName\": \"your-app-name\",\n      \"env\": {\n          \"RAILS_ENV\": \"production\"\n      }\n    }'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17277871_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer audit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "17302693_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release clean build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12' | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyApp-Build", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/build/output", "CIvars": []}]}]}]}
{"id": "17346137_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.13.9", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "strategy", "value": "git", "CIvars": []}]}]}]}
{"id": "17405128_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install  # If you're using JavaScript with Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust according to your test suite\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install  # If you're using JavaScript with Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-app-name.git  # Replace with your Heroku app name\ngit push heroku main  # Deploy to the main branch on Heroku\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17414469_0", "jobs": [{"name": "behat-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gettext", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mysql -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e \"CREATE DATABASE my_database_name;\"\n# Ensure you have set up your database using GitHub Secrets\n# Replace `my_database_name` with your actual database name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat -f pretty --tags 'your_jira_issue_tag'  # Replace 'your_jira_issue_tag' with appropriate tag\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17424733_0", "jobs": [{"name": "run-puppet", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet apply path/to/your/manifest.pp  # Specify the path to your manifest file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional: You can add steps here to clean up after your Puppet run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17429779_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd path/to/your/javascript/project\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd path/to/your/javascript/project\nnpm test # Adjust this command based on your test runner\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "16.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/solution.sln\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild path/to/your/solution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test path/to/your/solution.sln --configuration Release\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17434919_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "<YOUR_SERVER>", "CIvars": []}, {"type": "arg", "name": "username", "value": "<YOUR_USERNAME>", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.SFTP_PASSWORD }}", "CIvars": [{"name": "SFTP_PASSWORD", "expression": "secrets.SFTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "path/to/your/config/files/**/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/on/remote/server", "CIvars": []}, {"type": "arg", "name": "rm", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Configuration files deployed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17457842_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ matrix.environment }}\" == \"development\" ]; then\n  echo \"BEHAT_ENV=development\" >> $GITHUB_ENV\n  echo \"BEHAT_DB_URL=mysql://user:password@localhost/development_db\" >> $GITHUB_ENV\nelif [ \"${{ matrix.environment }}\" == \"staging\" ]; then\n  echo \"BEHAT_ENV=staging\" >> $GITHUB_ENV\n  echo \"BEHAT_DB_URL=mysql://user:password@localhost/staging_db\" >> $GITHUB_ENV\nelif [ \"${{ matrix.environment }}\" == \"production\" ]; then\n  echo \"BEHAT_ENV=production\" >> $GITHUB_ENV\n  echo \"BEHAT_DB_URL=mysql://user:password@localhost/production_db\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --config behat.yml --env $BEHAT_ENV\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17511251_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# here you can add commands to run your tests\n./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can add build commands here, if necessary\necho \"Building the project...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the server...\"\n# Add deployment commands like rsync, scp, etc. here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17607100_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.pubxml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Version: $(DateTime -Format 'yyyyMMddHHmmss')\" > version.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your MSBuild package is outputting to a folder called 'drop'\ncp version.txt drop\\YourProjectName.zip\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Adjust these paths to the correct ones where your zipped package is located.\nmsdeploy -verb:sync -source:package=drop\\YourProjectName.zip -dest:auto,ComputerName=\"https://YOUR_DEPLOYMENT_SERVER:8172/msdeploy.axd?\",UserName=$DEPLOYMENT_USERNAME,Password=$DEPLOYMENT_PASSWORD,AuthType=\"Basic\" -enableRule:AppOffline\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Remove-Item -Path version.txt\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "176273_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "hashicorp/setup-packer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "1.8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "packer validate ./path/to/your/packer.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "packer build -machine-readable ./path/to/your/packer.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes your build process outputs an image file (e.g. .img, .box etc.)\nmkdir -p artifacts\ncp output-image-file.ext artifacts/  # change to actual output file\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vm-image-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "artifacts/output-image-file.ext", "CIvars": []}]}]}]}
{"id": "17634760_0", "jobs": [{"name": "clone", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git clone https://github.com/yourusername/another-repo.git\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -s https://getcomposer.org/installer | php -- --install-dir=bin --filename=composer\nphp bin/composer require --dev phing/phing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phing deploy  # Adjust this to your specific build target\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17650397_0", "jobs": [{"name": "phpcs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "intl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "export PATH=\"$HOME/.composer/vendor/bin:$PATH\" # Make sure phpcs is in PATH\nphpcs --standard=PSR12 --report=checkstyle --report-file=phpcs-report.xml .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "phpcs-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "phpcs-report.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if grep -q '<error ' phpcs-report.xml; then\n  echo \"PHP_CodeSniffer found issues.\";\n  exit 1;\nelse\n  echo \"No issues found.\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17678306_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "uk-install", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application\"\n# Insert your deployment script here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17710097_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_DEVOPS_PAT }}\" | az devops login --organization https://dev.azure.com/your-organization\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az pipelines run --name \"Pipeline-Name\" --project \"Project-Name\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17738234_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake generate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd public\ngit init\ngit config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\ngit add .\ngit commit -m \"Deploying to GitHub Pages\"\ngit push --force \"https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git\" master:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17803165_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building and testing application...\"\n# Add your build commands here\n# Example: npm install && npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "benc-uk/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "<your_username>/<your_downstream_repo>", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "event-type", "value": "trigger-saving", "CIvars": []}, {"type": "arg", "name": "client-payload", "value": "{\"ref\": \"${{ github.ref }}\", \"commit\": \"${{ github.sha }}\"}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}]}
{"id": "17843725_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler -v '<SPECIFY VERSION>' # Optional: specify bundler version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create \nbin/rails db:migrate\nbin/rails db:test:prepare  # Prepare test database\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec   # Change this command according to your test suite (e.g., Minitest, RSpec)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17867467_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-scripts --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --format=pretty", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "behat-failure-screenshots", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/failure/screenshots", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Behat tests failed. Please check the logs and conditions.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17972053_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, dom", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Be sure to install Behat globally or in your project's composer.json dependencies\ncomposer require --dev behat/behat behat/mink behat/mink-selenium2-driver\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Adjust the command based on your Behat configuration\nvendor/bin/behat --format=pretty --format=progress --tags=@ui\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "behat-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/behat-results", "CIvars": []}]}]}]}
{"id": "17979731_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test || echo \"Tests failed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mv test/test_results.txt outputs/test_results.txt\necho \"Test output captured\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"${CHEF_SERVER_URL}/organizations/YOUR_ORG/environments/YOUR_ENVIRONMENT/error_reports\" \\\n  -H \"Authorization: Bearer ${CHEF_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"error\": \"Test suite failed\",\n    \"details\": \"'\"${ERROR_REPORT}\"'\"\n  }'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleanup tasks here if necessary\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17992081_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite UnitTests --testdox", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18114687_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "v1.5", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.projectKey=your_project_key -Dsonar.organization=your_organization -Dsonar.projectVersion=${{ github.sha }} -Dsonar.sources=src -Dsonar.tests=test -Dsonar.language=js -Dsonar.sourceEncoding=UTF-8\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "v1.5", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.qualitygate.wait=true\n", "CIvars": []}]}]}]}
{"id": "18205327_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}]}]}]}
{"id": "18257630_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "1826216_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-install-ansible", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.10", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${PRIVATE_KEY}\" > private_key.pem\nchmod 600 private_key.pem\nansible-playbook -i your_inventory_file deploy.yml --private-key private_key.pem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18294973_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife cookbook upload ./cookbooks --all  # This assumes your cookbooks are in a 'cookbooks' directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have `knife` configured properly\nknife ssh \"name:${{ secrets.CHEF_NODE_NAME }}\" \"sudo chef-client\" --ssh-user <your-ssh-user> --identity-file <path-to-your-ssh-key>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18318097_0", "jobs": [{"name": "delete_branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deleting branch for the closed pull request...\"\nBRANCH_NAME=${{ github.event.pull_request.head.ref }}\n\n# Delete the branch if it is not the main or default branch\nif [[ \"$BRANCH_NAME\" != \"main\" && \"$BRANCH_NAME\" != \"master\" ]]; then\n  gh pr close \"${{ github.event.pull_request.number }}\" --delete-branch\n  echo \"Branch '$BRANCH_NAME' deleted.\"\nelse\n  echo \"The branch '$BRANCH_NAME' is a protected branch. Skipping deletion.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18322205_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p tmp/db\ncp config/database.yml.example config/database.yml\nbundle exec rails db:create\nbundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Replace with your test framework if you're using something else like Minitest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install rubocop\nbundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-app.git\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Refactoring completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18386629_0", "jobs": [{"name": "create-pull-request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "main", "CIvars": []}, {"type": "arg", "name": "title", "value": "Merge bug fix from maintenance branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "This pull request merges the latest bug fixes from the maintenance branch.", "CIvars": []}, {"type": "arg", "name": "base", "value": "main", "CIvars": []}, {"type": "arg", "name": "head", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "kentaro-m/assign-pull-request-reviewers", "version": "v1.2.0", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "username1,username2", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "bug", "CIvars": []}]}]}]}
{"id": "1845466_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath ${{ github.workspace }}/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-App-Archive", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "18457992_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -sdk iphonesimulator \\\n           -destination \"platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios_version }}\" \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace \\\n                -scheme YourScheme \\\n                -sdk iphonesimulator \\\n                -destination \"platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios_version }}\" \\\n                CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18527511_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-install", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit.xml \n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nscp -o StrictHostKeyChecking=no -r . $USER@$HOST:/path/to/deploy  # Replace with actual deployment path\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no $USER@$HOST 'bash /path/to/deployment/script.sh'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18536210_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}\" >> $GITHUB_ENV\necho \"APP_STORE_CONNECT_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane gym --scheme YourSchemeName --export_method app-store --output_directory ./output --output_name YourAppName.ipa", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourAppName.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output/YourAppName.ipa", "CIvars": []}]}]}]}
{"id": "18651120_0", "jobs": [{"name": "generate-changelog", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install github_changelog_generator\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "github_changelog_generator -u YOUR_GITHUB_USERNAME -p YOUR_REPOSITORY_NAME -o CHANGELOG.md\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add CHANGELOG.md\ngit commit -m \"Update CHANGELOG.md\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18734154_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane gym --scheme \"YourAppScheme\" --archive_path \"YourApp.xcarchive\" --export_method \"app-store\" --output_directory \"./build\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane pilot upload --archive_path \"./build/YourApp.xcarchive\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18846605_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1890228_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt # Adjust if necessary for your package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest # Adjust to your testing framework, e.g., npm test for Node.js apps\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet # Adjust app.yaml path if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18905805_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18912960_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-clover coverage.xml\nbash <(curl -s https://codecov.io/bash) -f coverage.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying your project...\"\n# Add your deployment commands here, e.g.:\n# ssh user@your-server \"cd /path/to/your/project && git pull origin main\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18948424_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y gcc make\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake .. # Adjust if using CMake; otherwise compile your source directly\nmake      # Adjust if necessary; use the appropriate command for your build system\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./build/my_plugin_tests # Adjust this to your actual test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your plugin creates an artifact suitable for SonarQube\ncp build/my_plugin.so ./ # Copy the plugin to the root (or adjust as needed)\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "sonar-plugin", "CIvars": []}, {"type": "arg", "name": "path", "value": "my_plugin.so", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "projectKey", "value": "your_project_key", "CIvars": []}, {"type": "arg", "name": "organization", "value": "your_organization", "CIvars": []}]}]}]}
{"id": "1901632_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.pubxml /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "ftp://your-ftp-server", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./YourProject/bin/Release", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/VirtualDirectory/", "CIvars": []}]}]}]}
{"id": "19031858_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Navigate to the iOS project\nfastlane beta  # Assuming 'beta' lane is set up in your Fastfile\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19068182_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "qt/qt-actions/setup-qt", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "target-linux", "value": true, "CIvars": []}, {"type": "arg", "name": "build-tools", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential g++ gcc cmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "qmake your_project.pro  # Replace with your actual .pro file name\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./your_executable # Replace with the executable name generated by your build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19110730_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane test # Ensure you have this lane set up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane release # This lane should handle the App Store deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19137424_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet-lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet-lint manifests/", "name": "", "version": "", "shell": "bash"}]}, {"name": "validate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet parser validate manifests/", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying Puppet Manifests to $SERVER_ENDPOINT\"\nsshpass -p \"$SERVER_PASSWORD\" scp -r ./manifests/ $SERVER_USER@$SERVER_ENDPOINT:/etc/puppetlabs/code/environments/production/manifests/\nsshpass -p \"$SERVER_PASSWORD\" ssh $SERVER_USER@$SERVER_ENDPOINT 'sudo puppet agent -t'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19200017_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-scripts", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19210088_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"VARIABLES=$(cat variables.yml | grep -v '^\\s*#' | sed 's/^/\\'/' | sed 's/:/\\'/',/g | sed 's/,/\\n/g')\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Load environment variables from the file\neval \"${{ env.VARIABLES }}\"\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your deployment commands here\n# e.g., pushing to gh-pages branch, uploading to some server, etc.\necho \"Deploying...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19312068_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying version ${{ github.ref }} to production...\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "assets/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}]}]}
{"id": "19335688_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpunit/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev php-webdriver/webdriver", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y xvfb\nXvfb :99 -screen 0 1920x1080x24 &\nphp vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19434596_0", "jobs": [{"name": "build-msi", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.pubxml\n# Adjust the above command according to your solution and project structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "msi-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "**/*.msi", "CIvars": []}]}]}]}
{"id": "19438183_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet ef database update --project YourProject.Data\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Synchronize Sitecore items\n# You may need to implement or call a specific script or tools\n# to synchronize Sitecore content based on your requirements\n./scripts/sync-sitecore-content.ps1 \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with the actual deployment commands or scripts you use.\n./scripts/deploy-to-sitecore.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-send", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "channel", "value": "#notifications", "CIvars": []}, {"type": "arg", "name": "text", "value": "Sitecore database consistency workflow completed successfully!", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-send", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "channel", "value": "#notifications", "CIvars": []}, {"type": "arg", "name": "text", "value": "Sitecore database consistency workflow failed. Please check the logs.", "CIvars": []}]}]}]}
{"id": "1946907_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "text", "value": "Nightly build failed! Please check the logs for more details.", "CIvars": []}]}]}, {"name": "success", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "text", "value": "Nightly build succeeded! \ud83c\udf89", "CIvars": []}]}]}]}
{"id": "19477555_0", "jobs": [{"name": "python", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "nodejs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "java", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn install\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19481138_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"\n# Add your deployment script here\n  \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1948305_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or your preferred test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19513126_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=${{ secrets.DATABASE_URL }}\" >> $GITHUB_ENV\necho \"API_KEY=${{ secrets.API_KEY }}\" >> $GITHUB_ENV\necho \"ANOTHER_ENV_VAR=some_value\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Add your deployment script here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19555107_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd Path/To/Your/XcodeProject  # Navigate to your project directory\npod install  # Example for CocoaPods, adjust for your dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration AppStoreDistribution archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportPath ${{ github.workspace }}/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install fastlane if not already available\ngem install fastlane\n\n# Use fastlane to upload the IPA to TestFlight\nfastlane pilot upload --app_identifier $BUNDLE_ID --ipa ${{ github.workspace }}/build/YourApp.ipa --api_key_path api_key.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19628512_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install --project-directory=YourProjectName/  # Adjust to your project directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -configuration Debug -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.0' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -configuration Debug -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.0'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19629284_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\n# If your project uses CocoaPods, uncomment the following line\n# pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n# Ensure the command line tools are installed\nxcode-select --install || echo \"Command Line Tools already installed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xcode-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/test/results", "CIvars": []}]}]}]}
{"id": "19737264_0", "jobs": [{"name": "install_dependencies", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19742123_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -fsSL https://apt.repos.inside.growingtree.com/vagrant/GPG-KEY-vagrant | gpg --dearmor -o /usr/share/keyrings/vagrant.gpg\necho \"deb [signed-by=/usr/share/keyrings/vagrant.gpg] https://apt.repos.inside.growingtree.com/vagrant/ubuntu $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/vagrant.list\napt-get update\napt-get install -y vagrant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant validate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up --provision\nvagrant package --output my-vagrant-box.box\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vagrant-box", "CIvars": []}, {"type": "arg", "name": "path", "value": "my-vagrant-box.box", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vagrant-box", "CIvars": []}, {"type": "arg", "name": "path", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "vagrant box add my-vagrant-box my-vagrant-box.box\n# Further deployment steps can be added here, such as vagrant up in a production environment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19764964_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Adjust to your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Preparing to deploy the application...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.REMOTE_HOST }}", "CIvars": [{"name": "REMOTE_HOST", "expression": "secrets.REMOTE_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.REMOTE_USER }}", "CIvars": [{"name": "REMOTE_USER", "expression": "secrets.REMOTE_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.REMOTE_PATH }}", "CIvars": [{"name": "REMOTE_PATH", "expression": "secrets.REMOTE_PATH", "type": "secret"}]}, {"type": "arg", "name": "rm", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Application deployed successfully!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19773928_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' clean build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19930113_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "wget https://raw.githubusercontent.com/adamwiggins/CodeCoverage/master/CodeCoverage.php\nphp CodeCoverage.php ./vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19949932_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --no-restore -o ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAzureAppName", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\nrm -rf ./publish\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19961854_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n-scheme YourScheme \\\n-configuration Debug \\\n-destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \\\nclean test \\\nCODE_COVERAGE=YES\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun xccov view --report --json YourProject/DerivedData/Logs/Test/*.xcresult > coverage_report.json\nxcrun xccov view --summary --json YourProject/DerivedData/Logs/Test/*.xcresult > coverage_summary.json\nxcrun xccov view --report YourProject/DerivedData/Logs/Test/*.xcresult > coverage_report.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage_report.json\ncoverage_summary.json\ncoverage_report.txt\n", "CIvars": []}]}]}]}
{"id": "1998589_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ github.workspace }}/vendor/bin\" >> $GITHUB_PATH", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing # or phing <your-task-name> if you want to run a specific task\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20007578_0", "jobs": [{"name": "check_branch_name", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"BRANCH_NAME=$(echo '${{ github.head_ref }}' | tr '[:upper:]' '[:lower:]')\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking branch name: $BRANCH_NAME\"\nif [[ \"$BRANCH_NAME\" != refs/heads/feature/* && \"$BRANCH_NAME\" != refs/heads/bugfix/* ]]; then\n  echo \"Branch name '$BRANCH_NAME' is not in the expected format (must start with 'feature/' or 'bugfix/').\"\n  echo \"::set-output name=branch_rename_required::true\"\nelse\n  echo \"Branch name format is correct.\"\n  echo \"::set-output name=branch_rename_required::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "\u26a0\ufe0f Please consider renaming your branch to follow the organization\u2019s naming conventions:\n- Use `feature/` for new features\n- Use `bugfix/` for bug fixes.\n", "CIvars": []}]}]}]}
{"id": "20105643_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxis112358/setup-xcode", "version": "v1.3", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your_project_directory # Change this to your project's root directory\nif [ -f Podfile ]; then\n  pod install --repo-update\nfi\n# Add other dependency installation commands as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test \\\n  -workspace YourWorkspace.xcworkspace \\ # Change this to your workspace or project\n  -scheme YourSchemeName \\                 # Change to your scheme\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  ONLY_ACTIVE_ARCH=NO | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive \\\n  -workspace YourWorkspace.xcworkspace \\ # Change this to your workspace or project\n  -scheme YourSchemeName \\                 # Change to your scheme\n  -archivePath ./build/YourApp.xcarchive \\ # Change as necessary\n  CODE_SIGN_IDENTITY=\"\" \\\n  CODE_SIGNING_REQUIRED=NO \\\n  CODE_SIGNING_ALLOWED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n  -archivePath ./build/YourApp.xcarchive \\ # Change as necessary\n  -exportPath ./build/YourApp.ipa \\\n  -exportOptionsPlist ExportOptions.plist # Make sure this plist is configured correctly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20166017_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourProjectScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourProjectScheme -sdk iphoneos -configuration Release archive -archivePath ./build/YourProject.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ./build/YourProject.xcarchive -exportPath ./build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-App", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/*.ipa", "CIvars": []}]}]}]}
{"id": "20184577_0", "jobs": [{"name": "tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testsuite=unit # Adjust your PHPUnit command as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpstan/phpstan  # Install PHPStan if not in composer.json\n./vendor/bin/phpstan analyse src --level max # Adjust the source directory and level as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20328747_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "gcc-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y cmake libcppunit-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable --reporter=xml > test-results.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cppunit-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/test-results.xml", "CIvars": []}]}]}]}
{"id": "20601972_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release -sdk iphonesimulator -arch x86_64 ONLY_ACTIVE_ARCH=NO clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20631816_0", "jobs": [{"name": "delete_pending_build_requests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Package Microsoft.TeamFoundationServer.Client -Source nuget.org -Scope CurrentUser\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# PowerShell script to delete all pending build requests\n$tfsUrl = $env:TFS_URL\n$project = $env:TFS_PROJECT\n$username = $env:TFS_USERNAME\n$password = $env:TFS_PASSWORD\n\n# Create a TFS client\n$tfsCollection = New-Object Microsoft.TeamFoundation.Client.TfsTeamProjectCollection($tfsUrl)\n$tfsCollection.Authenticate($username, $password)\n\n# Get the Build Server\n$buildServer = $tfsCollection.GetService([Microsoft.TeamFoundation.Build.Client.IBuildServer])\n\n# Get all pending builds\n$pendingBuilds = $buildServer.QueryBuilds($project, [Microsoft.TeamFoundation.Build.Client.BuildStatus]::InProgress)\n\n# Loop through pending builds and delete them\nforeach ($build in $pendingBuilds) {\n    Write-Host \"Deleting Build #$($build.BuildNumber)\"\n    $buildServer.DeleteBuild($build.BuildDefinition.Uri, $build.BuildId)\n}\n\nWrite-Host \"All pending build requests have been deleted.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2068555_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "svn-action/checkout", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "https://your-svn-repo-url", "CIvars": []}, {"type": "arg", "name": "path", "value": "your-local-path", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y ant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-local-path # Change to your SVN checkout directory\nant build # Adjust the target according to your build file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-local-path # Change to your SVN checkout directory\nant test # Adjust the target according to your build file for running tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "your-local-path/test-results.xml", "CIvars": []}]}]}]}
{"id": "20689512_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "macos-setup/xcode", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install # Or any other dependency manager you use (e.g., Cartfile for Carthage)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 13' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Store logs or artifacts here if tests fail\nxcodebuild -showBuildTimingSummary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ui-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./YourProjectDirectory/Build/Logs/Test", "CIvars": []}]}]}]}
{"id": "20692990_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v2.9.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP1_NAME }}", "CIvars": [{"name": "HEROKU_APP1_NAME", "expression": "secrets.HEROKU_APP1_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "working_directory", "value": "./app1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v2.9.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP2_NAME }}", "CIvars": [{"name": "HEROKU_APP2_NAME", "expression": "secrets.HEROKU_APP2_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "working_directory", "value": "./app2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v2.9.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP3_NAME }}", "CIvars": [{"name": "HEROKU_APP3_NAME", "expression": "secrets.HEROKU_APP3_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "working_directory", "value": "./app3", "CIvars": []}]}]}]}
{"id": "2087347_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or whatever test framework you use\n# If you are using Minitest, replace with:\n# bundle exec rake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add API testing commands (e.g. Postman/Newman, RSpec, etc.)\n# Example using RSpec:\nbundle exec rspec spec/requests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20874490_0", "jobs": [{"name": "sync-database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "symfony/mysql-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "database", "value": "joomla_db", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.DB_USERNAME }}", "CIvars": [{"name": "DB_USERNAME", "expression": "secrets.DB_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DB_PASSWORD }}", "CIvars": [{"name": "DB_PASSWORD", "expression": "secrets.DB_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "mysqldump -h localhost -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} joomla_db > joomla_db_backup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "joomla-db-backup", "CIvars": []}, {"type": "arg", "name": "path", "value": "joomla_db_backup.sql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Database sync completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20952512_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env && php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the server...\"\n# Add your deployment commands here, e.g.:\n# rsync -avz --delete ./ youruser@yourserver:/path/to/your/app\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20956154_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage  # Ensure you have a coverage script\nmkdir -p coverage\n# Move coverage reports to the coverage directory\nmv coverage/lcov.info coverage/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.projectKey=my_project_key", "CIvars": []}]}]}]}
{"id": "21151792_0", "jobs": [{"name": "post-comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=commit_message::$(git log -1 --pretty=%B)\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment ", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Latest Commit Message: ${{ steps.get_commit_message.outputs.commit_message }}", "CIvars": [{"name": "get_commit_message.outputs.commit_message", "expression": "steps.get_commit_message.outputs.commit_message", "type": "steps"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const commit_message = '${{ steps.get_commit_message.outputs.commit_message }}';\nconst issue_title = 'Commit Message for Push';\nconst issue_body = `Latest Commit Message: ${commit_message}`;\nawait github.issues.create({\n  ...context.repo,\n  title: issue_title,\n  body: issue_body\n});\n", "CIvars": [{"name": "get_commit_message.outputs.commit_message", "expression": "steps.get_commit_message.outputs.commit_message", "type": "steps"}]}]}]}]}
{"id": "21220218_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 --extensions=php application/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpdoc -d application -t docs/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the production server...\"\n# Add your deployment commands here, for example:\n# scp -r ./* user@server:/path/to/destination\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21223589_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install axios", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example of dynamically generating email list\n# You can replace this with your logic to fetch or create the list\necho \"::set-output name=recipients::user1@example.com,user2@example.com,user3@example.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mohit-rajput/sendgrid-action", "version": "v1.2", "shell": "bash", "with": [{"type": "arg", "name": "api-key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ steps.get-recipients.outputs.recipients }}", "CIvars": [{"name": "get-recipients.outputs.recipients", "expression": "steps.get-recipients.outputs.recipients", "type": "steps"}]}, {"type": "arg", "name": "subject", "value": "Dynamic Email Subject", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello, this is a test email sent to dynamic recipients!", "CIvars": []}]}]}]}
{"id": "212999_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/ios-ci-action", "version": "v2.2.0", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "15.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21335173_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --ci --reporters=jest-junit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./junit.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "mikeal/publish-to-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "junit.xml", "CIvars": []}]}]}]}
{"id": "21487707_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/publish-from-macos", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -license accept\nbrew install cocoapods  # Install CocoaPods if needed\npod install              # Install dependencies via CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp/Products/Debug-iphonesimulator/*\n", "CIvars": []}]}]}]}
{"id": "21537366_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/remote/dir", "CIvars": []}]}]}]}
{"id": "21566225_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change to the appropriate command based on your project's package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Replace with your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Changes have been pushed to the repository.\" > changes.txt\ngit config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\ngit add changes.txt\ngit commit -m \"Add notification of changes\"\ngit push  # Ensure you have the correct permissions and tokens set for pushing back\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "discord/discord-webhook", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "${{ secrets.DISCORD_WEBHOOK_URL }}", "CIvars": [{"name": "DISCORD_WEBHOOK_URL", "expression": "secrets.DISCORD_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "A new change has been pushed to the repository. Check it out at ${{ github.repository }}!", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}, {"name": "track-vendor-changes", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch --depth=1 origin main\ngit diff --name-status origin/main...HEAD > vendor_changes.txt  # Adjust as necessary for your vendor files/structure\nif [[ -s vendor_changes.txt ]]; then\n  echo \"Vendor changes detected:\"\n  cat vendor_changes.txt\n  # You can add other handling logic here if needed.\nelse\n  echo \"No vendor changes detected.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2157460_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ github.event.ref == 'refs/heads/main' && secrets.PRODUCTION_APP_NAME || secrets.STAGING_APP_NAME }}", "CIvars": [{"name": "event.ref", "expression": "github.event.ref == 'refs/heads/main' && secrets.PRODUCTION_APP_NAME || secrets.STAGING_APP_NAME", "type": "context"}, {"name": "PRODUCTION_APP_NAME", "expression": "secrets.PRODUCTION_APP_NAME", "type": "secret"}, {"name": "STAGING_APP_NAME", "expression": "secrets.STAGING_APP_NAME", "type": "secret"}, {"name": "event.ref", "expression": "github.event.ref", "type": "context"}]}, {"type": "arg", "name": "slot-name", "value": "${{ github.event.ref == 'refs/heads/main' && 'production' || 'staging' }}", "CIvars": [{"name": "event.ref", "expression": "github.event.ref == 'refs/heads/main' && 'production' || 'staging'", "type": "context"}, {"name": "event.ref", "expression": "github.event.ref", "type": "context"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ github.event.ref == 'refs/heads/main' && secrets.AZURE_PRODUCTION_PUBLISH_PROFILE || secrets.AZURE_STAGING_PUBLISH_PROFILE }}", "CIvars": [{"name": "event.ref", "expression": "github.event.ref == 'refs/heads/main' && secrets.AZURE_PRODUCTION_PUBLISH_PROFILE || secrets.AZURE_STAGING_PUBLISH_PROFILE", "type": "context"}, {"name": "AZURE_PRODUCTION_PUBLISH_PROFILE", "expression": "secrets.AZURE_PRODUCTION_PUBLISH_PROFILE", "type": "secret"}, {"name": "AZURE_STAGING_PUBLISH_PROFILE", "expression": "secrets.AZURE_STAGING_PUBLISH_PROFILE", "type": "secret"}, {"name": "event.ref", "expression": "github.event.ref", "type": "context"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# You can use an appropriate command to migrate your database\n# This could be running a script or calling a DB migration tool\necho \"Running database migrations...\"\n\n# Example for EF Core\ndotnet ef database update --project YourProject.csproj --startup-project YourProject.csproj\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21783866_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore <YourSolution.sln>", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild <YourSolution.sln> /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Define a variable for your deployment directory\nDEPLOY_DIR=\"path\\to\\your\\deployment\\directory\"  # Replace with your deployment path\n\n# Check for changed files\ngit fetch origin main  # Make sure to fetch the latest changes\nCHANGED_FILES=$(git diff --name-only HEAD origin/main)\n\n# Deploy changed files only\nfor file in $CHANGED_FILES; do\n  if [ -f \"$file\" ]; then\n    echo \"Deploying changed file: $file\"\n    # Use robocopy or any other method to deploy your files\n    # This example uses robocopy to copy files to the deployment directory\n    robocopy \"$(dirname \"$file\")\" \"$DEPLOY_DIR\" \"$(basename \"$file\")\"\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2180460_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "ini_values", "value": "error_reporting = E_ALL\ndisplay_errors = On\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\nssh -o StrictHostKeyChecking=no $DEPLOY_USER@$SERVER_IP \"\n  cd $DEPLOY_DIRECTORY\n  git pull origin main\n  composer install --no-dev --prefer-dist\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2182035_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}]}]}
{"id": "21844109_0", "jobs": [{"name": "move-issue", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/move-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "source_repo", "value": "${{ github.event.inputs.source_repo }}", "CIvars": [{"name": "event.inputs.source_repo", "expression": "github.event.inputs.source_repo", "type": "context"}]}, {"type": "arg", "name": "target_repo", "value": "${{ github.event.inputs.target_repo }}", "CIvars": [{"name": "event.inputs.target_repo", "expression": "github.event.inputs.target_repo", "type": "context"}]}, {"type": "arg", "name": "issue_number", "value": "${{ github.event.inputs.issue_number }}", "CIvars": [{"name": "event.inputs.issue_number", "expression": "github.event.inputs.issue_number", "type": "context"}]}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "2186215_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawrence/action-cmake", "version": "v1.0.1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.19.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build . --config Debug\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncpack -G ZIP  # or any other packaging tool you are using\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can use curl or any other tool to upload your symbols\ncurl -X POST \"${SYMBOL_SERVER_URL}/upload\" \\\n     -H \"Authorization: Bearer ${SYMBOL_SERVER_API_KEY}\" \\\n     -F \"file=@your_symbol_file.zip\"  # use the correct path to your symbol file\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21999643_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install --repo-update # For projects using CocoaPods\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "**/TestLogs/*.log # Adjust according to your test logs' path\n", "CIvars": []}]}]}]}
{"id": "22022247_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler:2.3.0 # Adjust to your project's required Bundler version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphoneos -archivePath ~/output/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ~/output/YourApp.xcarchive -exportOptionsPlist ~/output/exportOptions.plist -exportPath ~/output\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "~/output/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "220668_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22088992_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env  # Assuming you have an .env.example file\n# Set your database credentials and any other environment variables\necho \"DB_DATABASE=your_database\" >> .env\necho \"DB_USERNAME=your_username\" >> .env\necho \"DB_PASSWORD=your_password\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Feature", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22177325_0", "jobs": [{"name": "load-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0c55b159cbfafe01e --instance-type t2.micro --key-name MyKeyPair --security-group-ids sg-01234567890123456 --query 'Instances[0].InstanceId' --output text)\necho \"INSTANCE_ID=${INSTANCE_ID}\" >> $GITHUB_ENV\necho \"Waiting for instance to be ready...\"\naws ec2 wait instance-running --instance-ids $INSTANCE_ID\nPUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)\necho \"PUBLIC_IP=${PUBLIC_IP}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running load tests on EC2 instance at ${PUBLIC_IP}\"\n# Replace this with your load test command, for example:\n# curl http://${PUBLIC_IP}/load-test-endpoint\n# Or use a load testing tool like Apache JMeter, Gatling, or k6.\nssh -o StrictHostKeyChecking=no -i MyKeyPair.pem ec2-user@${PUBLIC_IP} 'cd /path/to/your/load/test && ./run-load-test.sh'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "aws ec2 terminate-instances --instance-ids $INSTANCE_ID\naws ec2 wait instance-terminated --instance-ids $INSTANCE_ID\necho \"Terminated EC2 instance ${INSTANCE_ID}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22209177_0", "jobs": [{"name": "run-ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Executing Ruby code...\"\nruby my_script.rb  # Replace with your Ruby file name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22219526_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, sqlite3, mysqli, pdo, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "v4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "ftp://ftp.yourserver.com", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/deployment/directory", "CIvars": []}]}]}]}
{"id": "22249906_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22275744_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit_custom_1.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit_custom_2.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit_custom_3.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22322124_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key\nchmod 600 private_key\nscp -o StrictHostKeyChecking=no -i private_key -r ./* $DEPLOY_USER@$SERVER_IP:$DEPLOY_PATH\nssh -o StrictHostKeyChecking=no -i private_key $DEPLOY_USER@$SERVER_IP \"cd $DEPLOY_PATH && composer install --no-dev --prefer-dist\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22324705_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer:v2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/sake dev/build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22361017_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, dom", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22438047_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.DRONE_HOST }}", "CIvars": [{"name": "DRONE_HOST", "expression": "secrets.DRONE_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.DRONE_USER }}", "CIvars": [{"name": "DRONE_USER", "expression": "secrets.DRONE_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.DRONE_SSH_KEY }}", "CIvars": [{"name": "DRONE_SSH_KEY", "expression": "secrets.DRONE_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "dist/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/deployment/folder", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST \\\n-H \"Authorization: Bearer ${{ secrets.DRONE_TOKEN }}\" \\\nhttps://your-drone-server/api/repos/OWNER/REPO/trigger \\\n-d '{\"branch\":\"main\"}' # Change to the desired branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2245861_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/\nvendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unusedcode\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev squizlabs/php_codesniffer\ncomposer require --dev phpmd/phpmd\ncomposer require --dev roave/security-advisories\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-clover coverage.xml\nbash <(curl -s https://codecov.io/bash) -f coverage.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -z \"$(git status --porcelain)\" ]; then\n  echo \"No changes have been made.\";\nelse\n  echo \"Changes have been made.\";\n  # You can perform any notification here (like a webhook call)\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22482265_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "perl_version", "value": "5.32", "CIvars": []}, {"type": "arg", "name": "perl_module", "value": "Test::Harness", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --not-strict --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -v t/*.t", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -b -r t/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22493477_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "msbuild your-solution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vstest.console.exe path\\to\\your\\test\\project\\bin\\Release\\*.Tests.dll\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-website-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path\\to\\your\\published\\website\\*\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to TFS...\"\n# You need to install the TFS CLI or use a specific script for TFS 2012\n# Example command to deploy\ntfscli deploy --url $TFS_URL --username $TFS_USERNAME --password $TFS_PASSWORD --artifact-path path/to/deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22519508_0", "jobs": [{"name": "check-forks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "PARENT_REPO=\"username/repository\"  # Set your parent repository here\nDELETED_REPO_CHECK_RESULT=$(gh repo view \"$PARENT_REPO\" --json isFork --jq '.isFork')\n\nif [ \"$DELETED_REPO_CHECK_RESULT\" == \"null\" ]; then\n  echo \"The repository $PARENT_REPO does not exist, checking forks...\"\n  FORKS=$(gh repo list \"$PARENT_REPO\" --limit 1000 --json nameWithOwner | jq -r '.[].nameWithOwner')\n  \n  if [ -z \"$FORKS\" ]; then\n    echo \"No forks found.\"\n  else\n    echo \"Found orphaned forks:\"\n    for FORK in $FORKS; do\n      echo \"- $FORK\"\n    done\n    # Optionally, send a notification, or take other actions here\n  fi\nelse\n  echo \"The repository $PARENT_REPO is still active.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22527859_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2013", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild path\\to\\your\\solution2012.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild path\\to\\your\\solution2013.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22561183_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# If you're using CocoaPods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphoneos -configuration Release build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/test/results", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build failed! Please check the logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22563763_1", "jobs": [{"name": "solve-integrals", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pyenv/pyenv-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": 3.2, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install sympy\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python solve_integrals.py\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22582102_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can add any command here to test or execute after installing packages\nphp artisan test  # Example for Laravel, adjust as needed for your application\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22621690_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer:v2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22767470_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --without development test\nyarn install --production --frozen-lockfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust this command based on your test suite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CAPISTRANO_SSH_KEY }}\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -H $CAPISTRANO_SERVER >> ~/.ssh/known_hosts\nbundle exec cap production deploy\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:seed:incremental\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22786299_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "subversion/svn", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "svn_url", "value": "https://your_svn_repository_url", "CIvars": []}, {"type": "arg", "name": "svn_username", "value": "${{ secrets.SVN_USERNAME }}", "CIvars": [{"name": "SVN_USERNAME", "expression": "secrets.SVN_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "svn_password", "value": "${{ secrets.SVN_PASSWORD }}", "CIvars": [{"name": "SVN_PASSWORD", "expression": "secrets.SVN_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "checkout_path", "value": "svn_checkout", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app\nsudo xcodebuild -runFirstLaunch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -archivePath build/YourApp.xcarchive -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportPath build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "svn_checkout/YourProjectName/build/*.ipa", "CIvars": []}]}]}]}
{"id": "22873014_0", "jobs": [{"name": "update-provisioning-profiles", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nfastlane produce enable --skip_update # Ensure app is created in App Store Connect\nfastlane match type:appstore  # or type:development based on your need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane match nuke development  # Uncomment if you want to clean up development profiles\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2287716_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:OutputPath=YourDesiredOutputPath\n# Note: Modify the OutputPath argument based on your requirements\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have tests to run, adjust as necessary\ndotnet test YourTestProject.csproj --configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourDesiredOutputPath", "CIvars": []}]}]}]}
{"id": "22905081_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phpstan/phpstan\n~/.config/composer/vendor/bin/phpstan analyse\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require squizlabs/php_codesniffer\n~/.config/composer/vendor/bin/phpcs --standard=PSR2 src\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22997721_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/actions-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProject\n# Adjust the command below based on your dependency manager (e.g. CocoaPods, Carthage, etc.)\npod install  # For CocoaPods\n# or \n# carthage update --platform iOS\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProject\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProject\nxcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23015168_0", "jobs": [{"name": "close_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/close-pull-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.issue.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}, {"type": "arg", "name": "comment", "value": "${{ github.event.comment.body }}", "CIvars": [{"name": "event.comment.body", "expression": "github.event.comment.body", "type": "context"}]}]}]}]}
{"id": "23231604_0", "jobs": [{"name": "dart-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dart-lang/setup-dart", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run tests with the option to fail on timeouts\ndart test --timeout=30s || echo \"Some tests may have timed out\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23428720_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=mysql://root:your_root_password@127.0.0.1:3306/your_database_name\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --bootstrap vendor/autoload.php tests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Your build commands, e.g., asset compilation, migrations, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23532682_0", "jobs": [{"name": "create-new-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/create-repository", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "new_repo_name", "value": "${{ github.event.inputs.new_repo_name }}", "CIvars": [{"name": "event.inputs.new_repo_name", "expression": "github.event.inputs.new_repo_name", "type": "context"}]}, {"type": "arg", "name": "new_repo_description", "value": "New repository created from existing repository.", "CIvars": []}, {"type": "arg", "name": "new_repo_visibility", "value": "${{ github.event.inputs.new_repo_visibility }}", "CIvars": [{"name": "event.inputs.new_repo_visibility", "expression": "github.event.inputs.new_repo_visibility", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "git clone https://github.com/${{ github.actor }}/${{ github.event.inputs.new_repo_name }}.git new-repo\ncd new-repo\n# Optional: Copy files or make changes\ncp -r ../* ./ # Replace with your needs\ngit add .\ngit commit -m \"Initial commit from existing repository\"\ngit push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23651925_0", "jobs": [{"name": "build-windows", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy-to-windows-server", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.WINDOWS_SERVER_IP }}", "CIvars": [{"name": "WINDOWS_SERVER_IP", "expression": "secrets.WINDOWS_SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.WINDOWS_SERVER_USERNAME }}", "CIvars": [{"name": "WINDOWS_SERVER_USERNAME", "expression": "secrets.WINDOWS_SERVER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.WINDOWS_SERVER_PASSWORD }}", "CIvars": [{"name": "WINDOWS_SERVER_PASSWORD", "expression": "secrets.WINDOWS_SERVER_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "/Path/On/Windows/Server", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.WINDOWS_SERVER_IP }}", "CIvars": [{"name": "WINDOWS_SERVER_IP", "expression": "secrets.WINDOWS_SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.WINDOWS_SERVER_USERNAME }}", "CIvars": [{"name": "WINDOWS_SERVER_USERNAME", "expression": "secrets.WINDOWS_SERVER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.WINDOWS_SERVER_PASSWORD }}", "CIvars": [{"name": "WINDOWS_SERVER_PASSWORD", "expression": "secrets.WINDOWS_SERVER_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "cd \"/Path/On/Windows/Server\" # Navigate to the deployed path\n./run-your-script.bat # Replace with the script you want to run on the server\n", "CIvars": []}]}]}, {"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "echo \"Deployment to Windows Server was successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23670711_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, openssl, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have PHPUnit configured, you can run your tests\n./vendor/bin/phpunit --testsuite EncryptionTestSuite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start your application or run necessary commands here if needed\nphp index.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"require 'system/core/CodeIgniter.php'; \n// testing encryption\n$encryptor = new \\CI_Encryption();\n// Your encryption and decryption test logic goes here.\nvar_dump($encryptor->encrypt('test_string')); \nvar_dump($encryptor->decrypt($encryptor->encrypt('test_string')));\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23699787_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit  # Assuming you have PHPUnit for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Using lftp for deployment\nsudo apt-get install lftp -y  # Install lftp\nlftp -u \"$USER\",\"$PASSWORD\" \"$HOST\" -e \"mirror -R ./path_to_your_codeigniter_app/ $REMOTE_DIR; quit\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23704348_0", "jobs": [{"name": "open-app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Change to your script path\n./path/to/your/script.sh\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2381910_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.12.10", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}, {"name": "database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Waiting for the MongoDB database to be ready...\"\nsleep 30 # Wait for 30 seconds to allow the database time to initialize\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run migrate # Add your migration command here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23853024_0", "jobs": [{"name": "php-lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"\n~/.composer/vendor/bin/phpcs --standard=PSR12 --ignore=vendor/* app/ # Adjust the path according to your structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpstan/phpstan\nvendor/bin/phpstan analyse app/ --level=max\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2388692_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "mohitchechi/sendmail", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "CI Build Status - ${{ github.event_name }}", "CIvars": [{"name": "event_name", "expression": "github.event_name", "type": "context"}]}, {"type": "arg", "name": "body", "value": "The CI build for commit `${{ github.sha }}` on branch `${{ github.ref }}` has completed.\nStatus: ${{ job.status }}\nCheck the details here: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "status", "expression": "job.status", "type": "job"}, {"name": "server_url", "expression": "github.server_url", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "23904260_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=14.0' build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=14.0' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "DerivedData/YourApp/Logs/Test/*.log", "CIvars": []}]}]}]}
{"id": "23907953_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:DeployOnBuild=true /p:DeleteExistingFiles=true /p:OutputDir=TestResults /p:Platform=\"Any CPU\" /t:Test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23990264_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\nssh -o StrictHostKeyChecking=no $USERNAME@$SERVER \"cd $REMOTE_PATH && git pull && composer install --no-dev\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23992656_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vsVersion", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild \"YourSSISProjectFile.dtproj\" /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S your_server_name -U your_username -P your_password -d your_database -i your_script.sql\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24000413_0", "jobs": [{"name": "install-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring,intl,xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g grunt-cli", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install --save-dev phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24031440_0", "jobs": [{"name": "dart", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/dart-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart compile exe bin/my_app.dart -o bin/my_app", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "dart-executable", "CIvars": []}, {"type": "arg", "name": "path", "value": "bin/my_app", "CIvars": []}]}]}]}
{"id": "24089355_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" | ssh-add -\nssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'\n  cd /path/to/your/app # Change to your application directory\n  git pull origin main\n  composer install --no-dev --optimize-autoloader\n  # Additional commands to clear cache, migrate DB etc.\n  # php artisan migrate --force # Uncomment if using Laravel\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "241007_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # Change this if you're using a different testing framework\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet --project=$GCP_PROJECT_ID\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24132317_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory \npod install # Assuming you use CocoaPods, or use another package manager if applicable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Debug -sdk iphonesimulator CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nxcodebuild test -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' -enableCodeCoverage YES | tee xcodebuild.log | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nmkdir -p coverage\nxcrun xctrace list devices | grep -A 1 -E \"iPhone.*simulator\" | head -n 1 | awk '{print $1}' > device_id.txt\nDEVICE_ID=$(cat device_id.txt)\nxcrun xccov report -json \"${{ github.workspace }}/your-ios-app-directory/build/Logs/Test/Test-*.xcresult\" > coverage/coverage.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nxcrun xccov view --report coverage/coverage.json > coverage/coverage.txt\nxcrun xccov view --archive coverage/coverage.json > coverage/coverage.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}]}]}
{"id": "24168417_0", "jobs": [{"name": "calabash-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.6, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install calabash-cucumber\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cucumber -c --tags ~@wip\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p reports\nmv calabash.log reports/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "calabash-test-reports", "CIvars": []}, {"type": "arg", "name": "path", "value": "reports/calabash.log", "CIvars": []}]}]}]}
{"id": "24177638_0", "jobs": [{"name": "tfs-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "adopat/pyenv-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# This assumes a TFS CLI or script is available for triggering builds.\n# Adjust with the proper installation steps for your scenario.\nsudo apt-get install -y some-tfs-cli # Example placeholder.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the actual command to trigger the build.\n# Using curl or a CLI tool to access TFS API\ncurl -X POST \"$TFS_URL/%5BYour_TFS_Build_Definition%5D/_apis/build/builds?api-version=2.0\" \\\n  -H 'Content-Type: application/json' \\\n  -u \":$TFS_PAT\" \\\n  -d '{\n    \"definition\": {\n      \"id\": \"<YOUR_BUILD_DEFINITION_ID>\"\n    },\n    \"reason\": \"Automated build triggered by GitHub Actions\"\n  }'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Implement logic to check build status and output logs if necessary.\n# You can use the TFS API to check the status.\nBUILD_ID=<YOUR_BUILD_ID> # This would typically be retrieved after triggering the build\nsleep 30 # Wait for a short time (or implement a polling mechanism)\ncurl -X GET \"$TFS_URL/_apis/build/builds/$BUILD_ID?api-version=2.0\" \\\n  -u \":$TFS_PAT\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24332209_0", "jobs": [{"name": "composer-update", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer update --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"you@example.com\"\ngit config --local user.name \"Your Name\"\ngit add composer.lock\ngit commit -m \"Update composer.lock\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24335970_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}", "CIvars": [{"name": "GOOGLE_APPLICATION_CREDENTIALS", "expression": "secrets.GOOGLE_APPLICATION_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24336309_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CI_ENVIRONMENT=testing\" >> .env\necho \"database.default.hostname=127.0.0.1\" >> .env\necho \"database.default.database=test_db\" >> .env\necho \"database.default.username=root\" >> .env\necho \"database.default.password=password\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24396606_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm test  # Change this to your actual build/test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "stefan-gerschefski/send-mail", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "you@example.com", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Build Successful!", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build has been successful!\nYou can view the details at: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}\n", "CIvars": [{"name": "event.repository.html_url", "expression": "github.event.repository.html_url", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "2446807_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H 'Content-type: application/json' \\\n--data '{\"text\":\"Build Successful! \u2728\",\"attachments\":[{\"text\":\"Job: ${{ github.job }}\\nCommit: ${GITHUB_SHA}\\nView the build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}]}' \\\n${{ secrets.SLACK_WEBHOOK_URL }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H 'Content-type: application/json' \\\n--data '{\"text\":\"Build Failed! \u274c\",\"attachments\":[{\"text\":\"Job: ${{ github.job }}\\nCommit: ${GITHUB_SHA}\\nView the build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}]}' \\\n${{ secrets.SLACK_WEBHOOK_URL }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24480996_0", "jobs": [{"name": "integration-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "DeLaGuardo/setup-clojure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "clojure-version", "value": "1.10.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein\nchmod +x lein\nsudo mv lein /usr/local/bin/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein deps", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein test :integration", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24505997_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production environment...\"\n# Add your deployment script or command here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}]}]}]}
{"id": "24528469_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento setup:upgrade\nphp bin/magento setup:di:compile\nphp bin/magento setup:static-content:deploy -f\nvendor/bin/phpunit --configuration phpunit.xml.dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "magento-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "var/\npub/media/\npub/static/\n", "CIvars": []}]}]}]}
{"id": "2454661_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install dependencies (customize according to your language)\nif [ -f requirements.txt ]; then\n  pip install -r requirements.txt\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Heroku...\"\ngit remote add heroku https://git.heroku.com/${HEROKU_APP_NAME}.git\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24564888_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"<h1>We are currently updating our application. Please check back later.</h1>\" > app_offline.htm", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Removing app_offline.htm\"\n# Use the Azure CLI or Kudu API to remove the app_offline.htm file after deployment\naz webapp delete-file --name <YOUR_APP_NAME> --resource-group <YOUR_RESOURCE_GROUP> --path app_offline.htm\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24581412_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your build output is in the 'dist' folder\nmkdir output\ncp -r dist/* output/   # Copy build files to 'output' folder\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "directory", "value": "output", "CIvars": []}]}]}]}
{"id": "24585940_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\nyarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create RAILS_ENV=test\nbin/rails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install\nnpm test # replace with your test command (e.g., jest, mocha)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails test # optional step to run Rails tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24688055_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "JEKYLL_ENV=production bundle exec jekyll build --destination ./_site\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "cname", "value": "your-custom-domain.com", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Preview link: https://<your-github-username>.github.io/<your-repo-name>/\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n-d \"{\\\"body\\\": \\\"Preview your changes here: ${PREVIEW_LINK}\\\"}\" \\\n\"${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24709128_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y mercurial\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unityci/setup-android", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.0f1", "CIvars": []}, {"type": "arg", "name": "githubToken", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Library/PackageCache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-unity-${{ hashFiles('**/*.csproj', '**/packages-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "# If you want to build for a specific platform, you can uncomment below\n# - ./gradlew build\n# Or Use Unity CLI here\n/opt/unity/Editor/Unity -batchmode \\\n  -nographics \\\n  -quit \\\n  -projectPath . \\\n  -buildTarget StandaloneWindows \\\n  -executeMethod YourBuildMethod \\\n  -logFile\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-files", "CIvars": []}, {"type": "arg", "name": "path", "value": "Build/", "CIvars": []}]}]}]}
{"id": "24737621_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test | xcpretty -s\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test_logs\nxcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test | tee test_logs/test_output.log | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "test_logs/test_output.log", "CIvars": []}]}]}]}
{"id": "247607_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you are using CocoaPods, if needed\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' | tee result.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"Test Suite\" result.log; then\n  echo \"Tests passed.\"\nelse\n  echo \"Tests failed. Check the results above.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24776825_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Adjust this command based on your project's dependency manager.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Adjust this command based on your build process.\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "applesander/ftp-deploy", "version": "v2.0.4", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.TFS_SERVER }}", "CIvars": [{"name": "TFS_SERVER", "expression": "secrets.TFS_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.TFS_USERNAME }}", "CIvars": [{"name": "TFS_USERNAME", "expression": "secrets.TFS_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.TFS_PASSWORD }}", "CIvars": [{"name": "TFS_PASSWORD", "expression": "secrets.TFS_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./path-to-your-built-directory", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/drop-folder/path/on/tfs", "CIvars": []}]}]}]}
{"id": "24788311_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "malahayati/setup-android", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": "30", "CIvars": []}, {"type": "arg", "name": "build-tools", "value": "30.0.3", "CIvars": []}, {"type": "arg", "name": "licenses", "value": "android-sdk-license-.+\nandroid-sdk-preview-license-.+\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y qemu-kvm\nsudo apt-get install -y libvirt-bin ubuntu-vm-builder bridged\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"no\" | ~/android-sdk/emulator/emulator -avd test -no-snapshot-load -no-audio -no-window &\nadb wait-for-device\nadb shell input keyevent 82 &\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=your.package.name.YourTestClass", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24792833_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-lobanov/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourXcodeProject\nxcodebuild -resolvePackageDependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourXcodeProject\nxcodebuild -scheme \"YourScheme\" -sdk macosx -configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourXcodeProject\nxcodebuild test -scheme \"YourScheme\" -sdk macosx -configuration Debug\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24857137_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vsVersion", "value": "2013", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=${{ matrix.config }} /p:OutputPath=bin/${{ matrix.config }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your test project details\ndotnet test YourTestProject.csproj --configuration ${{ matrix.config }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production environment...\"\n# Add your deployment script here, e.g., copying files to a server\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24883921_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rails -v 'your_rails_version' # Replace with your desired Rails version, if necessary\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y postgresql-client  # Install Postgres client for database setup\ncp config/database.yml.example config/database.yml  # Copy database configuration if needed\nbundle exec rails db:create  # Create the database\nbundle exec rails db:migrate  # Run migrations\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust this command according to your testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop  # Adjust according to your linter settings\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build completed successfully!\"  # This can be replaced with any notification command as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24924815_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nRAILS_ENV=test bin/rails db:create\nRAILS_ENV=test bin/rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec --format documentation\nRAILS_ENV=test bundle exec rspec\nRAILS_ENV=test bundle exec simplecov\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f coverage/index.html ]; then\n  echo \"Code coverage report:\"\n  cat coverage/index.html\nelse\n  echo \"No coverage report found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24930314_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "New Commit Pushed to Main", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new commit has been pushed to the main branch.\nCommit details:\n- Commit message: ${{ github.event.head_commit.message }}\n- Commit author: ${{ github.event.head_commit.author.name }}\n- Commit URL: ${{ github.event.head_commit.url }}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.head_commit.author.name", "expression": "github.event.head_commit.author.name", "type": "context"}, {"name": "event.head_commit.url", "expression": "github.event.head_commit.url", "type": "context"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "2493145_0", "jobs": [{"name": "check-interface", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./Project1/Project1.csproj --no-incremental", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./Project2/Project2.csproj --no-incremental", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./Project1/Project1.csproj --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./Project2/Project2.csproj --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": []}]}, {"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install eslint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx eslint .", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": []}]}]}
{"id": "24969225_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, mysqli, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {30..0}; do\n  if mysqladmin ping -h \"127.0.0.1\" --silent; then\n    break\n  fi\n  echo 'Waiting for database connection...'\n  sleep 1\ndone\nif [ \"$i\" == 0 ]; then\n  echo 'MySQL did not start in time!'\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php yii migrate --interactive=0\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25011644_1", "jobs": [{"name": "enable-icloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "xu-cheng/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x ./enable_icloud.sh\n./enable_icloud.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add YourProject.xcodeproj/project.pbxproj\ngit commit -m \"Enable iCloud capabilities\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25089325_0", "jobs": [{"name": "replicate-db", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker://postgres:latest", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-c 'POSTGRES_USER=admin'\n-c 'POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}'\n-c 'POSTGRES_DB=prod_db'\n", "CIvars": [{"name": "DB_PASSWORD", "expression": "secrets.DB_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "pg_dump -h ${{ secrets.PROD_DB_HOST }} -U ${{ secrets.DB_USERNAME }} -d prod_db -f backup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.STAGING_SERVER }}", "CIvars": [{"name": "STAGING_SERVER", "expression": "secrets.STAGING_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.STAGING_USER }}", "CIvars": [{"name": "STAGING_USER", "expression": "secrets.STAGING_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.STAGING_SSH_KEY }}", "CIvars": [{"name": "STAGING_SSH_KEY", "expression": "secrets.STAGING_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "backup.sql", "CIvars": []}, {"type": "arg", "name": "target", "value": "/tmp/backup.sql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "ssh -i ${{ secrets.STAGING_SSH_KEY }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_SERVER }} \"psql -h ${{ secrets.STAGING_DB_HOST }} -U ${{ secrets.DB_USERNAME }} -d staging_db -f /tmp/backup.sql\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -i ${{ secrets.STAGING_SSH_KEY }} ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_SERVER }} \"rm /tmp/backup.sql\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25247632_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-len/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25387579_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.USER }}", "CIvars": [{"name": "USER", "expression": "secrets.USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.TARGET_DIR }}", "CIvars": [{"name": "TARGET_DIR", "expression": "secrets.TARGET_DIR", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.USER }}", "CIvars": [{"name": "USER", "expression": "secrets.USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "cd ${{ secrets.TARGET_DIR }}\nnpm install --production  # Optional: To install production dependencies\npm2 restart all  # Use PM2 or another process manager to restart your Node.js app\n", "CIvars": [{"name": "TARGET_DIR", "expression": "secrets.TARGET_DIR", "type": "secret"}]}]}]}]}
{"id": "25501977_0", "jobs": [{"name": "check-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [[ ${{ github.event.pull_request.merged }} == 'true' ]]; then\n  echo \"The pull request #${{ github.event.pull_request.number }} has been merged.\"\n  echo \"::set-output name=merged::true\"\nelse\n  echo \"The pull request #${{ github.event.pull_request.number }} has not been merged.\"\n  echo \"::set-output name=merged::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "TARGET_BRANCH=\"main\" # change this to your target branch\ngit fetch origin $TARGET_BRANCH\ngit checkout $TARGET_BRANCH\ngit branch --contains ${{ github.event.pull_request.merge_commit_sha }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25527245_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "25567757_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.1, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build --trace\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Ensure the destination directory is clean\nrm -rf ./_site\n# Build Jekyll and deploy\nbundle exec jekyll build\n# Deploy using GitHub Pages (gh-pages branch)\ngit config --local user.name \"GitHub Actions\"\ngit config --local user.email \"actions@github.com\"\ngit add _site\ngit commit -m \"Deploy Jekyll site\" || echo \"No changes to commit\"\ngit push origin HEAD:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2558309_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nif [ -f Gemfile ]; then\n  cd your_rails_app_directory # Adjust this if necessary\n  bundle install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f requirements.txt ]; then\n  pip install -r requirements.txt\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_rails_app_directory # Adjust this if necessary\nbundle exec rspec # or your preferred command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_django_app_directory # Adjust this if necessary\npython manage.py test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_rails_app_directory # Adjust this if necessary\nbundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_django_app_directory # Adjust this if necessary\nflake8 .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_flex_app_directory # Adjust this if necessary\n# Add commands to build and run your Flex application\n# For example, npm install and npm test or any relevant commands\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25660340_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd, bcmath, soap, intl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a .env file with database credentials\ncp .env.example .env\nphp artisan key:generate\nphp artisan migrate --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rsync -avz --exclude 'vendor/' --delete ./ $STAGING_USER@$STAGING_SERVER:$STAGING_PATH\nssh $STAGING_USER@$STAGING_SERVER \"cd $STAGING_PATH && composer install --no-dev --optimize-autoloader && php bin/magento setup:di:compile && php bin/magento cache:clean && php bin/magento cache:flush && php bin/magento setup:static-content:deploy -f\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\"text\":\"Deployment Successful!\"}", "CIvars": []}, {"type": "arg", "name": "webhook-url", "value": "${{ secrets.SLACK_WEBHOOK }}", "CIvars": [{"name": "SLACK_WEBHOOK", "expression": "secrets.SLACK_WEBHOOK", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\"text\":\"Deployment Failed!\"}", "CIvars": []}, {"type": "arg", "name": "webhook-url", "value": "${{ secrets.SLACK_WEBHOOK }}", "CIvars": [{"name": "SLACK_WEBHOOK", "expression": "secrets.SLACK_WEBHOOK", "type": "secret"}]}]}]}]}
{"id": "25720665_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2.2.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh issue create \\\n  --title \"New issue from GitHub Actions\" \\\n  --body \"This issue was created automatically by a GitHub Actions workflow.\" \\\n  --repo \"${{ github.repository }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25738278_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\nsed -i 's/DB_DATABASE=.*/DB_DATABASE=ci_db/' .env\nsed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env\nsed -i 's/DB_PASSWORD=.*/DB_PASSWORD=root/' .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --seed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25802882_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, mysqli, pdo, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh user@yourserver.com \"cd /path/to/your/symfony/project && git pull origin main && composer install --no-dev --optimize-autoloader && php bin/console doctrine:migrations:migrate --no-interaction && php bin/console cache:clear --env=prod\"\n\n# Replace user@yourserver.com and /path/to/your/symfony/project accordingly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25880943_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\necho \"::add-path::$(pwd)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vcpkg install fmt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake .. -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ..\nrm -rf build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25894408_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "choco/install", "version": "v1.0.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "choco install visualstudio2013community --yes || choco install visualstudio2013professional --yes\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Change the path and solution name as per your project structure\n\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\devenv.exe\" YourSolution.sln /Build Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here. Example:\n\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\devenv.exe\" YourTests.vsmdi /RunAllTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25902_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y g++", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "brew install cmake", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "choco install cmake --installargs '\"--install-dir=C:\\Program Files\\CMake\"'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build && cd build && cmake ..", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build && cmake --build .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build && ctest", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25928636_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, sqlite3, mysqlnd, pdo_mysql, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$KEY\" > private_key.pem\nchmod 600 private_key.pem\nrsync -avz --delete -e \"ssh -i private_key.pem -o StrictHostKeyChecking=no\" ./ $USER@$HOST:$DEPLOY_PATH\nrm private_key.pem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25942752_0", "jobs": [{"name": "push-to-fork", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"<your-email@example.com>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place any command here to modify your repository\n# For example, create or modify a file\necho \"Adding a new line to the file\" >> myfile.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git add myfile.txt  # Ensure you specify any modified/added files\ngit commit -m \"Update myfile.txt from GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "repository", "value": "<YOUR_FORK_OR_ORIGINAL_REPO_URL>", "CIvars": []}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "26086451_0", "jobs": [{"name": "analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dart-lang/setup-dart", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Example: run `dart analyze` while excluding certain directories\ndartanalyzer --exclude <exclusion_pattern> .\n# For example, to exclude all contents under a 'lib/excluded' directory:\n# dartanalyzer --exclude lib/excluded/ . \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26101127_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer test  # Replace with your test command if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Preparing to deploy...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"${{ secrets.JENKINS_URL }}/job/your-job-name/build?token=your-job-token\" \\\n--user \"${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}\" \\\n--data-urlencode \"json={'parameter': [{'name':'param1', 'value':'value1'}, {'name':'param2', 'value':'value2'}]}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26207773_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Triggering Chef Deployment...\"\nchef-client -z -o 'recipe[my_cookbook::deploy]'  # Replace with your cookbook and recipe\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment was successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26218346_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install postgresql-client\ncp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate\nbundle exec rails db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # You can change this to your testing framework\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.12.10", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "your-heroku-app-name", "CIvars": []}, {"type": "arg", "name": "heroku_email", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}]}]}
{"id": "26220054_0", "jobs": [{"name": "check-branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"PR_NUMBER=${{ github.event.number }}\" >> $GITHUB_ENV\necho \"BRANCH_NAME=${{ github.head_ref }}\" >> $GITHUB_ENV\necho \"BASE_BRANCH=${{ github.base.ref }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking if branch '${{ env.BRANCH_NAME }}' can be properly branched...\"\n# You can add your custom branching logic here.\n\n# Example: Check if branch is branched off 'main'\ngit fetch origin ${{ env.BASE_BRANCH }}\nif git merge-base --is-ancestor origin/${{ env.BASE_BRANCH }} origin/${{ env.BRANCH_NAME }}; then\n  echo \"\u2705 Branch '${{ env.BRANCH_NAME }}' is correctly branched off '${{ env.BASE_BRANCH }}'.\"\nelse\n  echo \"\u274c Branch '${{ env.BRANCH_NAME }}' should be branched off '${{ env.BASE_BRANCH }}'.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Branch validation successful. Proceed with the PR!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26232669_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/solution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build path/to/your/solution.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test path/to/your/test/project.csproj --configuration Release --collect:\"XPlat Code Coverage\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/test-result", "version": "v0.1.0", "shell": "bash", "with": [{"type": "arg", "name": "test-results", "value": "path/to/your/test/results.xml", "CIvars": []}]}]}]}
{"id": "26252785_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Debug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the command to run your tests\n# Example for MSTest\n& \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\mstest.exe\" /testcontainer:Path\\To\\YourTestProject.dll\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes your test results are in a specific format\nPublish-TestResults -Path 'Path/To/Results/*.trx'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26311117_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install libpq-dev\ncp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26323524_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26334222_0", "jobs": [{"name": "sonar", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn sonar:sonar \\ -Dsonar.projectKey=<your-project-key> \\ -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \\ -Dsonar.login=${{ secrets.SONAR_TOKEN }} \\ -Dsonar.java.binaries=target/classes", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-token", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}]}]}
{"id": "26383164_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload --ipa \"path/to/your/app.ipa\" \\\n                       --username \"$APPLE_ID\" \\\n                       --app_identifier \"$APP_IDENTIFIER\" \\\n                       --skip_waiting_for_build_processing true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26383663_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26393448_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2650187_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar global require phing/phing\necho \"$HOME/.composer/vendor/bin\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y subversion", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "svn checkout https://your-svn-repo-url/trunk /path/to/svn/checkout\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing -f /path/to/your/build.xml # Change to your Phing build file path\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd /path/to/svn/checkout\nsvn add --force * # Add new files\nsvn commit -m \"Automated CI Sync from GitHub Action\" # Commit changes\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Use curl to notify your Hudson CI server, adjust the URL and payload accordingly\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"status\": \"success\"}' http://your-hudson-url/notify\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26536694_0", "jobs": [{"name": "check_rspec", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --dry-run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26563123_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "powershell -ExecutionPolicy ByPass -File './script.ps1'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment step goes here\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26586006_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "theqtcompany/setup-qt", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "qt-components", "value": "qtbase, qtdeclarative, qtmultimedia", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "choco install cmake", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake -G \"Visual Studio 16 2019\" -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --config Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2659433_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n# Run Rails tests (use your specific test command)\nbundle exec rake db:create db:schema:load RAILS_ENV=test\nbundle exec rspec # or your specific test task\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26616865_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, gd, curl, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "error_reporting=E_ALL", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26670248_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-deploy-action", "version": null, "shell": "bash", "with": []}]}]}
{"id": "26691606_0", "jobs": [{"name": "tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, gd, mysqlnd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26729124_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "keep_files", "value": false, "CIvars": []}]}]}]}
{"id": "26767466_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.6, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release archive -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $GITHUB_WORKSPACE/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\nbundle exec fastlane pilot upload --ipa build/YourProject.ipa --username YOUR_APPLE_ID\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26783622_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "start_time=$(date +%s)\nbundle exec rspec\nend_time=$(date +%s)\nruntime=$((end_time - start_time))\necho \"RSpec runtime: $runtime seconds\" >> runtime.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "rspec-runtime-log", "CIvars": []}, {"type": "arg", "name": "path", "value": "runtime.log", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cat runtime.log\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26792493_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane # Install Fastlane\nbundle install # Install other project dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourAppScheme -workspace YourApp.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta # Assuming you have a lane set up in Fastlane called 'beta'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26846904_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php }}", "CIvars": [{"name": "php", "expression": "matrix.php", "type": "matrix"}]}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "${{ matrix.node }}", "CIvars": [{"name": "node", "expression": "matrix.node", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26847454_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mathworks/matlab-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "matlab_version", "value": "R2021b", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "matlab -batch \"run(my_script);\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "matlab -batch \"build_my_project;\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Make a request to Drone API to report the build status\nBUILD_STATUS=\"success\"  # or \"failure\" based on the results of the previous steps\ncurl -X POST \"$DRONE_SERVER/api/repos/${{ github.repository }}/statuses/${{ github.sha }}\" \\\n  -H \"Authorization: Bearer $DRONE_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"state\\\": \\\"$BUILD_STATUS\\\", \\\"description\\\": \\\"GitHub Actions build status\\\", \\\"context\\\": \\\"GitHub Actions\\\"}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26878182_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec ruby -Ilib:test test/**/*_test.rb  # Adjust the path as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26894524_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Setting environment variables...\"\nexport VARIABLE_NAME_1=\"value1\"\nexport VARIABLE_NAME_2=\"value2\"\nexport VARIABLE_NAME_3=\"value3\"\n\n# You can add more environment variables as per your requirement\n\n# Optionally, save these variables to a .xcconfig file or pass them directly\necho \"VARIABLE_NAME_1 = $VARIABLE_NAME_1\" >> MyProject/MyProjectConfig.xcconfig\necho \"VARIABLE_NAME_2 = $VARIABLE_NAME_2\" >> MyProject/MyProjectConfig.xcconfig\necho \"VARIABLE_NAME_3 = $VARIABLE_NAME_3\" >> MyProject/MyProjectConfig.xcconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace MyProject.xcworkspace -scheme MyScheme -configuration Debug build -derivedDataPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace MyProject.xcworkspace -scheme MyScheme -configuration Debug test -derivedDataPath ./build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26948582_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlang/setup-erlang", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "otp-version", "value": "24.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "make get-deps", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlang/setup-erlang", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "otp-version", "value": "24.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Here you can add your deployment commands\n# For example: SSH into your server and run deployment scripts\necho \"Deploying to the production server\"\nssh user@yourserver \"cd /path/to/app && git pull && make && ./start_script.sh\"\n# Add your deployment logic (could be FTP, SCP, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27039682_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27076154_0", "jobs": [{"name": "install-ppw", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pear upgrade PEAR\npear channel-update pear.php.net\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pear install pear.php.net/ppw\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ppw --version\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27103051_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, curl, xml, dom", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phpstan/phpstan\nphpstan analyse\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, curl, xml, dom", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27131725_0", "jobs": [{"name": "resign", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/checkout-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p \"$HOME/Workspace\"\nmv *.ipa \"$HOME/Workspace\"/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Certificates\necho \"${{ secrets.P12 }}\" | base64 --decode > ~/Certificates/certificate.p12\necho \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ~/Certificates/profile.mobileprovision\necho \"${{ secrets.PASSWORD }}\" > ~/Certificates/password.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security import ~/Certificates/certificate.p12 -k ~/Library/Keychains/login.keychain -P $(< ~/Certificates/password.txt) -T /usr/bin/codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p \"$HOME/Resigned\"\n# Replace PATH_TO_YOUR_APP.ipa with the actual path of your IPA\ncodesign -f -s \"iPhone Distribution: Your Developer Name\" --preserve-metadata=identifier,entitlements --deep \"$HOME/Workspace/YOUR_APP.ipa\" --entitlements=entitlements.plist\ncp \"$HOME/Workspace/YOUR_APP.ipa\" \"$HOME/Resigned/ResignedApp.ipa\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Modify entitlements.plist to include beta-reports-active\nplutil -insert beta-reports-active -bool true entitlements.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun -sdk iphoneos PackageApplication -v \"$HOME/Resigned/ResignedApp.ipa\" -o \"${GITHUB_WORKSPACE}/ResignedApp.ipa\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ResignedApp", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/ResignedApp.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "2730765_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2019", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have tests, you can run them here\n# Example for running tests using NUnit console runner\ncd YourTestProject\nnuget install NUnit.ConsoleRunner -OutputDirectory ./packages\n.\\packages\\NUnit.ConsoleRunner.<version>\\tools\\nunit3-console.exe YourTestProject.dll\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.csproj /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=<YourPublishProfile>", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "your-artifact-name", "CIvars": []}, {"type": "arg", "name": "path", "value": "./YourPublishFolder", "CIvars": []}]}]}]}
{"id": "27355333_0", "jobs": [{"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-pr", "version": "v0.1.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "27360190_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, pdo", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you are using PHPUnit\nvendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Any build commands you may need, e.g., optimization\nphp spark optimize\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you'd define your deployment steps, e.g., rsync to server, etc.\necho \"Deployment steps would go here.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27440564_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cmake  # If you need CMake or any other dependencies\ngem install cocoapods\npod install # Run pod install if using CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27517657_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Unit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint  # Assuming you have a linting script defined in composer.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Adjust the parameters as necessary\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -d '{\n    \"commit\": \"${{ github.sha }}\",\n    \"status\": \"passed\",  # or \"failed\"\n    \"buildTarget\": \"${{ github.workflow }}\",\n    \"project\": \"your_project\",\n    \"phid\": \"PHID-PROJ-xxxxxx\"\n  }' \\\n  https://phabricator.example.com/api/differential.publishcomment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2763289_0", "jobs": [{"name": "backup-restore-sqlserver", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ymlion/sql-server-docker", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sa_password", "value": "YourStrong@Passw0rd", "CIvars": []}, {"type": "arg", "name": "image", "value": "mcr.microsoft.com/mssql/server", "CIvars": []}, {"type": "arg", "name": "port", "value": 1433, "CIvars": []}, {"type": "arg", "name": "sql_server_version", "value": "2019-latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q 'SELECT 1;' &> /dev/null; then\n    echo \"SQL Server is up!\"\n    break\n  fi\n  echo \"Waiting for SQL Server to start...\"\n  sleep 10\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q \"BACKUP DATABASE [YourDatabase] TO DISK = '/var/opt/mssql/backup/YourDatabase.bak' WITH FORMAT, MEDIANAME = 'SQLServerBackups', NAME = 'Full Backup of YourDatabase';\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q \"RESTORE DATABASE [YourDatabase] FROM DISK = '/var/opt/mssql/backup/YourDatabase.bak' WITH REPLACE;\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your test commands here, such as running your application tests that depend on the database\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27680342_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec middleman build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "27693881_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change this command as per your project's dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Change as necessary\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "v0.1.4", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SSH_HOST }}", "CIvars": [{"name": "SSH_HOST", "expression": "secrets.SSH_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SSH_USERNAME }}", "CIvars": [{"name": "SSH_USERNAME", "expression": "secrets.SSH_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/on/your/server", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "v0.1.4", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SSH_HOST }}", "CIvars": [{"name": "SSH_HOST", "expression": "secrets.SSH_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SSH_USERNAME }}", "CIvars": [{"name": "SSH_USERNAME", "expression": "secrets.SSH_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "script", "value": "cd /path/on/your/server  # Change to your target directory on the server\nnpm install  # Change this if different\npm2 restart all  # Or your specific command to restart services.\n", "CIvars": []}]}]}]}
{"id": "27782986_0", "jobs": [{"name": "trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"##vso[task.setvariable variable=AZURE_DEVOPS_PAT]${{ secrets.AZURE_DEVOPS_PAT }}\"\naz devops configure --defaults organization=https://dev.azure.com/<Your_ORG_NAME> project=<Your_PROJECT_NAME>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "build_id=$(az pipelines run --name <Your_Pipeline_Name> --branch main --query id -o tsv)\necho \"Triggered build with ID: $build_id\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "status=\"running\"\nwhile [[ \"$status\" == \"running\" ]]\ndo\n  sleep 30\n  status=$(az pipelines show --id $build_id --query status -o tsv)\n  echo \"Current Build Status: $status\"\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "build_result=$(az pipelines show --id $build_id --query result -o tsv)\necho \"Build completed with result: $build_result\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27837455_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.APP_DIR }}", "CIvars": [{"name": "APP_DIR", "expression": "secrets.APP_DIR", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "script", "value": "cd ${{ secrets.APP_DIR }}\nnpm install --production # Install production dependencies\npm2 reload all --update-env # Reload all PM2 apps\n", "CIvars": [{"name": "APP_DIR", "expression": "secrets.APP_DIR", "type": "secret"}]}]}]}]}
{"id": "28006003_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/actions-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mysql-actions/setup-mysql", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "database", "value": "test_db", "CIvars": []}, {"type": "arg", "name": "username", "value": "root", "CIvars": []}, {"type": "arg", "name": "password", "value": "", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./vendor/bin/propel migration:up\n./vendor/bin/propel sql:insert --data-file=tests/data/seeds.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/propel migration:down\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2801224_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/project.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build path/to/your/project.csproj --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test path/to/your/project.Tests.csproj --configuration Release --logger trx", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Generating test report...\"\n# Assuming you have a way to convert trx to a readable format\ndotnet test path/to/your/project.Tests.csproj --configuration Release --logger \"trx;LogFileName=testResults.trx\"\n\n# Example of using an external tool to convert trx to HTML\n# This requires you to have a tool installed that can process trx files\n# For instance, ReportUnit or any other reporting tool\n# reportunit path/to/testResults.trx path/to/output/report.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/output/report.html", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST -H 'Content-type: application/json' --data '{\n  \"text\": \"Build failed for commit <'$GITHUB_SHA'>: <'$GITHUB_RUN_URL'>\\nCheck the reports in artifacts.\"\n}' $SLACK_WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28025367_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Coverage ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ngcov -o . *.gcda *.gcno\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir coverage\ncd coverage\n# Reshape gcov output to reduce header file noise\nfor f in ../*.gcno; do\n  gcov -o ../ \"$f\" | grep -v \".h\" > \"$(basename \"$f\" .gcno).cov\"\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/*.cov", "CIvars": []}]}]}]}
{"id": "28039777_0", "jobs": [{"name": "test-multiple-repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Running tests for Repository 1\"\ngit clone https://github.com/user/repo1.git\ncd repo1\n# Here you would run your tests, for example using a specific command\n# Replace with the test command according to your repo structure\nnpm install\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests for Repository 2\"\ngit clone https://github.com/user/repo2.git\ncd repo2\nnpm install\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests for Repository 3\"\ngit clone https://github.com/user/repo3.git\ncd repo3\nnpm install\nnpm test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28079358_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/mango run tests", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28158135_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # for React Native\n# If using yarn:\n# yarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "flutter-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}]}, {"name": "android-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sdkmanager --update", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28160402_0", "jobs": [{"name": "html_proofer", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec htmlproofer ./_site --ignore-unknown --check-html --empty-alt-ignore --ignore \"img,script,link\" --disable-external\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28217556_0", "jobs": [{"name": "tag-release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"github-actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git fetch --tags", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "current_version=$(git tag --sort=v:refname | tail -n 1)\nif [ -z \"$current_version\" ]; then\n  new_version=\"v1.0.0\" # default version if no tags exist\nelse\n  new_version=$(echo $current_version | awk -F. -v OFS=. '{$NF+=1; print}')\nfi\necho \"Next version: $new_version\"\necho \"tag=$new_version\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git tag ${{ env.tag }}\ngit push origin ${{ env.tag }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github-release/github-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ env.tag }}", "CIvars": [{"name": "tag", "expression": "env.tag", "type": "env"}]}, {"type": "arg", "name": "name", "value": "Release ${{ env.tag }}", "CIvars": [{"name": "tag", "expression": "env.tag", "type": "env"}]}, {"type": "arg", "name": "body", "value": "This is an automatic release for version ${{ env.tag }}.\n", "CIvars": [{"name": "tag", "expression": "env.tag", "type": "env"}]}]}]}]}
{"id": "28221579_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p Pods # Ensure the Pods directory is created\nchmod -R 777 Pods # Set permissions to allow write\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28240738_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.3", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2013", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:Platform=\"Any CPU\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optionally, if you have tests to run, do it here\ndotnet test Path/To/YourTestProject/YourTestProject.csproj --configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "msbuild-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "Path/To/Build/Output/\n", "CIvars": []}]}]}]}
{"id": "28348883_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cocoapods\npod install --project-directory=YourProjectDirectory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourSchemeName \\\n           -configuration Release \\\n           -derivedDataPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -archiveYourProject.xcarchive \\\n           -scheme YourSchemeName \\\n           -configuration Release \\\n           -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n           -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive \\\n           -exportPath $GITHUB_WORKSPACE/build \\\n           -exportOptionsPlist YourExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://upload.firebase.com/upload\" \\\n-H \"Authorization: Bearer $FIREBASE_TOKEN\" \\\n-F \"ipa=@$GITHUB_WORKSPACE/build/YourApp.ipa\" \\\n-F \"appId=YOUR_FIREBASE_APP_ID\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28351568_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer config --global github-oauth.github.com $GITHUB_TOKEN\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Modify to your testing framework/commands\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28427857_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.19.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y gcov\npip install gcovr\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable # Replace with your test executable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ngcov *.gcda *.gcno\ngcovr --xml --output coverage.xml --gcov-executable gcov\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n# Assuming you have a tool to convert gcovr's XML to Cobertura format\n# You might need a custom script here based on your needs\n# For example, using a tool like `gcov-cobertura`\ngcovr --xml --output cobertura.xml --gcov-executable gcov\n# Optionally, print the output\ncat cobertura.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/cobertura.xml", "CIvars": []}]}]}]}
{"id": "2845020_0", "jobs": [{"name": "test-and-notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build  # Replace with your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test  # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test-results\ncp build/test-results/test/TEST-*.xml test-results/ || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Test Results for ${{ github.event_name }} on ${{ github.ref }}", "CIvars": [{"name": "event_name", "expression": "github.event_name", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Please find the latest test results attached.\n\nYou can review the results here: ${{ github.run_id }}\n\nTest results can be found in the attachments.\n", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "attachments", "value": "test-results/TEST-*.xml", "CIvars": []}, {"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "${{ secrets.SMTP_USER }}", "CIvars": [{"name": "SMTP_USER", "expression": "secrets.SMTP_USER", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "28507673_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ./artifacts\ncp -R build/Debug-iphonesimulator/*.app ./artifacts || echo \"No build artifacts found\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts", "CIvars": []}]}]}]}
{"id": "28589653_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CODE_SIGN_IDENTITY=<your_code_sign_identity>\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -archivePath ./build/YourApp.xcarchive \\\n           -sdk iphoneos \\\n           CODE_SIGN_IDENTITY=\"${{ secrets.CODE_SIGN_IDENTITY }}\" \\\n           CODE_SIGN_STYLE=\"manual\" \\\n           archive\n\nxcodebuild -exportArchive \\\n           -archivePath ./build/YourApp.xcarchive \\\n           -exportPath ./build \\\n           -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -f ./build/YourApp.ipa ]; then\n  echo \"Error: IPA file not generated.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "28725670_0", "jobs": [{"name": "backup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "postgres-action/setup-postgres", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "postgres-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "dbname", "value": "test_db", "CIvars": []}, {"type": "arg", "name": "username", "value": "your_username", "CIvars": []}, {"type": "arg", "name": "password", "value": "your_password", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "export PGPASSWORD=$DB_PASSWORD # Your database password environment variable\npg_dump -U $DB_USERNAME -h localhost -Fc test_db > backup.dump\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "db-backup", "CIvars": []}, {"type": "arg", "name": "path", "value": "backup.dump", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "find . -name \"*.dump\" -type f -mtime +30 -delete\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28753410_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "Build failed for ${{ github.run_id }}. Check details at ${{ github.run_url }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}, {"name": "run_url", "expression": "github.run_url", "type": "context"}]}]}]}]}
{"id": "28816374_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # or yarn install, depending on your package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Customize this command based on your build tool\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Ensure you have tests in your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p build  # Create a directory for the build\ncp -R ./dist/* ./build/  # Copy built files to the build directory, change if necessary\ncd build\nzip -r chrome-extension.zip .  # Create a zip file for the Chrome Extension\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "chrome-extension", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/chrome-extension.zip", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "burnett01/action-discord", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "New version of the Chrome Extension has been built! \nDownload it [here](https://github.com/${{ github.repository }}/actions/workflows/chrome-extension.yml).\n", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "28819473_0", "jobs": [{"name": "email-response", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"An email has been received!\" > response.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_host", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USER }}", "CIvars": [{"name": "EMAIL_USER", "expression": "secrets.EMAIL_USER", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASS }}", "CIvars": [{"name": "EMAIL_PASS", "expression": "secrets.EMAIL_PASS", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Re: Your Subject Here", "CIvars": []}, {"type": "arg", "name": "to", "value": "email@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_USER }}", "CIvars": [{"name": "EMAIL_USER", "expression": "secrets.EMAIL_USER", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Thank you for your email! This is an automated response.\nYour message was received and will be reviewed shortly.\n", "CIvars": []}, {"type": "arg", "name": "attachments", "value": "response.txt", "CIvars": []}]}]}]}
{"id": "28862965_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory # Change this to your project directory\npod install # Un-comment this if you are using CocoaPods\n# For Swift Package Manager:\n# swift package resolve\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your post-action script here\n# Ensure your script can handle timeouts gracefully\necho \"Post action script running...\"\n# Example post-action command with timeout\n(your_command_here) & pid=$!\n(sleep 300 && kill -HUP $pid) 2>/dev/null & watcher=$!\nwait $pid\nkill -HUP $watcher 2>/dev/null\necho \"Post action script completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28877899_0", "jobs": [{"name": "process-comments", "steps": [{"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Comment: ${{ github.event.comment.body }}\"\n\n# Extract custom parameters from the comment\n# Here we assume that the comments will be in the form `run [param1=value] [param2=value]`\ncomment_body=\"${{ github.event.comment.body }}\"\nif [[ \"$comment_body\" =~ run\\ (.*) ]]; then\n  parameters=\"${BASH_REMATCH[1]}\"\n  echo \"Parameters extracted: $parameters\"\n  echo \"PARAMS=$parameters\" >> $GITHUB_ENV\nelse\n  echo \"No valid parameters found.\"\n  exit 0  # Exit if no valid command found\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running job with the following parameters: $PARAMS\"\n# Here you can include logic to handle the parameters as needed\n# For demonstration, we'll just output them\n# You can also include any commands or scripts you need that take these parameters\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28888159_0", "jobs": [{"name": "precompile_assets", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rails assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "compiled-assets", "CIvars": []}, {"type": "arg", "name": "path", "value": "public/assets", "CIvars": []}]}]}]}
{"id": "28922562_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Use the appropriate package manager for your project (e.g., CocoaPods, Carthage, etc.)\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppTests -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p results\ncp -R TestResults/** results/\necho \"Test results available in the results folder.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build and tests succeeded, ready to deploy!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build or tests failed, check the logs!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28935924_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cmake -S . -B build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ctest --test-dir build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29005382_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install # Use this if you're using CocoaPods.\n# For example, if using Swift Package Manager, uncomment the following line:\n# swift package resolve\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.0'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nchmod +x ./path/to/your/script.sh # Ensure your custom script is executable\n./path/to/your/script.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "output-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourProjectDirectory/Path/To/Output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build or script failed, please check the logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29029306_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler:2.2.17\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta environment:${{ matrix.environment }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29035818_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install  # Ensure to install the pods if you are using them\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProjectName.xcodeproj -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProjectName.xcodeproj -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29124190_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "public/assets", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-assets-${{ hashFiles('Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-assets-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "if [ ! -d public/assets ]; then\n  RAILS_ENV=production bundle exec rake assets:precompile\nelse\n  echo \"Assets have already been compiled.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Insert your deployment script here\necho \"Deploying to production...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29130396_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your-App-Service-Name>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "<Your-Pre-Production-Slot>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "inlineScript", "value": "az webapp deployment slot swap --resource-group '<Your-Resource-Group>' --name '<Your-App-Service-Name>' --slot '<Your-Pre-Production-Slot>' --target-slot 'production'\n", "CIvars": []}]}]}]}
{"id": "29158214_0", "jobs": [{"name": "gated-check-in", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Please select a build definition:\"\necho \"1. Build Definition A\"\necho \"2. Build Definition B\"\necho \"3. Build Definition C\"\nread build_choice\necho \"You selected option: $build_choice\"        \necho \"::set-output name=build_choice::$build_choice\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Build Definition A\"\n# Place build commands for Definition A here\n# e.g., dotnet build, npm install, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Build Definition B\"\n# Place build commands for Definition B here\n# e.g., npm run build, mvn package, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Build Definition C\"\n# Place build commands for Definition C here\n# e.g., gradle build, \u2026 etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29471614_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn install -DskipTests=true", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-test-reporter", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}, {"type": "arg", "name": "fail_on_error", "value": true, "CIvars": []}]}]}]}
{"id": "29534979_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name xWebAdministration -Force -AllowClobber -Scope CurrentUser\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Import DSC Configuration\n$configPath = './MyDscConfig.ps1'\n. $configPath\n\n# Compile Configuration and Generate MOF\nMyDscConfig\n$configName = 'MyDscConfig'\n$mofPath = \"$PSScriptRoot\\$configName.mof\"\nPublish-DscConfiguration -Path $mofPath -Wait -Force -Verbose\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Apply the DSC Configuration\nStart-DscConfiguration -Path $mofPath -Wait -Verbose -Force -Credential (New-Object PSCredential('admin_user', (ConvertTo-SecureString 'admin_password' -AsPlainText -Force)))\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29622954_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit tests  # Adjust to your test folder structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment commands here, e.g.:\nssh user@yourserver.com 'cd /path/to/your/project && git pull && composer install'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -rf vendor  # Optional: clean up vendor to save space\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29628393_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cmake -S . -B build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build build --config Release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyExecutable", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/MyExecutable.exe", "CIvars": []}]}]}]}
{"id": "29646367_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install  # Adjust this command according to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint  # Adjust this command based on your tooling\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install  # Adjust this command according to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Adjust this command based on your testing framework\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "./deploy.sh  # This is a placeholder for your deployment script\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "fields", "value": "executor, channel", "CIvars": []}, {"type": "arg", "name": "channel", "value": "#production-notifications", "CIvars": []}, {"type": "arg", "name": "custom_payload", "value": "{\"text\": \"Deployment Successful!\"}", "CIvars": []}]}]}, {"name": "approval", "steps": [{"type": "shell_cmd", "cmd": "echo \"Deployment approved. Please merge the pull request for final deployment.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29685690_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, zip, mysqli, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/typo3cms database:migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/typo3cms analyze", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Custom deployment script/commands for your server\necho \"Deploying to server...\"\nssh user@your_server_ip 'cd /path/to/your/typo3/project && git pull && composer install && php vendor/bin/typo3cms cache:flush'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29794034_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install  # if you're using CocoaPods\n# other dependency managers can be added here, like Carthage or Swift Package Manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n            -scheme YourScheme \\\n            -sdk iphoneos \\\n            -configuration Release \\\n            archive \\\n            -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n            CODE_SIGN_IDENTITY=\"\" \\\n            CODE_SIGNING_REQUIRED=NO  # adjust code signing as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n            -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n            -exportPath ${{ github.workspace }}/build/YourApp \\\n            -exportOptionsPlist ./path/to/ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29799602_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "commit-message", "value": "Automated merge of pull request #${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "29807641_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.test.outcome }}\" == \"failure\" ]]; then\n  echo \"Build failed!\"\n  echo \"status=failure\" >> $GITHUB_ENV\nelse\n  echo \"Build succeeded!\"\n  echo \"status=success\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "TAG=\"build-$(date +'%Y%m%d%H%M%S')\"\necho \"Tagging build with ${TAG}\"\ngit tag $TAG\ngit push origin $TAG\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ISSUE_TITLE=\"Build Failure: ${{ github.sha }}\"\nISSUE_BODY=\"The build failed for commit `${{ github.sha }}`.\\n\\nError Logs:\\n```\\n${{ steps.test.outputs.logs }}\\n```\"\ncurl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n  -d \"{\\\"title\\\":\\\"${ISSUE_TITLE}\\\", \\\"body\\\":\\\"${ISSUE_BODY}\\\"}\" \\\n  https://api.github.com/repos/${{ github.repository }}/issues\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29848912_0", "jobs": [{"name": "install-vendor", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -d \"vendor\" ]; then\n  echo \"Vendor folder does not exist!\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "path", "value": "vendor/", "CIvars": []}]}]}]}
{"id": "2995029_1", "jobs": [{"name": "backup-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$sourceFolder = \"C:\\Path\\To\\ExistingFolder\"\n$backupFolder = \"C:\\Path\\To\\BackupFolder\"\n.\\backup.ps1 -sourceFolder $sourceFolder -backupFolder $backupFolder\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment commands here (CruiseControl.NET command or script)\nWrite-Output \"Deploying new version...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29990318_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust this command according to your SPA build process\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=production bundle exec rails assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rails db:create db:migrate\nbundle exec rspec  # Adjust the test command as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/bundle\nnode_modules\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-build-${{ hashFiles('**/Gemfile.lock', '**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-build-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "built-app", "CIvars": []}, {"type": "arg", "name": "path", "value": "public/assets", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "built-app", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"\n# Example deployment command, customize this as needed\n# scp -r ./public/assets user@yourserver:/path/to/deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30024741_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "snyk/actions/github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "test", "CIvars": []}]}]}, {"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "echo \"Build failed! Please check the logs.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30036433_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.DEPLOY_PRIVATE_KEY }}\" > id_rsa\nchmod 600 id_rsa\nexport DEPLOY_SSH_KEY=\"$(cat id_rsa)\"\nrocketeer deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30071845_0", "jobs": [{"name": "label-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.email \"action@github.com\"\ngit config --global user.name \"GitHub Action\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "external-editor", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Thank you for your PR! \n\nIf you need to edit it using your favorite external editor, you can check it out locally with:\n\n```bash\ngit checkout ${GITHUB_HEAD_REF}\n```\n\nHappy coding!\n", "CIvars": [{"name": "GITHUB_HEAD_REF", "expression": "GITHUB_HEAD_REF", "type": "context"}]}]}]}]}
{"id": "30081597_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel_token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel_org_id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel_project_id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "fields", "value": "[\"alias\"]", "CIvars": []}]}]}]}
{"id": "30193118_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/aws-cloudformation-github-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "stack-name", "value": "your-stack-name", "CIvars": []}, {"type": "arg", "name": "template", "value": "template.yaml", "CIvars": []}, {"type": "arg", "name": "parameter-overrides", "value": "InstanceType=t2.micro\n# Additional parameters...\n", "CIvars": []}, {"type": "arg", "name": "capabilities", "value": "CAPABILITY_NAMED_IAM", "CIvars": []}, {"type": "arg", "name": "region", "value": "${{ secrets.AWS_REGION }}", "CIvars": [{"name": "AWS_REGION", "expression": "secrets.AWS_REGION", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "aws opsworks create-deployment \\\n  --stack-id your_stack_id \\\n  --app-id your_app_id \\\n  --command '{\"Name\":\"deploy\"}' \\\n  --region ${{ secrets.AWS_REGION }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30388521_0", "jobs": [{"name": "label", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tags", "value": "status/need-review", "CIvars": []}]}]}]}
{"id": "30388900_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install  # Use Cocoapods if your project uses it\n# or use any other package manager commands you need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild clean build -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild archive -workspace YourWorkspace.xcworkspace -scheme YourScheme -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $GITHUB_WORKSPACE/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "$GITHUB_WORKSPACE/build/YourApp.xcarchive", "CIvars": []}]}]}]}
{"id": "3042129_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "16.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a script to deploy SSRS reports\n# The script might use rsutil.exe or PowerShell commands\n\n# Example PowerShell Commands\n$SSRSServerUrl = \"http://your-ssrs-server/reportserver\"\n$ReportPath = \"C:\\path\\to\\your\\report.rdl\"\n$DeployScriptPath = \"C:\\path\\to\\your\\deploy-script.ps1\"\n\n# Execute your deployment script\npowershell.exe -ExecutionPolicy Bypass -File $DeployScriptPath -ReportPath $ReportPath -ReportServerUrl $SSRSServerUrl\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional: Any cleanup tasks, like removing temp files\nRemove-Item \"C:\\path\\to\\temp\\files\" -Recurse -Force || true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30439927_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the actual build command for your Rails app\nbundle exec rake assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "touch public/.nojekyll", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd public\ngit init\ngit config user.email \"your-email@example.com\"  # Replace with your email\ngit config user.name \"Your Name\"                 # Replace with your name\ngit add .\ngit commit -m \"Deploy to GitHub Pages\"\ngit push --force \"https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git\" master:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30455298_0", "jobs": [{"name": "setup-puppet-learning-vm", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rkh/vagrant-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "vagrant_version", "value": "2.2.14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y virtualbox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant ssh -c \"sudo apt-get update\"\nvagrant ssh -c \"sudo apt-get install -y puppet\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes your Puppet code is in a directory named `puppet`\nvagrant ssh -c \"sudo puppet apply /vagrant/puppet/your_manifest.pp\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Presuming you have some validators or tests\nvagrant ssh -c \"sudo puppet parser validate /vagrant/puppet/your_manifest.pp\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3056830_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./mvnw install  # Use your build tool, such as Maven or Gradle\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Install any dependencies listed in requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install  # Install any dependencies listed in Gemfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./mvnw test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # Use a command to run your tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rspec  # Use a command to run your tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30616820_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod lib lint  # Runs pod lib lint to validate the podspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod trunk push YourLibrary.podspec --allow-warnings --skip-import-validation --skip-tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourLibrary", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/library/framework", "CIvars": []}]}]}]}
{"id": "30680846_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, zip, gd, imagick", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpcs --standard=PSR12 --extensions=php src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpstan analyse --level=max src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run production", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "./coverage.cobertura.xml", "CIvars": []}]}]}]}
{"id": "30697558_0", "jobs": [{"name": "install-dev-packages", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require $(composer show --installed --format=json | jq -r '.installed[] | select(.require-dev | length > 0) | .name') \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30809323_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install\n# If you are using any WP-CLI commands, you can run them here.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key\nchmod 600 private_key\nscp -o StrictHostKeyChecking=no -i private_key -r * $USER@$HOST:/path/to/your/wordpress/directory/\nrm private_key\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30849866_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30922878_0", "jobs": [{"name": "run-powershell-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PowerShell -File ./path/to/your-script.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if (${{ steps.run-script.outcome }} -eq 'failure') {\n  echo \"Script failed with status ${{ steps.run-script.conclusion }}\"\n  if (${{ steps.run-script.conclusion }} -eq 'failure' -and (Get-Content ./path/to/your-script.ps1 | Select-String -Pattern \"exit 255\")) {\n    echo \"The script exited with code -1 (treated as return code 255).\"\n  }\n  exit 1  # Failing the job if the PowerShell script fails\n} else {\n  echo \"Script executed successfully!\"\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30981232_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -archivePath ./build/YourApp.xcarchive archive\nxcodebuild -exportArchive -archivePath ./build/YourApp.xcarchive -exportPath ./build -exportOptionsPlist ./exportOptions.plist \n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-app-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build succeeded!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build failed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30999693_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "31008383_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew clean build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT }}", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet  # Adjust this according to the location of your app.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31016990_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jekyll/jekyll-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "31188192_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y puppet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo puppet apply ./path/to/your/manifests/init.pp\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can add any verification steps to ensure your Puppet configuration worked correctly:\nsudo puppet agent --test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have any tests defined, run them here\nsudo puppet apply ./path/to/your/tests/init.pp\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rspec ./path/to/your/specs\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31300827_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.EC2_HOST }}", "CIvars": [{"name": "EC2_HOST", "expression": "secrets.EC2_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.EC2_USER }}", "CIvars": [{"name": "EC2_USER", "expression": "secrets.EC2_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.EC2_SSH_KEY }}", "CIvars": [{"name": "EC2_SSH_KEY", "expression": "secrets.EC2_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "22", "CIvars": []}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/your/application", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.EC2_HOST }}", "CIvars": [{"name": "EC2_HOST", "expression": "secrets.EC2_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.EC2_USER }}", "CIvars": [{"name": "EC2_USER", "expression": "secrets.EC2_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.EC2_SSH_KEY }}", "CIvars": [{"name": "EC2_SSH_KEY", "expression": "secrets.EC2_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "22", "CIvars": []}, {"type": "arg", "name": "script", "value": "cd /path/to/your/application\nnpm install --production\npm2 restart all # or your specific command to restart your app\n", "CIvars": []}]}]}]}
{"id": "31377758_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Navigate to your iOS folder if necessary\nfastlane deliver  # Change this if you have a different lane set up\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31438954_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\necho \"DATABASE_URL=mysql://your_user:your_password@127.0.0.1:3306/your_database_name\" >> .env\n# Adjust any other environment variables needed by your application here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/cake migrations migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Check that all translation files are present and up to date\nvendor/bin/cake i18n extract --paths src,plugins --out .pot\n# You can add additional commands to validate the translation files as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31439205_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test || echo \"Tests failed, but we are marking this job as unstable.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::notice::Job marked as unstable due to failed tests.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.run-tests.outcome }}\" == \"failure\" ]; then\n  echo \"The tests did not pass. Please check the details above.\"\nelse\n  echo \"All tests passed successfully!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31453378_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Example: Replace with your actual commands\necho \"Running your job...\"\n# Simulate test failure (uncomment to test failure)\n# exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "subject", "value": "GitHub Actions: Job Succeeded", "CIvars": []}, {"type": "arg", "name": "body", "value": "The job on the repository '$GITHUB_REPOSITORY' has succeeded.", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-server", "value": "${{ secrets.SMTP_SERVER }}", "CIvars": [{"name": "SMTP_SERVER", "expression": "secrets.SMTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "smtp-port", "value": "${{ secrets.SMTP_PORT }}", "CIvars": [{"name": "SMTP_PORT", "expression": "secrets.SMTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "subject", "value": "GitHub Actions: Job Failed", "CIvars": []}, {"type": "arg", "name": "body", "value": "The job on the repository '$GITHUB_REPOSITORY' has failed.", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-server", "value": "${{ secrets.SMTP_SERVER }}", "CIvars": [{"name": "SMTP_SERVER", "expression": "secrets.SMTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "smtp-port", "value": "${{ secrets.SMTP_PORT }}", "CIvars": [{"name": "SMTP_PORT", "expression": "secrets.SMTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}]}]}]}
{"id": "31458986_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Choose the appropriate command based on the bundler you're using\n# For JSPM\n# npm run build-jspm\n\n# For Webpack\nnpm run build-webpack\n\n# For Browserify\n# npm run build-browserify\n\n# For RequireJS\n# npm run build-requirejs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir output\n# Adjust the following command depending on how your build outputs artifacts\ncp -r dist/* output/  # Assume the built files are in the 'dist' folder\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "31471270_0", "jobs": [{"name": "run-powershell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"  # Stop on errors\nWrite-Host \"Starting PowerShell script execution...\"\n\n# Run your PowerShell script (replace 'your-script.ps1' with actual script name)\ntry {\n  .\\your-script.ps1\n  Write-Host \"PowerShell script executed successfully.\"\n} catch {\n  Write-Host \"Error occurred: $_\"\n  exit 1  # Ensure the job fails\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Debugging output:\"\necho \"Exit code: ${{ steps.run_script.outcome }}\"\necho \"Output: ${{ steps.run_script.outputs }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "315778_1", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./cleanup-old-builds.ps1 -ccnetApiUrl $env:CCNET_API_URL -apiKey $env:CCNET_API_KEY -daysThreshold 30\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31675031_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "${{ job.status == 'success' && 'ready for review' || 'needs work' }}\n", "CIvars": [{"name": "status", "expression": "job.status == 'success' && 'ready for review' || 'needs work'", "type": "job"}, {"name": "status", "expression": "job.status", "type": "job"}]}]}]}]}
{"id": "31717410_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/wait-for-postgres", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "localhost", "CIvars": []}, {"type": "arg", "name": "port", "value": 5432, "CIvars": []}, {"type": "arg", "name": "user", "value": "postgres", "CIvars": []}, {"type": "arg", "name": "password", "value": "postgres", "CIvars": []}, {"type": "arg", "name": "db", "value": "test_db", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y postgresql-client\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psql -h localhost -U postgres -d test_db -f sql/setup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psql -h localhost -U postgres -d test_db -f sql/test.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can check the test outputs and make assertions\n# Example: Check for a specific output\nresult=$(psql -h localhost -U postgres -d test_db -c \"SELECT your_function_test();\" -t -A)\nexpected_result=\"expected_value\"\n\nif [[ \"$result\" != \"$expected_result\" ]]; then\n  echo \"Test failed: expected '$expected_result', got '$result'\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psql -h localhost -U postgres -d test_db -c \"DROP SCHEMA public CASCADE;\"\npsql -h localhost -U postgres -d test_db -c \"CREATE SCHEMA public;\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31752272_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Unlock the keychain\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD /Users/github/Library/Keychains/login.keychain-db\n\n# Build the archive\nxcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportOptionsPlist ExportOptions.plist -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportPath $GITHUB_WORKSPACE/build/YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "$GITHUB_WORKSPACE/build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "31767596_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "New Issue: [Your Issue Title Here]", "CIvars": []}, {"type": "arg", "name": "body", "value": "This issue was created automatically by GitHub Actions.\n- **Triggered by**: ${{ github.actor }}\n- **Event**: ${{ github.event_name }}\n- **Commit**: ${{ github.sha }}\n", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}, {"name": "event_name", "expression": "github.event_name", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "labels", "value": "automation\n", "CIvars": []}, {"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "31890665_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-l/xcpretty-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n# Add any other dependency managers you may be using, e.g., Carthage or Swift Package Manager.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' | xcpretty", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild clean -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31892346_0", "jobs": [{"name": "create-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gh repo create ${{ github.event.inputs.repo_name }} --public --confirm\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31986449_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "r0adkll/upload-google-play", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "serviceAccountJson", "value": "${{ secrets.GOOGLE_PLAY_JSON }}", "CIvars": [{"name": "GOOGLE_PLAY_JSON", "expression": "secrets.GOOGLE_PLAY_JSON", "type": "secret"}]}, {"type": "arg", "name": "packageName", "value": "${{ secrets.PACKAGE_NAME }}", "CIvars": [{"name": "PACKAGE_NAME", "expression": "secrets.PACKAGE_NAME", "type": "secret"}]}, {"type": "arg", "name": "releaseFile", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}, {"type": "arg", "name": "track", "value": "internal", "CIvars": []}, {"type": "arg", "name": "inAppUpdatePriority", "value": 0, "CIvars": []}, {"type": "arg", "name": "status", "value": "published", "CIvars": []}]}]}]}
{"id": "3203571_0", "jobs": [{"name": "send-alert", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "slackapi/slack-github-action", "version": "v1.23.0", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\n  \"channel\": \"${{ env.SLACK_CHANNEL }}\",\n  \"text\": \"\ud83d\udea8 Jenkins Alert: Job '${{ github.event.workflow_run.name }}' has failed.\",\n  \"attachments\": [\n    {\n      \"text\": \"Job Details:\\n*Conclusion:* `${{ github.event.workflow_run.conclusion }}`\\n*Run ID:* `${{ github.event.workflow_run.id }}`\\n*View Job:* <${{ github.event.workflow_run.html_url }}|Click here>\"\n    }\n  ]\n}\n", "CIvars": [{"name": "SLACK_CHANNEL", "expression": "env.SLACK_CHANNEL", "type": "env"}, {"name": "event.workflow_run.name", "expression": "github.event.workflow_run.name", "type": "context"}, {"name": "event.workflow_run.conclusion", "expression": "github.event.workflow_run.conclusion", "type": "context"}, {"name": "event.workflow_run.id", "expression": "github.event.workflow_run.id", "type": "context"}, {"name": "event.workflow_run.html_url", "expression": "github.event.workflow_run.html_url", "type": "context"}]}]}]}]}
{"id": "32042482_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme <YourSchemeName> \\\n           -sdk iphoneos \\\n           -configuration Release \\\n           CODE_SIGN_IDENTITY=\"\" \\\n           CODE_SIGNING_REQUIRED=NO \\\n           CODE_SIGNING_ALLOWED=NO \\\n           -workspace <YourWorkspace.xcworkspace> \\\n           build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme <YourSchemeName> \\\n                -sdk iphonesimulator \\\n                -configuration Debug \\\n                CODE_SIGN_IDENTITY=\"\" \\\n                CODE_SIGNING_REQUIRED=NO \\\n                CODE_SIGNING_ALLOWED=NO \\\n                -workspace <YourWorkspace.xcworkspace> \\\n                -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32047585_0", "jobs": [{"name": "sonar", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.projectKey=<your_project_key> -Dsonar.projectName=<your_project_name> -Dsonar.projectVersion=${{ github.sha }} -Dsonar.sources=.\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}]}
{"id": "32051889_0", "jobs": [{"name": "security-scan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet security", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "snyk/actions/docker", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "monitor --all-projects", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aquasecurity/trivy-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "scan-type", "value": "all", "CIvars": []}, {"type": "arg", "name": "severity", "value": "HIGH,CRITICAL", "CIvars": []}, {"type": "arg", "name": "exit-code", "value": "1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Check your security reports\"\n# Add additional commands for handling reports or notifying if issues are found\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32068437_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YOUR_PROJECT.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseA /p:Platform=\"Any CPU\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseA /p:Platform=\"Any CPU\" /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfileA", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseB /p:Platform=\"Any CPU\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseB /p:Platform=\"Any CPU\" /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfileB", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Windows-Phone-Build-Artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/output/for/config-a\npath/to/output/for/config-b\n", "CIvars": []}]}]}]}
{"id": "32083029_0", "jobs": [{"name": "tidy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.34", "CIvars": []}, {"type": "arg", "name": "packages", "value": "Perl::Tidy", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Find all .pl files to tidy\nfind . -name '*.pl' -print0 | xargs -0 perl -MPerl::Tidy -e 'for (@ARGV) { Perl::Tidy::tidy(:all = $_); }'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3210501_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd build/  # Navigate to the build directory\ncomposer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build/  # Navigate to the build directory\ncomposer global require phing/phing  # Install Phing globally\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build/  # Navigate to the build directory\n~/.composer/vendor/bin/phing  # Run Phing command to execute the build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32107954_0", "jobs": [{"name": "close-issues", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the commit messages from the last push\nmessages=$(git log -1 --pretty=%B)\necho \"commit_messages<<EOF\" >> $GITHUB_ENV\necho \"$messages\" >> $GITHUB_ENV\necho \"EOF\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking for issues to close in commit messages...\"\nfor message in ${{ env.commit_messages }}; do\n  if [[ \"$message\" == *\"fixes #\"* ]] || [[ \"$message\" == *\"closes #\"* ]]; then\n    issue_number=$(echo \"$message\" | grep -o \"#[0-9]*\" | sed 's/#//')\n    echo \"Closing issue #$issue_number...\"\n\n    # Using GitHub CLI to close the issue\n    gh issue close \"$issue_number\" --repo \"${{ github.repository }}\" --comment \"Closed by commit: ${{ github.sha }}\"\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "32136511_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod repo add private-repo https://<USERNAME>:${{ secrets.COCOAPODS_REPO_ACCESS_TOKEN }}@github.com/<USERNAME>/<PRIVATE_REPO>.git\npod repo update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3220647_1", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --bootstrap your-php-file-path/bootstrap.php your-php-file-path/tests", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32208115_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results-directory/", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.projectKey=your_project_key -Dsonar.organization=your_organization -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}  # Make sure to set SONAR_TOKEN in your GitHub secrets\n", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}]}]}
{"id": "32247212_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gradle-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "malinskiy/action-android", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": "${{ matrix.android-version }}", "CIvars": [{"name": "android-version", "expression": "matrix.android-version", "type": "matrix"}]}, {"type": "arg", "name": "target", "value": "${{ matrix.target }}", "CIvars": [{"name": "target", "expression": "matrix.target", "type": "matrix"}]}, {"type": "arg", "name": "script", "value": "./gradlew connected${{ matrix.target.capitalize() }}AndroidTest", "CIvars": [{"name": "target.capitalize()", "expression": "matrix.target.capitalize()", "type": "matrix"}, {"name": "target.capitalize", "expression": "matrix.target.capitalize", "type": "matrix"}]}]}]}]}
{"id": "32259270_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.ci config/database.yml\nbin/rails db:create db:migrate db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Change this if you are using a different test framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32262295_0", "jobs": [{"name": "add-reviewer", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "reviewer-bot/add-reviewer", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Reviewer has been added to the PR.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32330922_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text --coverage-clover coverage.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "coverage.xml", "CIvars": []}, {"type": "arg", "name": "flags", "value": "unittests", "CIvars": []}]}]}, {"name": "static_analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}, {"name": "security", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer audit --format=json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32347839_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive archive ENABLE_BITCODE=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportPath $GITHUB_WORKSPACE/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}]}]}
{"id": "3236740_1", "jobs": [{"name": "phpstan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse src --level=max", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32425582_0", "jobs": [{"name": "search", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Searching repositories in organization: ${{ github.event.inputs.org_name }} for string: ${{ github.event.inputs.search_string }}\"\n\n# Getting a list of repositories in the organization\nrepos=$(gh repo list ${{ github.event.inputs.org_name }} --json name -q '.[] | .name')\n\n# Initialize results array\nresults=\"\"\n\n# Search each repository for the string\nfor repo in $repos; do\n  echo \"Searching in repository: $repo\"\n  match_count=$(gh repo clone \"${{ github.event.inputs.org_name }}/$repo\" -- -q \"grep -r '${{ github.event.inputs.search_string }}' . || true\")\n  if [ -n \"$match_count\" ]; then\n    results+=\"Found in $repo:\\n$match_count\\n\"\n  fi\n  rm -rf \"$repo\"  # Clean up cloned repository\ndone\n\nif [ -z \"$results\" ]; then\n  echo \"No matches found.\"\nelse\n  echo -e \"Matches found:\\n$results\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ steps.search_repos.outputs.results }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32438212_0", "jobs": [{"name": "powershell-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Call the PowerShell script here\n# Example: .\\scripts\\your-script.ps1\nWrite-Host \"Running PowerShell script\"\n.\\scripts\\your-script.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Write-Host \"Cleanup after script execution\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32464231_1", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "32527186_1", "jobs": [{"name": "count_tags", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll\ngem install bundler\n# If you have a Gemfile, you can run bundle install instead\n# bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby count_posts_by_tags.rb\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32582012_0", "jobs": [{"name": "fetch_metadata", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "REPO_OWNER=\"username\"  # Replace with the owner of the target repo\nREPO_NAME=\"repo-name\"   # Replace with the target repo name\nTOKEN=\"${{ secrets.GITHUB_TOKEN }}\"  # GitHub provides a default token\nAPI_URL=\"https://api.github.com/repos/$REPO_OWNER/$REPO_NAME\"\n\n# Fetch metadata JSON\nresponse=$(curl -s -H \"Authorization: token $TOKEN\" \"$API_URL\")\n\n# Extract relevant metadata fields\nfull_name=$(echo \"$response\" | jq -r '.full_name')\ndescription=$(echo \"$response\" | jq -r '.description')\n\n# Output as environment variables\necho \"FULL_NAME=${full_name}\" >> $GITHUB_ENV\necho \"DESCRIPTION=${description}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create or update a file with the fetched metadata\necho \"---\" > _data/repo_metadata.yml\necho \"full_name: '${{ env.FULL_NAME }}'\" >> _data/repo_metadata.yml\necho \"description: '${{ env.DESCRIPTION }}'\" >> _data/repo_metadata.yml\necho \"---\" >> _data/repo_metadata.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "32585972_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32596511_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create and migrate the database if necessary\nbundle exec rake db:create\nbundle exec rake db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test  # or your preferred test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop # if you are using RuboCop for linting\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec brakeman --quiet  # if you are using Brakeman for security scanning\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3269133_1", "jobs": [{"name": "code-style", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your specific ignore directories here\nphpcs --ignore=vendor/*,tests/* -p .  # Adjust ignore paths as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32773056_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxheld83/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3285651_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.IIS_HOST }}", "CIvars": [{"name": "IIS_HOST", "expression": "secrets.IIS_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.IIS_USERNAME }}", "CIvars": [{"name": "IIS_USERNAME", "expression": "secrets.IIS_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.IIS_PASSWORD }}", "CIvars": [{"name": "IIS_PASSWORD", "expression": "secrets.IIS_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "source", "value": "./output/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/your/iis/site", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Invoke-Expression \"Enter-PSSession -ComputerName ${{ secrets.IIS_HOST }} -Credential (New-Object System.Management.Automation.PSCredential('${{ secrets.IIS_USERNAME }}', (ConvertTo-SecureString '${{ secrets.IIS_PASSWORD }}' -AsPlainText -Force)))\"\nInvoke-Expression \"Restart-WebAppPool -Name 'yourAppPoolName'\"  # Replace 'yourAppPoolName' with actual app pool name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32859860_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build # Assuming you have a 'build' lane in your Fastfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane upload_to_app_store # Assuming you have a lane to upload to App Store Connect\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32963719_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\ncd ios && pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath $PWD/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $PWD/build/YourApp.xcarchive -exportPath $PWD/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload -u YOUR_APPLE_ID -i build/YourApp.ipa", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32997975_0", "jobs": [{"name": "composer-install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33042181_0", "jobs": [{"name": "render", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "R -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"bookdown\"), repos = \"http://cran.rstudio.com/\")'  # Add any other packages you need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'rmarkdown::render_site()'  # Assuming you have an _site.yml file, change to rmarkdown::render(\"your_file.Rmd\") if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"GitHub Action\"\ngit config --local user.email \"action@github.com\"\ngit add .\ngit commit -m \"Render RMarkdown files\" || echo \"No changes to commit\"\ngit push origin main --force  # Change 'main' to your target branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33044517_0", "jobs": [{"name": "sync-to-azure-devops", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.29.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git clone https://dev.azure.com/${{ secrets.AZURE_ORG_NAME }}/${{ secrets.AZURE_PROJECT_NAME }}/_git/${{ secrets.AZURE_REPO_NAME }} azure-repo\ncd azure-repo\ngit config user.email \"github-actions@users.noreply.github.com\"\ngit config user.name \"GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -R ../* azure-repo/\ncd azure-repo\ngit add .\ngit commit -m \"Sync from GitHub: ${{ github.sha }}\"\ngit push origin master  # Change 'master' to your default branch if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33070186_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifact-from-server-1", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts/server1", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifact-from-server-2", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts/server2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p ./combined\ncp ./artifacts/server1/* ./combined/\ncp ./artifacts/server2/* ./combined/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ./combined\n# Create .nuspec file or use existing one if you have it:\necho \"<?xml version=\\\"1.0\\\"?>\n<package >\n    <metadata>\n        <id>YourPackageId</id>\n        <version>1.0.0</version> <!-- You may want to automate this as well -->\n        <authors>Your Name</authors>\n        <description>Your package description.</description>\n    </metadata>\n    <files>\n        <file src=\\\"*\\\" target=\\\"lib/netstandard2.0\\\" /> <!-- Adjust the target as needed -->\n    </files>\n</package>\" > YourPackageId.nuspec\n\n# Pack the NuGet package\ndotnet pack YourPackageId.nuspec -c Release -o .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "nuget/nuget-publish", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "nuget_api_key", "value": "${{ secrets.NUGET_API_KEY }}", "CIvars": [{"name": "NUGET_API_KEY", "expression": "secrets.NUGET_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "package_path", "value": "./combined/*.nupkg", "CIvars": []}]}]}]}
{"id": "33099091_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:Platform=\"x86\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -d \"Tests\" ]; then\n  dotnet test Tests/YourTestProject/YourTestProject.csproj --configuration Release\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -d \"YourUwpProject/bin/Release\" ]; then\n  mkdir -p ${{ github.workspace }}/Artifacts\n  cp -R YourUwpProject/bin/Release/* ${{ github.workspace }}/Artifacts/\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "uwp-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "Artifacts/", "CIvars": []}]}]}]}
{"id": "33110549_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --verbose", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3314440_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "v0.1.2", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.DEV_SERVER_IP }}", "CIvars": [{"name": "DEV_SERVER_IP", "expression": "secrets.DEV_SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.DEV_SERVER_USER }}", "CIvars": [{"name": "DEV_SERVER_USER", "expression": "secrets.DEV_SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.DEV_SERVER_SSH_KEY }}", "CIvars": [{"name": "DEV_SERVER_SSH_KEY", "expression": "secrets.DEV_SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/deploy", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "v0.1.2", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.DEV_SERVER_IP }}", "CIvars": [{"name": "DEV_SERVER_IP", "expression": "secrets.DEV_SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.DEV_SERVER_USER }}", "CIvars": [{"name": "DEV_SERVER_USER", "expression": "secrets.DEV_SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.DEV_SERVER_SSH_KEY }}", "CIvars": [{"name": "DEV_SERVER_SSH_KEY", "expression": "secrets.DEV_SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "script", "value": "cd /path/to/deploy\nnpm install --production\npm2 restart all  # Restart the PM2 process (or any other service)\n", "CIvars": []}]}]}]}
{"id": "33148696_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-lian/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive\nxcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ./ExportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.appstoreconnect.apple.com/v1/builds\" \\\n-H \"Authorization: Bearer $APP_STORE_CONNECT_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"data\": {\n    \"type\": \"builds\",\n    \"attributes\": {\n      \"version\": \"1.0.0\",  # Provide the version number you are uploading\n      \"buildNumber\": \"1\",    # Provide the build number you are uploading\n      \"platform\": \"IOS\"\n    },\n    \"relationships\": {\n      \"app\": {\n        \"data\": {\n          \"type\": \"apps\",\n          \"id\": \"'${{ secrets.APP_STORE_CONNECT_IOS_APP_ID }}'\"  # Adjust the ID from stored secret\n        }\n      }\n    }\n  }\n}'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload --ipa ./build/YourApp.ipa --username ${{ secrets.APP_STORE_CONNECT_USERNAME }} --app_identifier ${{ secrets.APP_STORE_CONNECT_APP_ID }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33174972_1", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, gd, mysqli, soap, curl, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Starting deployment...\"\n# Here you would add your deployment commands\n# For example, using rsync to transfer files to your server\n# rsync -avz --delete ./ user@yourserver:/path/to/moodle/\necho \"Deployment complete\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3317633_0", "jobs": [{"name": "dump_database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mysql/setup-mysql", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "mysql-root-password", "value": "${{ secrets.MYSQL_ROOT_PASSWORD }}", "CIvars": [{"name": "MYSQL_ROOT_PASSWORD", "expression": "secrets.MYSQL_ROOT_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "mysqldump -u root -h localhost --databases your_database_name > dump.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add dump.sql\ngit commit -m \"Add MySQL dump $(date +'%Y-%m-%d %H:%M:%S')\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33191163_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -O https://releases.hashicorp.com/vagrant/2.2.19/vagrant_2.2.19_linux_amd64.zip\nunzip vagrant_2.2.19_linux_amd64.zip -d /usr/local/bin\nchmod +x /usr/local/bin/vagrant\nvagrant --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y virtualbox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant init\n# You might want to configure the Vagrantfile programmatically for CI\n# echo \"Vagrantfile configuration goes here\" > Vagrantfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up\nvagrant ssh -c \"cd /vagrant && <your_test_command_here>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33210709_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,os=15.0' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33289579_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "33343904_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivam010/php-setup", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\necho \"$HOME/.composer/vendor/bin\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-project-key", "value": "your-project-key", "CIvars": []}, {"type": "arg", "name": "sonar-project-name", "value": "your-project-name", "CIvars": []}, {"type": "arg", "name": "sonar-project-version", "value": "1.0", "CIvars": []}, {"type": "arg", "name": "sonar-host-url", "value": "https://sonarcloud.io", "CIvars": []}, {"type": "arg", "name": "sonar-login", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "if [[ \"${{ job.status }}\" == \"success\" ]]; then\n  echo \"Build succeeded!\"\nelse\n  echo \"Build failed!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33374193_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 14' -derivedDataPath build test -only-testing:YourAppTests/PushNotificationTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/Logs/Test/*.log", "CIvars": []}]}]}]}
{"id": "33438373_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your-Azure-App-Name>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "33475305_0", "jobs": [{"name": "invoke-remote-process", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-client", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "known-hosts", "value": "${{ secrets.REMOTE_HOST_KNOWN_HOSTS }}", "CIvars": [{"name": "REMOTE_HOST_KNOWN_HOSTS", "expression": "secrets.REMOTE_HOST_KNOWN_HOSTS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no user@remote-server 'bash -s' < ./script-to-run.sh\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33476484_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'YourProjectName' with the actual project names. You can add multiple publish commands for each project.\ndotnet publish YourProjectA/YourProjectA.csproj --configuration Release --output ./output/YourProjectA\ndotnet publish YourProjectB/YourProjectB.csproj --configuration Release --output ./output/YourProjectB\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output/YourProjectA", "CIvars": []}]}]}]}
{"id": "33576779_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppUITests -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty -c\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/test/results", "CIvars": []}]}]}]}
{"id": "33656922_0", "jobs": [{"name": "phpci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Adjust this as needed based on your testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33730784_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Invoke-WebRequest -Uri https://aka.ms/sqlpackage -OutFile sqlpackage.zip\nExpand-Archive sqlpackage.zip -DestinationPath '$env:ProgramFiles\\sqlpackage'\necho '##vso[task.setvariable variable=SQLPACKAGE_PATH]$env:ProgramFiles\\sqlpackage\\sqlpackage.exe'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "& $env:ProgramFiles\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe \"<path_to_your_sddt_project>.sqlproj\" /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "& $SQLPACKAGE_PATH /Action:Publish /SourceFile:\"<path_to_your_dacpac>.dacpac\" /TargetConnectionString:\"$AzureSqlConnectionString\" /p:BlockOnPossibleDataLoss=false\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33752472_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the custom build path\nCUSTOM_BUILD_PATH=\"./build\"\n\n# Create the directory for the build path\nmkdir -p \"${CUSTOM_BUILD_PATH}\"\n\n# Build the project using xcodebuild\nxcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourScheme \\\n           -configuration Release \\\n           -destination 'generic/platform=iOS' \\\n           -derivedDataPath \"${CUSTOM_BUILD_PATH}\" \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33765400_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "33770905_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build -d _site\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "destination_dir", "value": ".", "CIvars": []}]}]}]}
{"id": "33774497_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "theqtcompany/setup-qt", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "packages", "value": "qtbase, qtdeclarative, qttools", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..  # or qmake .. for .pro files\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable_name  # replace with the name of your test executable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable_name --gtest_output=xml:test_results.xml  # Generate xml output\ncat test_results.xml  # Output the test results in console\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/test_results.xml", "CIvars": []}]}]}]}
{"id": "33841535_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourProject.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourProject.sln --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish YourProject.sln --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "33865283_1", "jobs": [{"name": "run-php-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php application/scripts/execute_query.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33871306_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, bcmath, gd", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "upload_max_filesize=100M\npost_max_size=100M\nmemory_limit=512M\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-scripts --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\nphp artisan key:generate\nphp artisan config:cache\nphp artisan migrate --env=testing\n./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start SSH agent and add the private key\neval \"$(ssh-agent -s)\"\necho \"$PRIVATE_KEY\" | tr -d '\\r' | ssh-add -\n\n# Optional: Update known hosts to avoid prompt\nmkdir -p ~/.ssh\nssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts\n\n# Deploy project to server\nssh $SERVER_USER@$SERVER_IP << 'EOF'\n  cd /path/to/your/laravel/app  # Specify the path on your server\n  git pull origin main  # Assuming you're using main as your deployment branch\n  composer install --no-dev --no-progress --prefer-dist\n  php artisan migrate --force  # Use --force for migrations in production\n  php artisan config:cache\n  php artisan route:cache\n  php artisan view:cache\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34092337_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "${{ matrix.node-version }}", "CIvars": [{"name": "node-version", "expression": "matrix.node-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some/slack-notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "CI Build for `${{ github.event.head_commit.message }}` completed successfully!", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}]}]}]}]}
{"id": "34106964_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "/tmp/.buildx-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-buildx-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-buildx-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "file", "value": "./Dockerfile", "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-docker-repo/your-app:latest", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "v0.1.5", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USERNAME }}", "CIvars": [{"name": "SERVER_USERNAME", "expression": "secrets.SERVER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SERVER_SSH_KEY }}", "CIvars": [{"name": "SERVER_SSH_KEY", "expression": "secrets.SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "source", "value": "docker-compose.yml", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/your/project", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "v0.1.5", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USERNAME }}", "CIvars": [{"name": "SERVER_USERNAME", "expression": "secrets.SERVER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SERVER_SSH_KEY }}", "CIvars": [{"name": "SERVER_SSH_KEY", "expression": "secrets.SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "cd /path/to/your/project  # Change accordingly\ndocker-compose pull\ndocker-compose up -d --no-deps --build\n# Optionally remove unused images\ndocker image prune -f\n", "CIvars": []}]}]}]}
{"id": "3414667_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build your_gem.gemspec  # Replace 'your_gem.gemspec' with your gemspec file name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem push *.gem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34165806_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github actions/database.yml\nRAILS_ENV=test bundle exec rails db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec  # Use your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop  # Optional: Run a code linter like RuboCop\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/build/artifacts", "CIvars": []}]}]}]}
{"id": "34295981_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "34310830_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phdox generate\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "34330217_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore your-solution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build your-solution.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish Project1/Project1.csproj --configuration Release --output ./output/Project1", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish Project2/Project2.csproj --configuration Release --output ./output/Project2", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy-project1", "steps": [{"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-azure-web-app-name1", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE1 }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE1", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE1", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output/Project1", "CIvars": []}]}]}, {"name": "deploy-project2", "steps": [{"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-azure-web-app-name2", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE2 }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE2", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE2", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output/Project2", "CIvars": []}]}]}]}
{"id": "34360659_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example: You must ensure that the Ranorex Runtime installer is available\n# This can be an executable you can download or that you have in your repo\nstart /wait \"Ranorex Runtime\" \"path_to_ranorex_installer.exe\" /quiet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd path-to-your-ranorex-project\n\"C:\\Program Files\\Ranorex\\Ranorex Studio\\bin\\Ranorex.exe\" /run \"YourRanorexTestSuite.rxsuite\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/test-results", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "platform", "value": "Win", "CIvars": []}, {"type": "arg", "name": "test-results-files", "value": "**/*.trx", "CIvars": []}, {"type": "arg", "name": "project", "value": "Your VSO Project Name", "CIvars": []}, {"type": "arg", "name": "build-url", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "CIvars": [{"name": "server_url", "expression": "github.server_url", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "system-access-token", "value": "${{ secrets.VSO_SYSTEM_ACCESS_TOKEN }}", "CIvars": [{"name": "VSO_SYSTEM_ACCESS_TOKEN", "expression": "secrets.VSO_SYSTEM_ACCESS_TOKEN", "type": "secret"}]}]}]}]}
{"id": "34368328_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec middleman build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "34509310_0", "jobs": [{"name": "update_pods", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod repo update  # Ensure the repo is up to date\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod update --no-repo-update  # Update pods without updating the spec repo\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\nif ! git diff --quiet Podfile.lock; then\n  git add Podfile.lock\n  git commit -m \"Auto-update Podfile.lock\"\n  git push\nelse\n  echo \"No changes to Podfile.lock\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod deintegrate && pod install", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34564791_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "5.6", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, ctype, token_get_all, open_ssl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34572170_0", "jobs": [{"name": "reply", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/reply-to-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.issue.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thank you for your comment! If you have any further questions or anything else you want to discuss, feel free to ask!\n", "CIvars": []}]}]}]}
{"id": "34623978_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o published", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p output\n# Copy static files\ncp -R ./published/wwwroot/* ./output/\n# Copy binaries (dlls, etc.)\ncp -R ./published/*.dll ./output/\ncp -R ./published/*.exe ./output/  # Add any other specific binary types here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/scp-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.HOST }}", "CIvars": [{"name": "HOST", "expression": "secrets.HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.USERNAME }}", "CIvars": [{"name": "USERNAME", "expression": "secrets.USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.PASSWORD }}", "CIvars": [{"name": "PASSWORD", "expression": "secrets.PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "./output/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/your/remote/directory", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm -rf ./output", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34645523_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "34655381_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit tests -- --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ github.event_name }}\" == \"push\" ]; then\n  echo \"Deploying to production...\"\n  # Place your deployment commands here\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34795169_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEB_APP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEB_APP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEB_APP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34839682_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build || exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a script to test your Jekyll site, replace `test_script.sh` accordingly\nif [ -f \"test_script.sh\" ]; then\n  bash test_script.sh\nelse\n  echo \"No test script found, skipping tests.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploy your site here - e.g., rsync, FTP, etc.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35062911_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text --strict\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -m", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "printenv", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35203890_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have tests, run them here\n# Example: \n# vstest.console.exe YourTests.dll\necho \"Run your unit tests here\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35317285_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods # if using CocoaPods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -runFirstLaunch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release clean build CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\" PROVISIONING_PROFILE=\"your-provisioning-profile\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath \"YourApp.xcarchive\" -exportPath \"./build\" -exportOptionsPlist \"ExportOptions.plist\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/app-store-upload-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "apple_id", "value": "your-apple-email@example.com", "CIvars": []}, {"type": "arg", "name": "app_specific_password", "value": "${{ secrets.APP_SPECIFIC_PASSWORD }}", "CIvars": [{"name": "APP_SPECIFIC_PASSWORD", "expression": "secrets.APP_SPECIFIC_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "itunes_connect_api_key", "value": "${{ secrets.APP_STORE_CONNECT_API_KEY }}", "CIvars": [{"name": "APP_STORE_CONNECT_API_KEY", "expression": "secrets.APP_STORE_CONNECT_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "ipa_path", "value": "./build/YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "skip_waiting_for_processing", "value": true, "CIvars": []}]}]}]}
{"id": "35317484_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "<your-aws-account-id>.dkr.ecr.<your-region>.amazonaws.com/<your-ecr-repo>:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecs-update-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "<your-cluster-name>", "CIvars": []}, {"type": "arg", "name": "service", "value": "<your-service-name>", "CIvars": []}, {"type": "arg", "name": "task-definition", "value": "<your-task-definition>", "CIvars": []}, {"type": "arg", "name": "container-name", "value": "<your-container-name>", "CIvars": []}, {"type": "arg", "name": "region", "value": "<your-region>", "CIvars": []}, {"type": "arg", "name": "image", "value": "<your-aws-account-id>.dkr.ecr.<your-region>.amazonaws.com/<your-ecr-repo>:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecs-describe-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "<your-cluster-name>", "CIvars": []}, {"type": "arg", "name": "service", "value": "<your-service-name>", "CIvars": []}, {"type": "arg", "name": "region", "value": "<your-region>", "CIvars": []}]}]}]}
{"id": "35367683_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-gcp-project-id", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n# Make sure to specify your own app.yaml configuration file.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35458369_0", "jobs": [{"name": "simulate-location", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\npod update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start the simulator\nxcrun simctl boot \"iPhone 14\"  # Change to your desired simulator\n# Wait for a short period to ensure the simulator is ready\nsleep 10\n# Load the GPX file to the simulator\nxcrun simctl location booted ./path/to/your/location.gpx  # Change path as necessary\n# Run your tests or app\nxcrun simctl launch booted com.your.bundle.id  # Change with your App ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl shutdown \"iPhone 14\"  # Make sure to shutdown your simulator after use\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35499859_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module Az -AllowClobber -Scope CurrentUser -Force\nImport-Module Az\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"\n$appId = $env:AZURE_APP_ID\n$password = $env:AZURE_PASSWORD\n$tenantId = $env:AZURE_TENANT_ID\nConnect-AzAccount -ServicePrincipal -TenantId $tenantId -ApplicationId $appId -Credential (ConvertTo-SecureString $password -AsPlainText -Force)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Your deployment script goes here.\n# For example, if you are running a script called Deploy.ps1:\n.\\Deploy.ps1\n# Additional deployment logic can be added here.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Command to clean up resources if necessary\nDisconnect-AzAccount\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35511196_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "msbuild-version", "value": "15.0", "CIvars": []}, {"type": "arg", "name": "vs-version", "value": "2015", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore your-solution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild your-solution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your test project file\nvstest.console.exe /Platform:x64 /Logger:trx \"path/to/your/test/project/bin/Release/your-tests.dll\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35547936_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo $CERTIFICATE | base64 --decode > certificate.p12\nsecurity create-keychain -p 'actions' build.keychain\nsecurity import certificate.p12 -P 'your_certificate_password' -A\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p 'actions' build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k 'actions' build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo $PROVISIONING_PROFILE | base64 --decode > profile.mobileprovision\nmkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\nmv profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build # Make sure your Fastfile has a 'build' lane defined\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35551739_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if mysqladmin ping -h \"127.0.0.1\" --silent; then\n    echo \"MySQL is up!\"\n    break\n  fi\n  echo \"Waiting for MySQL...\"\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing\nphp artisan db:seed --env=testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35599011_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"MY_ENV_VAR=HelloWorld\" >> $GITHUB_ENV\necho \"ANOTHER_ENV_VAR=ExampleValue\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35605608_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Change to your iOS project directory if necessary\nxcodebuild -workspace YourApp.xcworkspace \\\n  -scheme YourScheme \\\n  -sdk iphoneos \\\n  -configuration Release \\\n  archive \\\n  -archivePath ./build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n  -archivePath ./build/YourApp.xcarchive \\\n  -exportOptionsPlist ./ios/exportOptions.plist \\\n  -exportPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"IPA Path: ./build/YourApp.ipa\"\necho \"IPA Path: ${{ github.workspace }}/build/YourApp.ipa\" # Print out the path for reference\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "35638306_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "v0.1.6", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SSH_HOST }}", "CIvars": [{"name": "SSH_HOST", "expression": "secrets.SSH_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SSH_USERNAME }}", "CIvars": [{"name": "SSH_USERNAME", "expression": "secrets.SSH_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "dist/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/on/your/server", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SSH_HOST }}", "CIvars": [{"name": "SSH_HOST", "expression": "secrets.SSH_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SSH_USERNAME }}", "CIvars": [{"name": "SSH_USERNAME", "expression": "secrets.SSH_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "script", "value": "cd /path/on/your/server\nnpm install --production\npm2 restart all # or any command to start/refresh the application\n", "CIvars": []}]}]}]}
{"id": "35686138_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'your_script.rb' with the name of your Ruby script or command\nruby your_script.rb      \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35751042_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build your_gem_name.gemspec  # Replace with your gemspec file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install ./your_gem_name-*.gem  # Replace with your gem name\n# Optionally, run your tests if you have a test suite\n# e.g., rspec or minitest\nbundle exec rspec  # Uncomment if using RSpec\n# OR\n# bundle exec rake test  # Uncomment if using Rake for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem push ./your_gem_name-*.gem  # Replace with your gem name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35769047_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x gradlew", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-release", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "microsoft/appcenter-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "appName", "value": "<Your_App_Name>", "CIvars": []}, {"type": "arg", "name": "appPath", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}, {"type": "arg", "name": "distributionGroups", "value": "<Your_Distribution_Group>", "CIvars": []}, {"type": "arg", "name": "apiToken", "value": "${{ secrets.APP_CENTER_API_TOKEN }}", "CIvars": [{"name": "APP_CENTER_API_TOKEN", "expression": "secrets.APP_CENTER_API_TOKEN", "type": "secret"}]}]}]}]}
{"id": "35770346_0", "jobs": [{"name": "update-pr-title", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/repo-syncer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "title", "value": "Merged: ${{ github.event.pull_request.title }}", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Updated PR title: ${{ github.event.pull_request.title }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35772043_0", "jobs": [{"name": "list_repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, openssl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\nrequire 'vendor/autoload.php';\n$hybridauthConfig = [\n    'base_url' => 'http://your-hybridauth-endpoint',\n    'providers' => [\n        'GitHub' => [\n            'enabled' => true,\n            'keys' => [\n                'id' => getenv('GITHUB_CLIENT_ID'),\n                'secret' => getenv('GITHUB_CLIENT_SECRET')\n            ],\n            'scope' => 'repo'\n        ]\n    ]\n];\n\n$hybridauth = new Hybridauth\\Hybridauth($hybridauthConfig);\n$adapter = $hybridauth->getAdapter('GitHub');\n$adapter->authenticate();\n$userProfile = $adapter->getUserProfile();\n\n$apiUrl = 'https://api.github.com/users/' . $userProfile->identifier . '/repos';\n$response = file_get_contents($apiUrl, false, stream_context_create([\n    'http' => [\n        'header' => [\n            \"User-Agent: PHP-Script\",\n            \"Authorization: token \" . $adapter->getAccessToken()\n        ]\n    ]\n]));\n\n$repositories = json_decode($response);\nforeach ($repositories as $repo) {\n    echo $repo->full_name . PHP_EOL;\n}\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35782425_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35812163_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawrence/action-cmake", "version": "v1.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=${{ matrix.toolchain }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build build --config Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ctest --test-dir build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35827333_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.REMOTE_HOST }}", "CIvars": [{"name": "REMOTE_HOST", "expression": "secrets.REMOTE_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.REMOTE_USER }}", "CIvars": [{"name": "REMOTE_USER", "expression": "secrets.REMOTE_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "your/local/path/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.REMOTE_PATH }}", "CIvars": [{"name": "REMOTE_PATH", "expression": "secrets.REMOTE_PATH", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.REMOTE_HOST }}", "CIvars": [{"name": "REMOTE_HOST", "expression": "secrets.REMOTE_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.REMOTE_USER }}", "CIvars": [{"name": "REMOTE_USER", "expression": "secrets.REMOTE_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "script", "value": "cd ${{ secrets.REMOTE_PATH }}\n# Add commands to restart your service, e.g., \n# pm2 restart <app-name> OR docker-compose up -d OR any relevant command \n", "CIvars": [{"name": "REMOTE_PATH", "expression": "secrets.REMOTE_PATH", "type": "secret"}]}]}]}]}
{"id": "35912145_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to FTP server\"\napt-get update && apt-get install -y ftp\nlftp -u $FTP_USERNAME,$FTP_PASSWORD -e \"mirror -R . /path/on/server; quit\" $FTP_SERVER\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35919983_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build-report  # Replace with your command to create HTML report\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "html-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/report.html", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Monthly Report", "CIvars": []}, {"type": "arg", "name": "body", "value": "<h1>Your HTML Report</h1><a href='cid:report.html'>View Report</a>", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_FROM }}", "CIvars": [{"name": "EMAIL_FROM", "expression": "secrets.EMAIL_FROM", "type": "secret"}]}, {"type": "arg", "name": "attachments", "value": "path/to/report.html", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \\\n-d chat_id=$TELEGRAM_CHAT_ID \\\n-d text=\"Your report is ready! You can download it [here](https://url.to/your/report.html)\" \\\n-d parse_mode=\"HTML\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35995990_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install --production", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-org-id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-project-id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-env", "value": "production", "CIvars": []}]}]}]}
{"id": "36129781_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports/", "CIvars": []}]}]}]}
{"id": "3618660_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2010", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln # Make sure to provide your solution file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.csproj /p:Configuration=Release /p:DeployOnBuild=True /p:PublishProfile=YourPublishProfile.pubxml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "published-web-application", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/publish/output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Optionally add cleanup commands or any other post-processing scripts\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36236813_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msdeploy -verb:sync -source:package=\"$(System.DefaultWorkingDirectory)\\Path\\To\\Your\\Package.zip\" -dest:auto,computerName=\"https://your-server:8172/msdeploy.axd\",username=\"YOUR_USERNAME\",password=\"YOUR_PASSWORD\",authType=\"Basic\",includeAcls=\"False\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36243399_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your test command here, if you have tests for your site\n# Example: bundle exec htmlproofer ./_site\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your deployment commands here\necho \"Deploying the built site...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36270286_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "New Pull Request: ${{ github.event.pull_request.title }}", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}]}, {"type": "arg", "name": "body", "value": "A new pull request has been opened by ${{ github.event.pull_request.user.login }}.\nYou can view it here: ${{ github.event.pull_request.html_url }}\n\nPull Request Description:\n${{ github.event.pull_request.body }}\n", "CIvars": [{"name": "event.pull_request.user.login", "expression": "github.event.pull_request.user.login", "type": "context"}, {"name": "event.pull_request.html_url", "expression": "github.event.pull_request.html_url", "type": "context"}, {"name": "event.pull_request.body", "expression": "github.event.pull_request.body", "type": "context"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "36297802_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GOOGLE_PROJECT_ID }}", "CIvars": [{"name": "GOOGLE_PROJECT_ID", "expression": "secrets.GOOGLE_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}", "CIvars": [{"name": "GOOGLE_APPLICATION_CREDENTIALS", "expression": "secrets.GOOGLE_APPLICATION_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# If you're using Node.js, Python, etc., install your dependencies here\n# Example for Node.js:\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet  # Use your app.yaml name if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36600042_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y devscripts debhelper\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-package-directory  # change directory to where your debian packages are defined\ndebuild -us -uc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ncipollo/release-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "files", "value": "your-package-directory/*.deb  # Adjust the pattern as necessary\n", "CIvars": []}, {"type": "arg", "name": "tag", "value": "${{ github.ref_name }}", "CIvars": [{"name": "ref_name", "expression": "github.ref_name", "type": "context"}]}]}]}]}
{"id": "36610184_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt  # Adjust according to your project needs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your compilation command here\n# e.g., if you were using a Java project, it might be `javac src/**/*.java`\necho \"Compiling the code...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your test command here\n# e.g., if you're using `pytest`, it could be `pytest`\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ansible/ansible-playbook-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "playbook", "value": "deploy.yml", "CIvars": []}, {"type": "arg", "name": "inventory", "value": "inventory.ini", "CIvars": []}]}]}]}
{"id": "36654260_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sql-server", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sqlserver-version", "value": "2019-latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace this with the path to your PowerShell script\npwsh ./export-ssis-diagram.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "SSIS-Diagram", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/exported/diagram/file.png", "CIvars": []}]}]}]}
{"id": "36778339_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAppName", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "36783786_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "fawick/setup-stack", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "stack-version", "value": "2.7.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "stack build --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "stack test --fast", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "stack build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36814259_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-gcc", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcc", "value": "10", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36851900_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish --access public", "name": "", "version": "", "shell": "bash"}]}, {"name": "deployment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"\n# You can add your deployment scripts or commands here\n# e.g. calling external deployment tools\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\"text\":\"Deployment completed successfully!\"}", "CIvars": []}, {"type": "arg", "name": "channel", "value": "#your-channel", "CIvars": []}, {"type": "arg", "name": "status", "value": "success", "CIvars": []}]}]}]}
{"id": "36893597_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/auto-merge", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "merge_method", "value": "merge", "CIvars": []}, {"type": "arg", "name": "merge_label", "value": "automerge", "CIvars": []}, {"type": "arg", "name": "commit_message", "value": "Auto-merged pull request", "CIvars": []}]}]}]}
{"id": "36897557_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your Azure App Service Name>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "3693591_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.pubxml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p output\nCopy-Item -Path \"YourProjectName\\bin\\Release\\*\" -Destination output -Recurse\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Use curl or any FTP command to deploy files\ncurl -T \"output/*\" ftp://$FTP_SERVER/ --user $FTP_USERNAME:$FTP_PASSWORD\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3696629_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.composer/cache\nvendor\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/php-cs-fixer fix --dry-run --diff", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36973589_0", "jobs": [{"name": "change-base", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "BASE_FORK=\"new-owner:new-repo\" # Replace with the new base fork (owner:repo format)\nPR_NUMBER=${{ github.event.pull_request.number }}\n\necho \"Changing base fork of PR #$PR_NUMBER to $BASE_FORK\"\n\n# Use GitHub CLI to change the base of the pull request\ngh pr edit $PR_NUMBER --base $BASE_FORK\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36997898_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "choco install visualstudio2019community --params \"d/l\" -y\nchoco install visualstudio2019buildtools --params \"d/l\" -y\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild MySolution.sln /p:Configuration=Release /p:Platform=x64", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your tests are in a specific test project\n& \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\vsTest.console.exe\" .\\MyTestProject\\bin\\Release\\MyTestProject.dll\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "TestResults/**/*", "CIvars": []}]}]}]}
{"id": "37140588_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Load the original environment JSON file\noriginal_file='environment.json'\nnew_file='updated_environment.json'\neval \"$(jq -r '. | to_entries | map(\"export \\(.key)=\\(.value)\") | .[]' $original_file)\"\n\n# Build a new property based on an existing one\necho \"Building new property from an existing one\"\nNEW_PROPERTY=$(echo $EXISTING_PROPERTY | tr 'a-z' 'A-Z') # Example transformation, change as needed\n\n# Update the JSON with the new property\njq --arg newProp \"$NEW_PROPERTY\" '. + {new_property: $newProp}' $original_file > $new_file\necho \"New JSON generated with updated property\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cat updated_environment.json\n# Optionally validate JSON structure\njq empty updated_environment.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "chef-client --local-mode --json-attributes updated_environment.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37200820_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"Build failed.\"\n  exit 1\nelse\n  echo \"Build succeeded.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"Build failed.\"\n  echo \"::set-output name=status::failure\"\nelse\n  echo \"Build succeeded.\"\n  echo \"::set-output name=status::success\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/${{ github.repository }}/statuses/${{ github.sha }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "status", "value": "${{ steps.create_status.outputs.status }}", "CIvars": [{"name": "create_status.outputs.status", "expression": "steps.create_status.outputs.status", "type": "steps"}]}, {"type": "arg", "name": "context", "value": "continuous-integration", "CIvars": []}, {"type": "arg", "name": "description", "value": "Build Status from GitHub Actions", "CIvars": []}]}]}]}
{"id": "37222684_2", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37244768_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "tar -czvf artifacts.tar.gz path/to/build/artifacts", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "artifacts.tar.gz", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/sftp-deploy", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.SFTP_SERVER }}", "CIvars": [{"name": "SFTP_SERVER", "expression": "secrets.SFTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SFTP_USERNAME }}", "CIvars": [{"name": "SFTP_USERNAME", "expression": "secrets.SFTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SFTP_PASSWORD }}", "CIvars": [{"name": "SFTP_PASSWORD", "expression": "secrets.SFTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "local-dir", "value": "./artifacts", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/path/to/remote/dir", "CIvars": []}]}]}]}
{"id": "3726888_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "37280954_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37421734_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AzurePublishProfile }}", "CIvars": [{"name": "AzurePublishProfile", "expression": "secrets.AzurePublishProfile", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az webapp webjob run --name <YOUR_WEBJOB_NAME> --resource-group <YOUR_RESOURCE_GROUP> --subscription <YOUR_SUBSCRIPTION_ID>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37447223_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Hosting-Github-Action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "projectId", "value": "${{ secrets.FIREBASE_PROJECT_ID }}", "CIvars": [{"name": "FIREBASE_PROJECT_ID", "expression": "secrets.FIREBASE_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "debug", "value": true, "CIvars": []}]}]}]}
{"id": "37524939_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-l/ios-simulator-run", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory  # Replace with your project's directory\n# Assuming you are using Cocoapods, add other dependency managers where needed\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release | tee build.log\n# Replace with your actual workspace file and scheme name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"Your Script Log Message\" build.log; then\n  echo \"Script executed successfully\"\nelse\n  echo \"Script did not execute\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37535065_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install haml-lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "haml-lint --fail-level warning", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37604291_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Ensure your changes are committed to a new branch\ngit checkout -b my-feature-branch\n# If you need to commit any changes, include your commands here\n# e.g., echo \"My change\" >> README.md && git add README.md && git commit -m \"My change\"\n\n# Push the new branch to the repository\ngit push origin my-feature-branch\n\n# Create a pull request using GitHub CLI\ngh pr create --base target-branch --head my-feature-branch --title \"My new feature\" --body \"This PR adds a new feature.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37634680_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "scp-action/scp-action", "version": "v0.7.3", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_HOST }}", "CIvars": [{"name": "SERVER_HOST", "expression": "secrets.SERVER_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "private_key", "value": "${{ secrets.SERVER_SSH_KEY }}", "CIvars": [{"name": "SERVER_SSH_KEY", "expression": "secrets.SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "local", "value": ".", "CIvars": []}, {"type": "arg", "name": "remote", "value": "/path/on/server", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "v0.1.9", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_HOST }}", "CIvars": [{"name": "SERVER_HOST", "expression": "secrets.SERVER_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SERVER_SSH_KEY }}", "CIvars": [{"name": "SERVER_SSH_KEY", "expression": "secrets.SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "cd /path/on/server  # Change to the directory where your app is deployed\nnpm install --production  # Install any new dependencies\npm2 restart your-app-name || pm2 start your-app-name  # Restart your application\n", "CIvars": []}]}]}]}
{"id": "37662267_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -d \"_site\" ]; then\n  echo \"Build failed: _site directory does not exist.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "37720268_0", "jobs": [{"name": "sonarQube", "steps": [{"type": "gh_action", "cmd": "", "name": "perp4/checkout-perforce", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "p4_user", "value": "${{ secrets.P4_USER }}", "CIvars": [{"name": "P4_USER", "expression": "secrets.P4_USER", "type": "secret"}]}, {"type": "arg", "name": "p4_password", "value": "${{ secrets.P4_PASSWORD }}", "CIvars": [{"name": "P4_PASSWORD", "expression": "secrets.P4_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "p4_server", "value": "${{ secrets.P4_SERVER }}", "CIvars": [{"name": "P4_SERVER", "expression": "secrets.P4_SERVER", "type": "secret"}]}, {"type": "arg", "name": "p4_client", "value": "your-client-name", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -L -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip\nunzip sonar-scanner-cli-4.6.2.2472-linux.zip\nsudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner\necho 'export PATH=$PATH:/opt/sonar-scanner/bin' >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sonar-scanner \\\n  -Dsonar.projectKey=your-project-key \\\n  -Dsonar.sources=. \\\n  -Dsonar.host.url=$SONAR_HOST_URL \\\n  -Dsonar.login=$SONAR_TOKEN\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "377629_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, mysqli, zip, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to server...\"\n# Add your deployment commands here\n# For example using rsync or scp to copy files to your server\n# rsync -avz ./your-drupal-folder/ user@your-server:/path/to/deploy/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "drush cr\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37851566_0", "jobs": [{"name": "update-xcode-settings", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install xcodeproj\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd <path_to_your_xcode_project>   # Change this to your xcodeproj directory\n# Example commands to modify the project settings\n# Replace <YourProjectName.xcodeproj> with your actual project name\n# Replace with your desired settings changes\n\n# Change Bundle Identifier\nxcodeproj change --bundle_identifier com.yourcompany.yourapp <YourProjectName>.xcodeproj\n\n# Example of changing deployment target\nxcodeproj update --deployment_target '14.0' <YourProjectName>.xcodeproj \n\n# Any other commands to modify your xcodeproj can be added here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git diff  # View changes made to the project settings\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.email \"action@github.com\"\ngit config --global user.name \"GitHub Action\"\ngit add .\ngit commit -m \"Update Xcode project settings via GitHub Actions\" || echo \"No changes to commit\"\ngit push origin main  # Be careful with the branch name here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37877835_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sql-server", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "sql-server-version", "value": "2019-latest", "CIvars": []}, {"type": "arg", "name": "sa-password", "value": "${{ secrets.SQL_SA_PASSWORD }}", "CIvars": [{"name": "SQL_SA_PASSWORD", "expression": "secrets.SQL_SA_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d master -i ./scripts/setup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d YourDatabase -i ./scripts/schema_validation.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d YourDatabase -i ./scripts/install_tSQLt.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d YourDatabase -i ./scripts/run_tests.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d master -Q \"DROP DATABASE YourDatabase;\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37892093_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "redis", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M, memory_limit=512M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -m | grep redis", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37928638_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails test # or 'bundle exec rspec' for RSpec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "nohup bundle exec rails server -b 0.0.0.0 -p 3000 &\nsleep 10 # Give the server time to start\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -f http://localhost:3000/ || echo \"Server is not reachable\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37958241_0", "jobs": [{"name": "add_comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/{owner}/{repo}/issues/{issue_number}/comments", "CIvars": []}, {"type": "arg", "name": "owner", "value": "${{ github.repository_owner }}", "CIvars": [{"name": "repository_owner", "expression": "github.repository_owner", "type": "context"}]}, {"type": "arg", "name": "repo", "value": "${{ github.event.repository.name }}", "CIvars": [{"name": "event.repository.name", "expression": "github.event.repository.name", "type": "context"}]}, {"type": "arg", "name": "issue_number", "value": 1, "CIvars": []}, {"type": "arg", "name": "body", "value": "A new push has been made to the main branch! Check the latest changes.", "CIvars": []}]}]}]}
{"id": "37959631_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "wp core download --path=wordpress --allow-root\nwp config create --dbname=wordpress --dbuser=wordpress --dbpass=wordpress --path=wordpress --allow-root\nwp core install --url=http://localhost/wordpress --title=\"Test Site\" --admin_user=admin --admin_password=admin_password --admin_email=admin@example.com --path=wordpress --allow-root\nwp plugin install hello --activate --path=wordpress --allow-root\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38013127_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force # Assuming you're using Laravel; adjust if using another framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml # Adjust path if necessary\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "rsync -avz --delete ./ ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}\n\n# (Optional) Run post-deployment commands via SSH\nssh ${DEPLOY_USER}@${DEPLOY_HOST} \"cd ${DEPLOY_PATH} && php artisan migrate --force\" # Example for Laravel\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38018444_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "NVIDIA/setup-gpu", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cuda-version", "value": "11.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y libfftw3-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y cmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable  # Replace with your actual test executable name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38056382_0", "jobs": [{"name": "evaluate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r 'echo \"Hello, World!\\n\";' # Replace this line with your PHP code evaluation\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38085429_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38115378_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<your-app-name>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLIC_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLIC_PROFILE", "expression": "secrets.AZURE_PUBLIC_PROFILE", "type": "secret"}]}]}]}, {"name": "tfs-integration", "steps": [{"type": "shell_cmd", "cmd": "curl -u :$TFS_PAT $TFS_URL/_apis/wit/workitems?api-version=7.0\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X PATCH -H \"Content-Type: application/json\" -H \"Authorization: Basic $(echo -n \":$TFS_PAT\" | base64)\" \\\n-d '{\"fields\": {\"System.State\": \"Resolved\"}}' \\\n\"$TFS_URL/_apis/wit/workitems/$PULL_REQUEST_ID?api-version=7.0\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38116530_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -archivePath build/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportOptionsPlist ios/exportOptions.plist -exportPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nfastlane pilot upload YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "382482_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": 2008, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourDatabaseProject.sqlproj /p:Configuration=Release /p:OutputPath=bin\\Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S your-server-name -d your-database-name -U your-username -P your-password -i path\\to\\your\\script.sql -o output.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "sql-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "output.txt", "CIvars": []}]}]}]}
{"id": "38268119_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y packer vagrant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "packer validate packer-template.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "packer build packer-template.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant provision", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38269310_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/{owner}/{repo}/dispatches", "CIvars": []}, {"type": "arg", "name": "owner", "value": "<YOUR_ORG_OR_USERNAME>", "CIvars": []}, {"type": "arg", "name": "repo", "value": "<YOUR_MAIN_PROJECT>", "CIvars": []}, {"type": "arg", "name": "event_type", "value": "trigger-build", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{\"Authorization\": \"token ${{ secrets.GITHUB_TOKEN }}\"}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "38283074_0", "jobs": [{"name": "download_artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "request", "value": "{\n  \"owner\": \"OWNER_NAME\",  # Replace with repository owner\n  \"repo\": \"REPO_NAME\",    # Replace with repository name\n  \"per_page\": 1,\n  \"page\": 1\n}\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "latest_release_info=$(echo '${{ steps.latest_release.outputs.data }}' | jq -r '.[0]')\nasset_url=$(echo $latest_release_info | jq -r '.assets[] | select(.name == \"YOUR_ARTIFACT_NAME\") | .url')\necho \"Downloading artifact from: $asset_url\"\n\ncurl -L -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -H \"Accept: application/octet-stream\" -o YOUR_ARTIFACT_NAME $asset_url\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38294555_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "1.8", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r0adkll/upload-google-play", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcp-service-account-json", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_JSON", "expression": "secrets.GCP_SERVICE_ACCOUNT_JSON", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "mkdir -p $HOME/android-sdk\necho \"y\" | sdkmanager --sdk_root=$HOME/android-sdk \"platform-tools\" \"platforms;android-24\" \"build-tools;24.0.3\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"export ANDROID_HOME=$HOME/android-sdk\" >> $GITHUB_ENV\necho \"export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38297207_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extension", "value": "mbstring, xml, curl, gd", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, max_execution_time=300", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml --testdox", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\" # Add your deployment commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38312605_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' -resultBundlePath test-results\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -resultBundlePath test-results -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' -exportResults\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results", "CIvars": []}]}]}]}
{"id": "38337694_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing # Adjust this based on your framework or migration method\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testsuite=Unit # Ensure you are using PHPUnit for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint # Assuming you have a script defined in composer.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3834870_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit --testdox --coverage-html coverage --log-junit junit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "junit.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST JENKINS_URL/job/YOUR_JOB_NAME/build?token=YOUR_TOKEN\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38461314_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run generate-report", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cucumber-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/cucumber/report.html", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Cucumber Report", "CIvars": []}, {"type": "arg", "name": "body", "value": "Please find the attached Cucumber report.", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "attachments", "value": "path/to/your/cucumber/report.html", "CIvars": []}]}]}]}
{"id": "3854847_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name \"PnP.PowerShell\" -Force -AllowClobber\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"\n$wspPath = \"${{ secrets.SOLUTION_PATH }}\"\n\n# Connect to SharePoint\nConnect-PnPOnline -Url $SP_SITE_URL -Credentials (New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $SP_USERNAME,(ConvertTo-SecureString $SP_PASSWORD -AsPlainText -Force))\n\n# Deploy WSP solution\nAdd-PnPSolution -Path $wspPath -Overwrite\nDeploy-PnPSolution -Identity $wspPath -Scope WebApplication -Async\nDisconnect-PnPOnline\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38552628_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme archive -archivePath ./build/YourProject.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ./build/YourProject.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourProject-IOS-Build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/", "CIvars": []}]}]}]}
{"id": "38559218_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Adjust if you have a specific install command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint # Adjust if you have a specific lint command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "38567118_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace this with your build command, e.g., for Maven or Gradle\nmvn clean install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "redhat-actions/openshift-login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "openshift_url", "value": "${{ secrets.OPENSHIFT_URL }}", "CIvars": [{"name": "OPENSHIFT_URL", "expression": "secrets.OPENSHIFT_URL", "type": "secret"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.OPENSHIFT_TOKEN }}", "CIvars": [{"name": "OPENSHIFT_TOKEN", "expression": "secrets.OPENSHIFT_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "oc project my-project  # Replace with your OpenShift project name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace my-app with your app name and the registry with your OpenShift internal registry\nIMAGE=my-registry/my-project/my-app:latest\noc start-build my-app --from-dir=./target --follow  # Adjust as needed for your build setup\noc image tag my-registry/my-project/my-app:latest ${IMAGE}\noc treat-images-as my-app\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "oc rollout latest my-app  # Adjust according to your deployment strategy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38633008_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\n// Code to insert the array into the database\n\\$dataArray = json_decode(file_get_contents('php://input'), true); // Assuming the array is JSON encoded\n\n// Connect to the database\n\\$servername = getenv('DB_HOST');\n\\$username = getenv('DB_USER');\n\\$password = getenv('DB_PASS');\n\\$dbname = getenv('DB_NAME');\n\\$conn = new mysqli(\\$servername, \\$username, \\$password, \\$dbname);\n\n// Check connection\nif (\\$conn->connect_error) {\n    die('Connection failed: ' . \\$conn->connect_error);\n}\n\n// Insert each item from the array into the database\nforeach (\\$dataArray as \\$item) {\n    \\$sql = \\\"INSERT INTO your_table_name (column1, column2) VALUES ('\\\" . \\$item['key1'] . \\\"', '\\\" . \\$item['key2'] . \\\"')\\\";\n    if (\\$conn->query(\\$sql) !== TRUE) {\n        echo 'Error: ' . \\$sql . '\\\\n' . \\$conn->error;\n    }\n}\n\n\\$conn->close();\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38680366_1", "jobs": [{"name": "add-account", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./add_sql_account.ps1 -SqlServer $SQL_SERVER -SqlUsername $SQL_USERNAME -SqlPassword $SQL_PASSWORD -NewAccountName $NEW_ACCOUNT_NAME\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "3869307_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "tgns-io/test-results-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "test-results", "value": "**/TestResults/*.xml", "CIvars": []}, {"type": "arg", "name": "fail-on-error", "value": false, "CIvars": []}]}]}]}
{"id": "38728171_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y tk-dev   # Install Tk development library\ngem install bundler                # Install bundler if not already included\nbundle install                     # Install the project's dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38773233_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build -s . -d docs # Specify source and destination\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "38783657_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CI_ENVIRONMENT=production\" >> .env\necho \"SESSION_DRIVER=database\" >> .env\necho \"SESSION_COOKIE_NAME=ci_session\" >> .env\necho \"SESSION_SAVE_PATH=/path/to/shared/sessions\" >> .env\necho \"COOKIE_DOMAIN=.yourdomain.com\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd application1\n# Assuming you have a deployment script for application 1\n./deploy.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd application2\n# Assuming you have a deployment script for application 2\n./deploy.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'your-web-server' with the appropriate service then restart\nsudo service your-web-server restart\n# Optionally clear cache for both applications\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38797370_0", "jobs": [{"name": "create-review-app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhilmhdh/heroku-cli-action", "version": "v1.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "heroku auth:token < ${{ secrets.HEROKU_API_KEY }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku create $HEROKU_APP_NAME --remote heroku --team $HEROKU_TEAM\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/$HEROKU_APP_NAME.git\ngit push heroku `git rev-parse --verify HEAD`:refs/heads/master --force\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "destroy-review-app", "steps": [{"type": "gh_action", "cmd": "", "name": "akhilmhdh/heroku-cli-action", "version": "v1.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "heroku auth:token < ${{ secrets.HEROKU_API_KEY }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku apps:destroy --app $HEROKU_APP_NAME --confirm $HEROKU_APP_NAME\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38798121_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "chrislacy/setup-winrm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "winrm_host", "value": "${{ secrets.WINRM_HOST }}", "CIvars": [{"name": "WINRM_HOST", "expression": "secrets.WINRM_HOST", "type": "secret"}]}, {"type": "arg", "name": "winrm_user", "value": "${{ secrets.WINRM_USER }}", "CIvars": [{"name": "WINRM_USER", "expression": "secrets.WINRM_USER", "type": "secret"}]}, {"type": "arg", "name": "winrm_password", "value": "${{ secrets.WINRM_PASSWORD }}", "CIvars": [{"name": "WINRM_PASSWORD", "expression": "secrets.WINRM_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Copying files to the remote server...\"\nwinrm exec -host ${{ secrets.WINRM_HOST }} -u ${{ secrets.WINRM_USER }} -p ${{ secrets.WINRM_PASSWORD }} \"powershell -Command \\\"Copy-Item -Path '${{ github.workspace }}/${{ secrets.SOURCE_PATH }}/*' -Destination '${{ secrets.APPLICATION_PATH }}' -Recurse -Force\\\"\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Configuring IIS...\"\nwinrm exec -host ${{ secrets.WINRM_HOST }} -u ${{ secrets.WINRM_USER }} -p ${{ secrets.WINRM_PASSWORD }} \"powershell -Command \\\"Import-Module WebAdministration; Start-WebAppPool -Name 'YourAppPoolName';\\\"\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Restarting IIS...\"\nwinrm exec -host ${{ secrets.WINRM_HOST }} -u ${{ secrets.WINRM_USER }} -p ${{ secrets.WINRM_PASSWORD }} \"powershell -Command \\\"Restart-WebAppPool -Name 'YourAppPoolName';\\\"\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38848295_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install necessary dependencies, e.g., Maven, if using\n# If FitNesse is not in the repository, download and install FitNesse here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start FitNesse server and execute tests\n# The commands depend on your test setup and how you are running FitNesse\n./fitnesse-standalone.jar -r -p 8080 &  # Start backend\nsleep 10  # Wait for the server to start\ncurl \"http://localhost:8080?test&format=xml\" > results.xml  # Example to get results, adjust as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Parse results.xml to create a summary\nif grep -q '<failure>' results.xml; then\n  echo \"Tests failed\"\n  echo \"status=fail\" >> $GITHUB_ENV\nelse\n  echo \"Tests passed\"\n  echo \"status=success\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "FitNesse Slim Test Report: ${{ env.status }}", "CIvars": [{"name": "status", "expression": "env.status", "type": "env"}]}, {"type": "arg", "name": "body", "value": "The FitNesse Slim tests have completed with status: ${{ env.status }}.\nPlease check the results for more details.\nFind the results here: ${{ github.workspace }}/results.xml\n", "CIvars": [{"name": "status", "expression": "env.status", "type": "env"}, {"name": "workspace", "expression": "github.workspace", "type": "context"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "fitnesse-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "results.xml", "CIvars": []}]}]}]}
{"id": "38854335_0", "jobs": [{"name": "trigger-gocd", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Changed files:\"\ngit diff --name-only HEAD^ HEAD > changes.txt\ncat changes.txt\necho \"::set-output name=changes::$(cat changes.txt | tr '\\n' ',')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Changes: ${{ steps.get_changes.outputs.changes }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-script", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const { exec } = require('child_process');\nconst changes = '${{ steps.get_changes.outputs.changes }}';\nconst gocdUrl = 'https://your-gocd-server/go/api/pipelines/YOUR_PIPELINE_NAME/schedule'; // Update with your GoCD server and pipeline name\n\n// Make sure you have an API key or other auth method for GoCD if needed\nconst options = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/vnd.go.cd.v1+json',\n    'Authorization': 'Bearer YOUR_API_KEY', // Replace with your API Key or auth token\n  },\n  body: JSON.stringify({\n    materials: {\n      changes: changes // Pass changes to GoCD as needed\n    }\n  })\n};\n\nfetch(gocdUrl, options).then(response => {\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n}).then(data => {\n  console.log(data);\n}).catch(error => {\n  console.error('Error:', error);\n});\n", "CIvars": [{"name": "get_changes.outputs.changes", "expression": "steps.get_changes.outputs.changes", "type": "steps"}]}]}]}]}
{"id": "38873252_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --filter 'MyTestName' tests/MyTest.php", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38965600_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "39032462_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build && cmake --build . --target all", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nif [[ -z \"$GTEST_FILTER\" ]]; then\n  echo \"No gtest_filter provided, running all tests\"\n  ./your_non_gtest_test_binary\nelse\n  echo \"Running tests with gtest_filter: $GTEST_FILTER\"\n  ./your_non_gtest_test_binary --gtest_filter=\"$GTEST_FILTER\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39033889_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PR_TITLE=\"${{ github.event.pull_request.title }}\"\nPR_NUMBER=\"${{ github.event.pull_request.number }}\"\nPR_URL=\"${{ github.event.pull_request.html_url }}\"\nISSUE_TITLE=\"Related Issue for PR #${PR_NUMBER}: ${PR_TITLE}\"\nISSUE_BODY=\"This issue is automatically created to track discussions or tasks related to the pull request.\\n\\n* Pull Request: [${PR_TITLE}](${PR_URL})\\n* Created at: $(date)\\n\\nPlease provide your comments or feedback.\"\n\ngh issue create --title \"$ISSUE_TITLE\" --body \"$ISSUE_BODY\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39039136_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "salesforcecli/setup", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Authenticate to Salesforce\"\nsfdx force:auth:jwt:grant --clientid ${{ secrets.SF_CLIENT_ID }} --jwtkeyfile ${{ secrets.SF_JWT_KEY }} --username ${{ secrets.SF_USERNAME }} --setdefaultdevhubusername\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Apex tests\"\nsfdx force:apex:test:run --resultformat human --codecoverage --testlevel RunLocalTests --wait 10\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "payload='{\"text\":\"Salesforce deployment completed successfully and tests passed!\"}'\ncurl -X POST -H 'Content-type: application/json' --data \"$payload\" $SLACK_WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Sending email notification\"\necho -e \"Subject: $EMAIL_SUBJECT\\n\\n$EMAIL_BODY\" | sendmail -t $EMAIL_TO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39065342_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "The-Compiler/qt-actions", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "5.15", "CIvars": []}, {"type": "arg", "name": "tag", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "components", "value": "core\ngui\nwidgets\nnetwork\n# Add any other components your project might need\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential\nsudo apt-get install -y qt5-default # installs Qt dev packages if needed\n# List any other dependencies your project might require\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "qmake\nmake -j$(nproc)  # Use all the available CPU cores for faster build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your tests are configured as Qt Tests\nmake test  # Adjust as necessary based on your test setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "qt-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/built/artifacts", "CIvars": []}]}]}]}
{"id": "39128998_0", "jobs": [{"name": "phpspec", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M, memory_limit=512M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpspec run", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39152724_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run package", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y curl\ncurl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash # Install Azure CLI\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-version", "value": "2.0.81", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Logging in to SharePoint\"\nsudo npm install -g gulp-cli # Install Gulp CLI if you need it\nnpm install -g gulp # Install Gulp globally\n# Log in using the SharePoint Online login credentials\n# Adjust the command as per your app's authentication method\ngulp login --username $SP_USER --password $SP_PASSWORD\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to SharePoint\"\ngulp deploy --site-url $SP_SITE_URL # Adjust the command according to your deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39229797_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "node_modules", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-node-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mathieudutour/github-tag-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "release_br", "value": "main", "CIvars": []}, {"type": "arg", "name": "tag_prefix", "value": "", "CIvars": []}]}]}, {"name": "notifications", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action ", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "Build failed! Check your logs.", "CIvars": []}]}]}]}
{"id": "39346102_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "39376613_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.11.4", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}]}]}
{"id": "39390674_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "17", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn package", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "plugin-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/*.jar", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peterjgrainger/action-status", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "message", "value": "Build and Tests Passed", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peterjgrainger/action-status", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "failure", "CIvars": []}, {"type": "arg", "name": "message", "value": "Build or Tests Failed", "CIvars": []}]}]}]}
{"id": "39434048_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "mohitk05/send-email", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "recipient", "value": "recipient1@example.com, recipient2@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "New Commit on Main Branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new commit has been pushed to the main branch of the repository. Check it out!", "CIvars": []}, {"type": "arg", "name": "smtp_server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}]}]}]}
{"id": "39442012_0", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config user.name \"github-actions[bot]\"\ngit config user.email \"github-actions[bot]@users.noreply.github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up unnecessary files...\"\n# Example cleanup commands: \n# Remove all .log files\nfind . -name \"*.log\" -type f -delete\n\n# Remove all temporary files\nfind . -name \"*~\" -type f -delete\n\n# Remove build artifacts from the 'build/' directory\nrm -rf build/*\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/", "CIvars": []}, {"type": "arg", "name": "upload", "value": false, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git add .\ngit commit -m \"Cleanup: remove unnecessary files and artifacts\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39482964_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll doctor\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll serve --host 0.0.0.0 --port 4000 &\nsleep 5\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39491626_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying Application to Server\"\n# Add your deployment script or command here, e.g., rsync or using a deploy tool.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39505124_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"typo3_active_framework_extensions=your_value_here\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment script/command here\n# Example for SCP to a remote server\n# scp -r ./path/to/your/files user@yourserver:/path/to/deploy\necho \"Deploying TYPO3 application...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleanup actions after deployment can be added here.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3958892_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/installer", "version": "v0.2.0", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Install-Package -Name YourPackage -Source YourSource -Force\n", "name": "", "version": "", "shell": "pwsh"}, {"type": "shell_cmd", "cmd": "# Assume you have a build script (like build.ps1)\n.\\build.ps1\n", "name": "", "version": "", "shell": "pwsh"}, {"type": "shell_cmd", "cmd": "# Run tests if necessary\n.\\tests.ps1\n", "name": "", "version": "", "shell": "pwsh"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$hudsonUrl = 'http://your-hudson-server:8080/job/YOUR_JOB_NAME/build?token=YOUR_TOKEN_NAME'\nInvoke-WebRequest -Uri $hudsonUrl -Method POST\n", "name": "", "version": "", "shell": "pwsh"}, {"type": "shell_cmd", "cmd": "echo \"Deployment Successful!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39594781_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Custom Notification: New Push to Main", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nA new push has been made to the main branch.\n\nCommit details:\n- Commit message: ${{ github.event.head_commit.message }}\n- Pushed by: ${{ github.event.pusher.name }}\n\nBest regards,\nYour GitHub Actions Bot\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.pusher.name", "expression": "github.event.pusher.name", "type": "context"}]}]}]}]}
{"id": "39606292_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"VERSION=$(echo $GITHUB_REF | sed 's/refs\\/tags\\///')\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Building version: $VERSION\"\nsed -i \"s/<version-placeholder>/$VERSION/\" path/to/your/index.html  # Replace \u2018version-placeholder\u2019 in your HTML file\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./path/to/your/build/output", "CIvars": []}]}]}]}
{"id": "39636277_0", "jobs": [{"name": "setup-cloud-shell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud beta cloud-shell ssh \\\n--project=${{ secrets.GCP_PROJECT_ID }} \\\n--zone=${{ secrets.GCP_ZONE }} \\\n--command=\"echo 'Cloud Shell environment is ready!'\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources if necessary.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39636617_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"##vso[task.setvariable variable=SONAR_TOKEN;]${{ secrets.SONAR_TOKEN }}\"\necho \"Running TFS Build\"\n\n# Install Azure DevOps CLI if you need it\n# curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n# az extension add --name azure-devops\n\n# Example TFS build command\n# az pipelines run --name <pipeline-name> --project <project-name> --organization <organization-url>\n# Add your commands to trigger a TFS build here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-project-key", "value": "${{ secrets.SONAR_PROJECT_KEY }}", "CIvars": [{"name": "SONAR_PROJECT_KEY", "expression": "secrets.SONAR_PROJECT_KEY", "type": "secret"}]}, {"type": "arg", "name": "sonar-project-name", "value": "Your Project Name", "CIvars": []}, {"type": "arg", "name": "sonar-project-version", "value": "${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "sonar-scanner-options", "value": "-Dsonar.sources=. -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}", "CIvars": [{"name": "SONAR_HOST_URL", "expression": "secrets.SONAR_HOST_URL", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Build and analysis complete!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39714753_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "reactions/setup-android-sdk", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": 29, "CIvars": []}, {"type": "arg", "name": "target", "value": "android-29", "CIvars": []}, {"type": "arg", "name": "enable-android", "value": true, "CIvars": []}, {"type": "arg", "name": "emulator-options", "value": "-no-accel", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Creating multiple emulators\"\nsdkmanager \"system-images;android-29;default;x86_64\"\nemulator -avd test emu1 -no-audio -no-window -runnable\nemulator -avd test emu2 -no-audio -no-window -runnable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "emulator -avd emu1 -no-window -no-audio &\nemulator -avd emu2 -no-window -no-audio &\nadb wait-for-device\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.wipe=true\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "adb emu kill\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39717998_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite UnitTests", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "ssh user@your-server.com \"cd /path/to/your/codeigniter && git pull origin main && composer install\"\n# You can replace the above command with your deployment script if you have one\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to production was successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39741782_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39752360_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendgrid", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "example@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "This is a test email from GitHub Actions!", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello! This is a test email sent from GitHub Actions.", "CIvars": []}]}]}]}
{"id": "39752360_1", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendmail", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.gmail.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "example@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@gmail.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "This is a test email from GitHub Actions!", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello! This is a test email sent from GitHub Actions.", "CIvars": []}, {"type": "arg", "name": "secure", "value": true, "CIvars": []}]}]}]}
{"id": "39785596_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy_github_pages", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install --save gh-pages", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy_heroku", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.9.8", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}]}]}
{"id": "39786492_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.sendgrid.net", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 465, "CIvars": []}, {"type": "arg", "name": "username", "value": "apikey", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "GitHub Action Failed: ${{ github.event.workflow_run.name }}", "CIvars": [{"name": "event.workflow_run.name", "expression": "github.event.workflow_run.name", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Workflow **${{ github.event.workflow_run.name }}** has failed.\nYou can check the details at: ${{ github.event.workflow_run.html_url }}.\n", "CIvars": [{"name": "event.workflow_run.name", "expression": "github.event.workflow_run.name", "type": "context"}, {"name": "event.workflow_run.html_url", "expression": "github.event.workflow_run.html_url", "type": "context"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SENDGRID_SENDER_EMAIL }}", "CIvars": [{"name": "SENDGRID_SENDER_EMAIL", "expression": "secrets.SENDGRID_SENDER_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ secrets.RECIPIENT_EMAIL }}", "CIvars": [{"name": "RECIPIENT_EMAIL", "expression": "secrets.RECIPIENT_EMAIL", "type": "secret"}]}]}]}]}
{"id": "39972105_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up existing simulators...\"\nxcrun simctl shutdown all\nxcrun simctl erase all\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGN_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGN_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphoneos -archivePath output/YourApp.xcarchive archive CODE_SIGN_IDENTITY=\"\" CODE_SIGN_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath output/YourApp.xcarchive -exportPath output -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4000005_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "haskell/actions/setup-ghc", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ghc-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "cabal-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y darcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal update && cabal install --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40042811_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd services/my-microservice  # Change to your microservice directory\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd services/my-microservice\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd services/my-microservice\ndocker build -t my-microservice:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker tag my-microservice:latest myacr.azurecr.io/my-microservice:latest\ndocker push myacr.azurecr.io/my-microservice:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "my-microservice-app", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to Azure completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40117538_0", "jobs": [{"name": "redeploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "harmon758/postgres-action", "version": "v2.1.0", "shell": "bash", "with": [{"type": "arg", "name": "postgresql version", "value": "13", "CIvars": []}, {"type": "arg", "name": "postgres db", "value": "mydatabase", "CIvars": []}, {"type": "arg", "name": "postgres user", "value": "myuser", "CIvars": []}, {"type": "arg", "name": "postgres password", "value": "mypassword", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Creating a backup of the current database...\"\nPGPASSWORD=${{ secrets.DB_PASSWORD }} pg_dump -U ${{ secrets.DB_USER }} -h ${{ secrets.DB_HOST }} -F c -b -v -f \"./backup/backup_$(date +%Y%m%d_%H%M%S).dump\" mydatabase\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Restoring the database to version ${{ github.event.inputs.version }}...\"\nPGPASSWORD=${{ secrets.DB_PASSWORD }} pg_restore -U ${{ secrets.DB_USER }} -h ${{ secrets.DB_HOST }} -d mydatabase --if-exists \"./versions/${{ github.event.inputs.version }}/database_dump.dump\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up old backups and temporary files...\"\nrm -rf ./backup/*\nrm -rf ./versions/*\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40122790_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-reports", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "marocchino/sticky-pull-request-comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "## Test Results\nThe build has completed. Here are the test results:\n```\n${{ steps.upload-artifact.outputs.files }}\n```\nFor detailed reports, check [JUnit Reports](http://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).\n", "CIvars": [{"name": "upload-artifact.outputs.files", "expression": "steps.upload-artifact.outputs.files", "type": "steps"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "40137384_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [ -file 'DESCRIPTION' ]; then\n  Rscript -e 'install.packages(\"remotes\")'\n  Rscript -e 'remotes::install_deps(dependencies=TRUE)'\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'library(devtools)'\nRscript -e 'devtools::test()'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40212598_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "xcpretty/xcpretty-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_COVERAGE_FOLDER=coverage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you are using slather or another tool to generate reports\nslather coverage --scheme YourScheme --output-directory coverage/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming Slather outputs a coverage file in lcov format\necho \"coverage=$(cat coverage/lcov.info | grep -e 'FNF:' | cut -d':' -f2)\" >> $GITHUB_ENV\necho \"coverage_percentage=$(cat coverage/lcov.info | grep -e 'LF:' | cut -d':' -f2)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace YOUR_URL with the endpoint you're sending the data to\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"coverage\": \"${{ env.coverage }}\", \"coverage_percentage\": \"${{ env.coverage_percentage }}\"}' YOUR_URL\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40231075_1", "jobs": [{"name": "calculate_ci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages(c(\"stats\"))\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript calculate_profile_likelihood.R\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40232787_0", "jobs": [{"name": "php-cs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$HOME/.composer/vendor/bin/phpcs --standard=PSR12 --extensions=php src/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"PHP CodeSniffer detected coding standard issues.\";\n  exit 1;\nelse\n  echo \"No coding standard issues detected.\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40237720_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh-with-scripts", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "# Optional: Install additional modules if necessary\n# Install-Module -Name <ModuleName> -Force -Scope CurrentUser\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pwsh -File ./path/to/your_script.ps1  # Replace with your script's path\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pwsh -Command \"Invoke-Pester -Path ./tests\"  # Adjust path if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./results/test-results.xml", "CIvars": []}]}]}]}
{"id": "40265786_0", "jobs": [{"name": "count-loc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cloc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cloc /path/to/your/project --by-file --json --out=loc.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Lines of code in the project:\"\ncat loc.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40272770_0", "jobs": [{"name": "build-node", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-python", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python -m unittest discover", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40294314_0", "jobs": [{"name": "versioning", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Get the tag version e.g., v1.0.0\nTAG=${GITHUB_REF#refs/tags/}\n\n# Parse the version number\nNEW_VERSION=$(echo \"$TAG\" | awk -F. -v OFS=. '{$NF++; print}')\n\n# Update Info.plist for the new version\n/usr/libexec/xcrun plutil -replace CFBundleShortVersionString -string \"$NEW_VERSION\" \"${{ github.workspace }}/YourProject/Info.plist\"\n/usr/libexec/xcrun plutil -replace CFBundleVersion -string \"$NEW_VERSION\" \"${{ github.workspace }}/YourProject/Info.plist\"\n\n# Output the new version\necho \"New version is $NEW_VERSION\"\necho \"::set-output name=new_version::$NEW_VERSION\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"Version Increment Bot\"\ngit commit -am \"Increment version to ${{ steps.increment_version.outputs.new_version }}\"\ngit tag \"v${{ steps.increment_version.outputs.new_version }}\"\ngit push origin HEAD --tags\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=15.5' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v${{ steps.increment_version.outputs.new_version }}", "CIvars": [{"name": "increment_version.outputs.new_version", "expression": "steps.increment_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ steps.increment_version.outputs.new_version }}", "CIvars": [{"name": "increment_version.outputs.new_version", "expression": "steps.increment_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "body", "value": "Automatically generated release for version ${{ steps.increment_version.outputs.new_version }}", "CIvars": [{"name": "increment_version.outputs.new_version", "expression": "steps.increment_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}]}]}
{"id": "4031679_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:database:create --if-not-exists\nphp bin/console doctrine:schema:update --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console server:run &", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40377007_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mono/mono-build", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "mono-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y libgtk2.0-dev libgtk-3-dev  # or any additional dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xbuild /p:Configuration=Release /p:Platform=\"Any CPU\" MySolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xbuild /p:Configuration=Debug /p:Platform=\"Any CPU\" MySolution.Tests/MySolution.Tests.csproj", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40529895_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "ant build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build failed. Deleting the critical file...\"\nrm -f path/to/your/critical_file.txt # Specify the path you want to delete\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ ${{ steps.build.outcome }} == 'failure' ]]; then\n  echo \"Build failed. Please check the logs.\"\nelse\n  echo \"Build succeeded.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40581714_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://install.meteor.com/ | sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mongo/setup", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "mongo-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your-meteor-app # Navigate to your Meteor app's directory\nmeteor npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-meteor-app # Navigate to your Meteor app's directory\nmeteor test --driver-package meteortesting:mocha\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40586874_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "IMAGE_REPO_NAME=my-ecr-repo  # Change to your ECR repository name\nIMAGE_TAG=${{ github.sha }}\n\n# Build and push image\ndocker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\ndocker tag $IMAGE_REPO_NAME:$IMAGE_TAG ${{ steps.ecr-login.outputs.registry }}@$IMAGE_REPO_NAME:$IMAGE_TAG\ndocker push ${{ steps.ecr-login.outputs.registry }}@$IMAGE_REPO_NAME:$IMAGE_TAG\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/ecs-update-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "my-cluster", "CIvars": []}, {"type": "arg", "name": "service", "value": "my-service", "CIvars": []}, {"type": "arg", "name": "task-definition", "value": "my-task", "CIvars": []}, {"type": "arg", "name": "container-name", "value": "my-container", "CIvars": []}, {"type": "arg", "name": "image", "value": "${{ steps.ecr-login.outputs.registry }}@$IMAGE_REPO_NAME:$IMAGE_TAG", "CIvars": [{"name": "ecr-login.outputs.registry", "expression": "steps.ecr-login.outputs.registry", "type": "steps"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to ECS completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40631696_0", "jobs": [{"name": "commit_previous", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Get the last two commits hashes, assuming there are at least 2 commits\nprevious_commit=$(git rev-parse HEAD~1)\nlatest_commit=$(git rev-parse HEAD)\necho \"Previous commit: $previous_commit\"\necho \"Latest commit: $latest_commit\"\necho \"previous_commit=$previous_commit\" >> $GITHUB_ENV\necho \"latest_commit=$latest_commit\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git cherry-pick ${{ env.previous_commit }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\ngit commit -m \"Reapply previous commit before latest revisions\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main  # Ensure you're pushing to the correct branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40640795_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here, e.g. PHPUnit\nvendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$PRIVATE_KEY\" > private_key\nchmod 600 private_key\nscp -o StrictHostKeyChecking=no -i private_key -P $PORT -r ./* $USERNAME@$HOST:/path/to/deploy\nssh -o StrictHostKeyChecking=no -i private_key -p $PORT $USERNAME@$HOST 'cd /path/to/deploy && composer install --no-dev && php artisan migrate --force'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clear cache on the server after deployment\nssh -o StrictHostKeyChecking=no -i private_key -p $PORT $USERNAME@$HOST 'php artisan cache:clear'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40669149_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then \n  pod install \nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ~/Library/MobileDevice/Provisioning Profiles/my_provisioning_profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CERTIFICATE }}\" | base64 --decode > cert.p12\nsecurity create-keychain -p \"\" my_keychain\nsecurity import cert.p12 -k ~/Library/Keychains/my_keychain -P \"${{ secrets.CERTIFICATE_PASSWORD }}\" -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/my_keychain\nsecurity set-keychain-settings -t 3600 -l ~/Library/Keychains/my_keychain\nsecurity unlock-keychain -p \"\" ~/Library/Keychains/my_keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -configuration Release \\\n           -sdk iphoneos \\\n           CODE_SIGN_IDENTITY=\"iPhone Distribution\" \\\n           CODE_SIGN_PROVISIONING_PROFILE_SPECIFIER=\"my_provisioning_profile\" \\\n           CODE_SIGN_TEAM=\"${{ secrets.DEVELOPMENT_TEAM }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40710223_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40716124_0", "jobs": [{"name": "user1-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "user2-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r user2/requirements.txt", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest", "name": "", "version": "", "shell": "bash"}]}, {"name": "user3-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40773755_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install  # If using Bundler\n# Or install pods if necessary\ncd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane gym", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane scan", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "ios/build", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Something went wrong!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40794023_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to server...\"\n# Add your deploy script/commands here, such as rsync, scp, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40804183_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"VERSION=$(date +'%Y%m%d%H%M%S')\" >> $GITHUB_ENV\necho \"Creating release version $VERSION\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "assets/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v${{ env.VERSION }}", "CIvars": [{"name": "VERSION", "expression": "env.VERSION", "type": "env"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ env.VERSION }}", "CIvars": [{"name": "VERSION", "expression": "env.VERSION", "type": "env"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./dist/my-package.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "my-package-${{ env.VERSION }}.zip", "CIvars": [{"name": "VERSION", "expression": "env.VERSION", "type": "env"}]}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "40805429_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ./path/to/your/profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity set-keychain-settings -t 3600 -l build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.APP_STORE_CONNECT_API_KEY }}\" > ./path/to/your/fastlane_key.json\n# Similarly load certificates if needed, assuming they've been uploaded as secrets\n# and need to be decoded here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Change to your iOS project directory\nfastlane your_lane_name  # Specify the lane you want to run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40859075_2", "jobs": [{"name": "run-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Setting up environment...\"\necho \"Installing necessary packages (if any)...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./script.sh > output.txt\necho \"::set-output name=script_output::$(cat output.txt)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"## Output from the script:\"\necho \"${{ steps.run_shell_script.outputs.script_output }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40866859_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build", "CIvars": []}]}]}]}
{"id": "4087215_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deleting current working copy...\"\ngit clean -fdx  # Removes untracked files and directories\ngit reset --hard  # Resets the current branch to HEAD (removes all changes)\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here. Example using dotnet test\ndotnet test YourSolution.Tests/YourSolution.Tests.csproj  # Replace with your test project\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40872842_0", "jobs": [{"name": "jmeter", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y openjdk-11-jre  # install Java Runtime\nwget http://apache.mirrors.spacedump.net/jmeter/binaries/apache-jmeter-5.4.1.tgz  # Download JMeter\ntar -xzf apache-jmeter-5.4.1.tgz\nsudo mv apache-jmeter-5.4.1 /opt/jmeter\necho \"export PATH=$PATH:/opt/jmeter/bin\" >> $GITHUB_ENV  # Add JMeter to PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "jmeter -n -t ${{ github.workspace }}/path/to/your/test-plan.jmx -j jmeter.log -j jmeter_recording.log -l result.jtl\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40873282_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40878508_0", "jobs": [{"name": "merge_subtree", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config user.name \"${{ secrets.GITHUB_ACTOR }}\"\ngit config user.email \"${{ secrets.GITHUB_ACTOR }}@users.noreply.github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace these variables with your subtree repository details\nSUBTREE_REPO=\"<subtree-repository-url>\"\nSUBTREE_PATH=\"subfolder\"  # Path in your parent repo where you want to merge\nBRANCHES=\"$(git ls-remote --heads $SUBTREE_REPO | awk '{print $2}' | sed 's|refs/heads/||')\"\n\n# Loop through each branch in subtree repository and perform merge\nfor branch in $BRANCHES; do\n  git fetch $SUBTREE_REPO $branch:$branch\n  git merge --allow-unrelated-histories --no-commit $branch --squash\n  git checkout -b \"${branch}-merged\"  # Create a new branch for each merge\n  git commit -m \"Merged branch '$branch' from subtree repository\"\n  git checkout main  # Switch back to the main branch or desired target branch\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Push the merged branches to the parent repository\ngit push origin --all\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40883873_0", "jobs": [{"name": "list-reverts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch --prune --unshallow\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Fetching all previous git reverts...\"\ngit log --grep='^Revert \"' --pretty=format:'%h - %an, %ad : %s' --date=short\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40892804_0", "jobs": [{"name": "update-branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config user.name \"github-actions\"\ngit config user.email \"github-actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git fetch origin main", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout $GITHUB_REF\ngit rebase origin/main\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin $GITHUB_REF --force-with-lease\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Branch updated successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40893008_0", "jobs": [{"name": "notify-reviewers", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"A pull request has been updated. Reviewing is required.\"\n\n# Set up a notification method (e.g., using Slack, Email, or any other integration)\n# For demonstration, we'll just output a message\necho \"Notify the reviewers about this update.\"\n\n# If you have a Slack webhook or API, you can uncomment and modify the following lines\n# curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"Pull request #${{ github.event.pull_request.number }} has been updated. Please review.\"}' YOUR_SLACK_WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests to ensure everything is working after the update.\"\n# Your test command here (e.g., npm test, pytest, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40895903_0", "jobs": [{"name": "escape-sed", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "#!/bin/bash\n# A simple example to demonstrate escaping special characters in sed\n\n# Example input string containing special characters\ninput_string='This is a test string with special characters: $ ^ & * ( ) + , . /'\n\necho \"Original String: $input_string\"\n\n# Escape special characters for sed\nescaped_string=$(echo \"$input_string\" | sed 's/[&/\\]/\\\\&/g; s/$/\\\\/')\n\necho \"Escaped String: $escaped_string\"\n\n# Example of using the escaped string in sed\nmodified_string=$(echo \"$escaped_string\" | sed 's/test/modified/g')\necho \"Modified String: $modified_string\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40897113_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "4089731_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build succeeded! View it at http://localhost:your-local-port\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Sending email notification...\"\n# Install mail utility (for example s-nail or mail)\nsudo apt-get install -y mailutils\necho \"Build succeeded! View it at http://localhost:your-local-port\" | mail -s \"CCNet Build Notification\" \"${NOTIFY_EMAIL}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build failed! Please check the logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40900543_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40901248_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "production-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./dist", "CIvars": []}]}]}]}
{"id": "40904529_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean install -Pincremental -Dmaven takiri-lifecycle-plugin:1.0.0\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40909369_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --watch=false --bail", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build --prod", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "dist/", "CIvars": []}]}]}]}
{"id": "40919258_0", "jobs": [{"name": "record_timestamps", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the last three commits on the main branch, assuming git pull merges them\ntimestamps=$(git log --since=\"3 weeks ago\" --pretty=format:'%ad' --date=iso | head -n 3)\necho \"Last three pull timestamps:\"\necho \"$timestamps\"\n\n# Save timestamps to a file or output variable\necho \"$timestamps\" > pull_timestamps.txt\necho \"::set-output name=timestamps::$timestamps\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The last three timestamps for git pull are:\"\ncat pull_timestamps.txt\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40923474_0", "jobs": [{"name": "cherry-pick", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --local user.name \"github-actions\"\ngit config --local user.email \"github-actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -z \"${{ github.event.inputs.commit_hash }}\" ]; then\n  echo \"Commit hash is required.\"\n  exit 1\nfi\n\necho \"Cherry-picking commit ${{ github.event.inputs.commit_hash }}...\"\ngit cherry-pick ${{ github.event.inputs.commit_hash }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Pushing changes...\"\ngit push origin HEAD\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40923534_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"action@example.com\"  # Change this to a suitable email\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add remote-repo $REMOTE_REPO\ngit fetch remote-repo $BRANCH\ngit merge remote-repo/$BRANCH --allow-unrelated-histories -m \"Merge remote-tracking branch 'remote-repo/$BRANCH'\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin HEAD:main  # Change to your target branch if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40930875_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SERVER_PASSWORD }}", "CIvars": [{"name": "SERVER_PASSWORD", "expression": "secrets.SERVER_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "./publish/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.DEPLOY_PATH }}", "CIvars": [{"name": "DEPLOY_PATH", "expression": "secrets.DEPLOY_PATH", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "pnp/pnp-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "Import-Module WebAdministration\nRestart-WebAppPool -Name \"${{ secrets.WEBAPP_NAME }}\"\n", "CIvars": [{"name": "WEBAPP_NAME", "expression": "secrets.WEBAPP_NAME", "type": "secret"}]}]}]}]}
{"id": "4093336_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/<your-heroku-app>.git\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40939608_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to dev server\"\n# Set permissions for the private key\necho \"$PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\n\n# Use SSH to deploy the code (Adjust the deployment command as needed)\nscp -rq -i private_key.pem ./dist/* $USER@$HOST:/path/to/your/dev/server/directory/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40947458_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Set the desired version\nVERSION=1.0.0 # Change this to your desired version\n\ndotnet pack --configuration Release --output ./output --version-suffix $VERSION\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your TFS Service URL and NuGet feed\nTFS_URL=\"https://your-tfs-url/tfs/DefaultCollection/\"\nNUGET_FEED=\"your-feed-name\"\nNUGET_API_KEY=\"${{ secrets.NUGET_API_KEY }}\" # Store API key in GitHub secrets\n\n# Push the package\ndotnet nuget push ./output/*.nupkg --source \"$TFS_URL$NUGET_FEED\" --api-key \"$NUGET_API_KEY\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40952029_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('remotes')\nremotes::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'devtools::check()'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'devtools::test()'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40957270_0", "jobs": [{"name": "check_commits", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch --prune --unshallow  # Fetch all commits\ngit checkout ${{ github.head_ref || github.ref_name }}  # Checkout the current branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Listing all commits:\"\n# List the commits; Adjust `--no-merges` if you want to include merge commits\ngit log --pretty=format:\"%h - %an, %ar : %s\" --no-merges\n\n# Here you can add any checks you want for each commit\n# For example, you might perform checks on commit messages or other criteria.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40963418_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y libboost-all-dev  # Example: install Boost dependencies\n# Add more dependencies if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build . --config Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncpack .  # Create package using CPack\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "C++-Release", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.zip", "CIvars": []}]}]}]}
{"id": "40965136_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, intl, curl, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/YOUR_HEROKU_APP_NAME.git  # Replace with your Heroku app name\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40965562_0", "jobs": [{"name": "discovery", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install requests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running discovery script...\"\npython discovery_script.py\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "discovery-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "discovery_results.txt", "CIvars": []}]}]}]}
{"id": "40979457_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your build commands here\necho \"Building the project...\"  # replace with actual build steps\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add .\ngit commit -m \"Deploy changes from GitHub Actions\" || echo \"No changes to commit\"\ngit push origin main  # Replace 'main' with your target branch if different\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment Successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40980525_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"\n# Insert your deployment command here (e.g., firebase deploy, aws s3 sync, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40981541_0", "jobs": [{"name": "take-screenshot-and-send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "node -e \"\n  const puppeteer = require('puppeteer');\n  (async () => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto('https://example.com');  # Change URL as needed\n    await page.screenshot({ path: 'screenshot.png' });\n    await browser.close();\n  })();\n\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "node -e \"\n  const nodemailer = require('nodemailer');\n  const fs = require('fs');\n\n  const transporter = nodemailer.createTransport({\n    service: 'gmail',  // Or other service\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASS,\n    },\n  });\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: process.env.EMAIL_TO,\n    subject: 'Automated Screenshot',\n    text: 'Here is an automated screenshot.',\n    attachments: [\n      {\n        filename: 'screenshot.png',\n        content: fs.readFileSync('screenshot.png')\n      }\n    ],\n  };\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return console.log(error);\n    }\n    console.log('Email sent: ' + info.response);\n  });\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4098239_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cmd.exe /c \"path\\to\\your\\prebuild_script.bat\"\n# or directly execute commands\ncmd.exe /c \"echo Prebuild task is executed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmd.exe /c \"dotnet build your_project.sln\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmd.exe /c \"dotnet test your_project.sln\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "path\\to\\build\\artifacts", "CIvars": []}]}]}]}
{"id": "40983488_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref_name }}", "CIvars": [{"name": "ref_name", "expression": "github.ref_name", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload-assets", "value": "./path-to-your-artifact", "CIvars": []}]}]}]}
{"id": "40984170_0", "jobs": [{"name": "create_branches", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "submodules", "value": true, "CIvars": []}, {"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config user.name \"github-actions\"\ngit config user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Define your branch names\nbranches=(\"branch-a\" \"branch-b\" \"branch-c\")\n\nfor branch in \"${branches[@]}\"; do\n  # Create a new branch\n  git checkout -b \"${branch}\"\n\n  # Modify files or make necessary changes for the submodules if needed\n  # You can run commands here like `cd path/to/submodule && git checkout some-branch` \n\n  # Add changes and commit\n  git add .\n  git commit -m \"Creating branch ${branch}\"\n\n  # Push the branch to remote\n  git push origin \"${branch}\"\n\n  # Switch back to the main branch (e.g., main or master)\n  git checkout main\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40984296_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Include your deployment script here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40984731_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"A push event has occurred!\"\necho \"Commit: ${{ github.sha }}\"\necho \"Pushed by: ${{ github.actor }}\"\necho \"Branch: ${{ github.ref }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40985584_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "8", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40988679_0", "jobs": [{"name": "clear_clipboard", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install xclip or xsel if not installed\nssh -o StrictHostKeyChecking=no -i \"$SSH_PRIVATE_KEY\" \"$REMOTE_USER@$REMOTE_HOST\" << 'EOF'\n  if ! command -v xclip &> /dev/null\n  then\n    sudo apt-get update\n    sudo apt-get install -y xclip\n  fi\n\n  # Clear the clipboard\n  xclip -selection clipboard /dev/null\n  echo \"Clipboard cleared.\"\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40989766_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.npm", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}]}, {"name": "android", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/android/build.gradle') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "yes | sdkmanager --licenses\nsdkmanager \"platform-tools\" \"platforms;android-30\" \"build-tools;30.0.3\"  # Specify your platform version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd android\n./gradlew assembleDebug testDebugUnitTest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "ios", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.cocoapods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-cocoapods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40998061_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout ${{ github.event.pull_request.base.ref }}\ngit merge --no-ff ${{ github.event.pull_request.head.ref }}\n# Add additional commands to handle merging if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41005361_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo installer -pkg /Library/Developer/MonoTouch/SDKs/Xamarin.Android.xpkg -target /\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet restore MyXamarinAndroidApp.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build MyXamarinAndroidApp.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test MyXamarinAndroidApp.Tests/MyXamarinAndroidApp.Tests.csproj --configuration Release --no-build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish MyXamarinAndroidApp/MyXamarinAndroidApp.csproj -c Release -o output", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41005458_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x ./gradlew", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41014280_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourProject.wixproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.wixproj /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "WixInstaller", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourOutputDirectory/*.msi", "CIvars": []}]}]}]}
{"id": "41017243_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to live server...\"\nrsync -avz --delete ./build/ $LIVE_SERVER_USER@$LIVE_SERVER_HOST:$LIVE_SERVER_PATH/\n# Alternatively, you can use your preferred deployment tool here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to live server completed successfully!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41028185_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "brew install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Debug CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Retrying tests due to timeout...\"\nxcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath ./path/to/output/YourApp.xcarchive CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/output/YourApp.xcarchive", "CIvars": []}]}]}]}
{"id": "41043037_0", "jobs": [{"name": "email-notification", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Sending email notification about Xcode bot status...\"\necho \"\nSubject: Xcode Bot Notification\n\nHi Team,\n\nA new push has been detected in the main branch. Please check the Xcode server bot for any build notifications or alerts.\n\nRegards,\nYour CI System\n\" | msmtp --host=\"$SMTP_SERVER\" --port=\"$SMTP_PORT\" --auth=on --user=\"$SMTP_USERNAME\" --passwordeval='echo $SMTP_PASSWORD' --from=\"$FROM_EMAIL\" \"$TO_EMAIL\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4104517_0", "jobs": [{"name": "install_dependencies", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}]}, {"name": "run_tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Add your deployment script/command here\nnpm run deploy # for example only\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41045548_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"action@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'your-branch-name' with the branch you want to merge changes into\ngit checkout your-branch-name\ngit merge origin/master --no-ff -m \"Merge changes from master\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin your-branch-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41047471_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Build your HTML assets and deploy them\n# This can include copying files to a specific directory for deployment\nmkdir -p docs  # Create a directory to hold your built HTML files\ncp -R build/* docs/  # Copy built files to docs directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs", "CIvars": []}]}]}]}
{"id": "4105599_0", "jobs": [{"name": "validate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint  # Assumes you have a lint script in your package.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Assumes you have tests configured in your package.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Assumes you have a build script in your package.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your specific validation commands here\necho \"Validating the deliverable...\"\n# Example: Check for the existence of built files\nif [ -f \"dist/my-deliverable.zip\" ]; then\n  echo \"Deliverable is valid.\"\nelse\n  echo \"Deliverable is missing!\" && exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41057333_0", "jobs": [{"name": "pull_commits", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace these commit hashes with the commits you want to retrieve.\ncommit1=\"commit_hash1\"\ncommit2=\"commit_hash2\"\n\n# Fetch the commits. Adjust the refspec as necessary.\ngit fetch origin ${commit1} ${commit2}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Checkout the first commit\ngit checkout ${commit1}\n\n# Do something with the first commit\necho \"Checked out the first commit: ${commit1}\"\n\n# Optionally, you can check out the second commit\ngit checkout ${commit2}\necho \"Checked out the second commit: ${commit2}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41057768_0", "jobs": [{"name": "check-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [[ -n \"$(git status --porcelain)\" ]]; then\n  echo \"The repository has changes after clone.\";\n  git status --porcelain; # List changes\n  exit 1;\nelse\n  echo \"The repository is clean.\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41063057_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourProject.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourProject.sln --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish YourProject.sln --configuration Release --output ./output --no-build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "dotnet-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output", "CIvars": []}]}]}]}
{"id": "41067573_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # or 'yarn install', depending on your package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # or your specific build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"${{ secrets.GITHUB_ACTOR }}\"\ngit config --global user.email \"${{ secrets.GITHUB_EMAIL }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'dist' with your build output directory, if it's different.\ngit add -f dist\ngit commit -m \"Deploy to GitHub Pages - $(date +'%Y-%m-%d %H:%M:%S')\"\ngit push -f https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4107222_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "17", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean install -Dmaven.password=${{ secrets.MAVEN_PASSWORD }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example of how you might inject properties into your Spring application\n# E.g., set environment variables or write to application.properties\necho \"app.secret=${{ secrets.APP_SECRET }}\" >> src/main/resources/application.properties\necho \"app.username=${{ secrets.APP_USERNAME }}\" >> src/main/resources/application.properties\n# Add other properties as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Deploy your Spring application here\n# This could be using a command like `mvn spring-boot:run` or deploying to a server\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41076763_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41087206_0", "jobs": [{"name": "assign_reviewers", "steps": [{"type": "gh_action", "cmd": "", "name": "tirozzi/assign-reviewers-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "user1,user2", "CIvars": []}, {"type": "arg", "name": "assignees", "value": "user3", "CIvars": []}]}]}, {"name": "add_labels", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const context = github.context;\nconst prNumber = context.payload.pull_request.number;\nconst octokit = github.getOctokit(process.env.GITHUB_TOKEN);\n\nawait octokit.issues.addLabels({\n  ...context.repo,\n  issue_number: prNumber,\n  labels: ['needs review']\n});\n", "CIvars": []}]}]}, {"name": "notify_team", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const context = github.context;\nconst prUrl = context.payload.pull_request.html_url;\nconst message = `A new pull request has been created: ${prUrl}. Please review.`;\nconst team = 'your-team-slug'; // Replace with actual team slug\n\nawait github.teams.createDiscussion({\n  team_slug: team,\n  title: 'New PR for Review',\n  body: message\n});\n", "CIvars": []}]}]}]}
{"id": "41087725_0", "jobs": [{"name": "push-file", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the folder and file name\nFOLDER_NAME=\"my_folder\"\nFILE_NAME=\"my_file.txt\"\n\n# Create the directory if it does not exist\nmkdir -p \"$FOLDER_NAME\"\n\n# Write something to the file\necho \"Hello, World!\" > \"$FOLDER_NAME/$FILE_NAME\"\n\n# Add changes to git\ngit add \"$FOLDER_NAME/$FILE_NAME\"\n\n# Commit the changes\ngit commit -m \"Add $FILE_NAME in $FOLDER_NAME\"\n\n# Push changes to the repository\ngit push origin main  # Change 'main' to your target branch if different\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optionally, clean up if desired\necho \"Cleanup done.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41091337_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.email \"action@github.com\"\ngit config --global user.name \"GitHub Action\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify the tag you want to merge\nTAG_NAME=${GITHUB_REF##*/}\nMAIN_BRANCH=main  # Change this to your branch name if necessary\n\n# Switch to the main branch\ngit checkout $MAIN_BRANCH\n\n# Reset the main branch to the tag (overwriting all changes)\ngit reset --hard $TAG_NAME\n\n# Push the changes back to the repository\ngit push origin $MAIN_BRANCH --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41095473_0", "jobs": [{"name": "deploy-drone", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build -t drone/drone:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${DOCKER_PASSWORD}\" | docker login -u \"${DOCKER_USERNAME}\" --password-stdin\ndocker push drone/drone:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Stopping existing Drone server if any\ndocker stop drone || true\ndocker rm drone || true\n\n# Starting the Drone server\ndocker run -d \\\n  -p 80:80 \\\n  -p 443:443 \\\n  --name drone \\\n  -e DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID} \\\n  -e DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET} \\\n  -e DRONE_SERVER_HOST=${DRONE_SERVER_HOST} \\\n  -e DRONE_RPC_SECRET=${DRONE_RPC_SECRET} \\\n  drone/drone:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Drone server deployed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41097556_0", "jobs": [{"name": "check-master-sync", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch origin master\n\n# Check for differences between local and remote master\nif ! git diff --quiet master origin/master; then\n  echo \"Local master and remote master are different.\"\n  exit 1\nelse\n  echo \"Local master is in sync with remote master.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Validation completed. Local and remote master branches are in sync.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41100079_0", "jobs": [{"name": "sync", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"github-actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git fetch origin", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "BASE_BRANCH=\"main\" # Change to your base branch if necessary\n# Get the list of branches that start with \"feature/\"\nfor BRANCH in $(git branch -r | grep -v '\\->' | grep -E \"origin/feature/|origin/bugfix/\" | sed 's/origin\\///'); do\n  # Checkout to branch\n  git checkout $BRANCH\n  # Merge updates from the base branch\n  git pull origin $BASE_BRANCH\n  # Push the changes back to the branch\n  git push origin $BRANCH\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41100396_0", "jobs": [{"name": "generate-javadoc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install javadoc:javadoc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "target/site/apidocs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "41100396_1", "jobs": [{"name": "generate-javadoc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew clean build javadoc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "build/docs/javadoc", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "41105026_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package -Dcustom.flag=${{ env.CUSTOM_FLAG }} -Dcustom.value=${{ env.CUSTOM_VALUE }}", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "custom-war", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/*.war", "CIvars": []}]}]}]}
{"id": "41116390_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint  # replace with your lint command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # replace with your build command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41117935_0", "jobs": [{"name": "delete-canceled-builds", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Fetch all canceled builds\nresponse=$(curl -s -u \"${TEAMCITY_API_TOKEN}:\" \"${TEAMCITY_SERVER_URL}/app/rest/builds?status=canceled\")\n\n# Extract build IDs\nbuild_ids=$(echo \"$response\" | jq -r '.build[] | .id')\n\n# Check if there are builds to delete\nif [ -z \"$build_ids\" ]; then\n  echo \"No canceled builds found.\"\n  exit 0\nfi\n\n# Delete each canceled build\nfor build_id in $build_ids; do\n  echo \"Deleting build ID: $build_id\"\n  curl -s -u \"${TEAMCITY_API_TOKEN}:\" -X DELETE \"${TEAMCITY_SERVER_URL}/app/rest/builds/id:$build_id\"\ndone\n\necho \"All canceled builds have been deleted.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "411218_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update && sudo apt-get install -y g++ cmake libunit++-dev", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable_name_here  # Replace with the name of your test executable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nif [ -f test_results.xml ]; then\n  echo \"Uploading test results...\"\n  # Replace with your method of uploading results, if needed\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41126635_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "until pg_isready -h localhost -p 5432 -U myuser; do\n  echo \"Waiting for database to be ready...\"\n  sleep 5\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run migrate # Replace with your migration command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n# Add commands to cleanup if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41126886_0", "jobs": [{"name": "run-custom-behavior", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running custom behavior for new release...\"\n# Insert additional commands for your custom behavior here\n# For example, you could build your project, deploy, notify, etc.\nnpm run build   # Assuming you have a build script in your package.json\n# Replace the above line with any custom command you need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Release ${GITHUB_REF#refs/tags/} has been published!\" > release-info.txt\ncat release-info.txt\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41129648_0", "jobs": [{"name": "sync", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "username/source_repo", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.SOURCE_REPO_TOKEN }}", "CIvars": [{"name": "SOURCE_REPO_TOKEN", "expression": "secrets.SOURCE_REPO_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "source", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "username/destination_repo", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.DESTINATION_REPO_TOKEN }}", "CIvars": [{"name": "DESTINATION_REPO_TOKEN", "expression": "secrets.DESTINATION_REPO_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "destination", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cp -r source/* destination/  # Adjust this according to your sync logic\ncd destination\ngit config user.name \"Your Name\"  # Replace with your name\ngit config user.email \"your_email@example.com\"  # Replace with your email\ngit add .\ngit commit -m \"Sync changes from source repository\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd destination\ngit push origin main  # Push to the appropriate branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41133548_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y texlive-latex-recommended texlive-fonts-recommended texlive-plain-generic texlive-latex-extra\nsudo apt-get install -y texlive-binaries\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd path/to/your/latex/project  # Change to the directory containing your .tex files\npdflatex your_document.tex  # Replace `your_document.tex` with your main .tex file\npdflatex your_document.tex  # Run twice to resolve references (if necessary)\n# Add `bibtex` step here if you are using a bibliography\napt-get install -y biber\nbiber your_document  # Uncomment if using biber\npdflatex your_document.tex\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "files", "value": "path/to/your/latex/project/your_document.pdf", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "files", "value": "path/to/your/latex/project/your_document.pdf", "CIvars": []}]}]}]}
{"id": "41133687_0", "jobs": [{"name": "checkout_branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "your-target-branch", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Contents of the repository:\"\nls -al\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41143012_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y build-essential cmake", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41145041_0", "jobs": [{"name": "list-files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Modified files in the pull request:\"\ngit diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo \"No files modified.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41146692_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}, {"type": "arg", "name": "cache", "value": "npm", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}, {"name": "summary", "steps": [{"type": "shell_cmd", "cmd": "echo \"Build Status: ${{ needs.build.outcome }}\"\necho \"Lint Status: ${{ needs.lint.outcome }}\"\necho \"Deploy Status: ${{ needs.deploy.outcome }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41152528_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo xcode-select -s /Applications/Xcode.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -archivePath ${{ github.workspace }}/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/YourApp.xcarchive -exportPath ${{ github.workspace }}/YourApp -exportOptionsPlist YourApp/ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/YourApp/*.ipa\n${{ github.workspace }}/YourApp/*.xcarchive\n", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "41165034_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"SECRET_TOKEN=${{ secrets.SECRET_TOKEN }}\" >> $GITHUB_ENV\necho \"ANOTHER_SECRET=${{ secrets.ANOTHER_SECRET }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-client", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building client with secret ...\"\n# Command to build the client, e.g. npm install && npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Publishing client ...\"\n# Command to publish the client, e.g. npm publish\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-server", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building server with secret ...\"\n# Command to build the server, e.g. npm install && npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Publishing server ...\"\n# Command to publish the server, e.g. npm publish\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41170069_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t my-image:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run --rm my-image:latest /bin/bash -c \"your-test-command\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "411751_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41175985_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"action@github.com\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41176227_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ matrix.db }}\" == \"postgresql\" ]; then\n  echo \"Creating database for PostgreSQL...\"\n  cp config/database.yml.postgresql config/database.yml\nelse\n  echo \"Creating database for SQLite...\"\n  cp config/database.yml.sqlite3 config/database.yml\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or your test framework of choice, e.g., rails test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41179296_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install SSH client\nsudo apt-get install -y openssh-client\n\n# Setup SSH key\necho \"$SSH_KEY\" > private_key\nchmod 600 private_key\nssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts\n\n# Execute deployment commands\nssh -i private_key $SERVER_USER@$SERVER_IP \"mkdir -p $SERVER_PATH && rm -rf $SERVER_PATH/* && cp -r ./build/* $SERVER_PATH/\" || exit 1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41188190_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "brew install mono-libgdiplus\nsudo ln -s /usr/local/bin/mono /usr/bin/mono\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln # Ensure your solution file is referenced correctly\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Debug -sdk iphonesimulator -derivedDataPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your test project name\nmono packages/Xamarin.UITest.*/tools/UITestRunner.exe -app build/YourApp.app -uitest YourUITestProject.dll\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your actual app name and owner\ncurl -X POST https://api.appcenter.ms/v0.1/apps/YOUR_OWNER/YOUR_APP_NAME/test_suites \\\n     -H 'Content-Type: application/json' \\\n     -H \"X-API-Token: $APPCENTER_API_TOKEN\" \\\n     -d '{\n       \"type\": \"uitest\",\n       \"version\": \"v1\",\n       \"is_auto_testing_enabled\": true,\n       \"is_ui_testing_enabled\": true\n     }'\n\n# Now upload the .apk or .app file and .dll test files\ncurl -X POST https://api.appcenter.ms/v0.1/apps/YOUR_OWNER/YOUR_APP_NAME/test_suites/YOUR_TEST_SUITE_ID/test_runs \\\n     -H \"X-API-Token: $APPCENTER_API_TOKEN\" \\\n     -F \"app=@build/YourApp.app\" \\\n     -F \"tests=@YourUITestProject.dll\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41192900_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "17", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn deploy -Dregistry=https://maven.pkg.github.com/OWNER/REPOSITORY -DskipTests", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4119566_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn package -DskipTests -Drepackage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "fat-jar", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/*.jar", "CIvars": []}]}]}]}
{"id": "41196431_0", "jobs": [{"name": "run-monkey", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get -qq install -y openjdk-11-jdk\nsudo apt-get install -y unzip curl\ncurl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip\nmkdir -p $HOME/android/cmdline-tools\nunzip sdk-tools.zip -d $HOME/android/cmdline-tools\nyes | sdkmanager --sdk_root=$HOME/android --licenses\nsdkmanager --sdk_root=$HOME/android \"platform-tools\" \"platforms;android-30\" # Set target SDK version as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug # Adjust as needed for your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "adb start-server\nadb install app/build/outputs/apk/debug/app-debug.apk # Update the path as per your APK\nMONKEY_OUTPUT=$(adb shell monkey -p com.your.package.name -c android.intent.category.LAUNCHER 1)\necho \"Monkey output: $MONKEY_OUTPUT\"\nMONKEY_EXIT_CODE=$?\necho \"Monkey exit code: $MONKEY_EXIT_CODE\"\necho \"::set-output name=monkey_exit_code::$MONKEY_EXIT_CODE\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.run-monkey.outputs.monkey_exit_code }}\" -ne 0 ]]; then\n  echo \"Monkey tool failed with exit code ${{ steps.run-monkey.outputs.monkey_exit_code }}\"\n  exit 1\nelse\n  echo \"Monkey tool ran successfully.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41203372_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install GitHub CLI if not already installed\nif ! command -v gh &> /dev/null; then\n  echo \"GitHub CLI not found, installing...\"\n  sudo apt-get install gh -y\nfi\n\n# The comment to post (You can customize this message)\nCOMMENT=\"This is a comment from GitHub Actions on PR #${{ github.event.number }}!\"\n\n# Post the comment using GitHub CLI\ngh pr comment ${{ github.event.number }} --body \"$COMMENT\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41216849_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --configuration Release", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41219888_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build . -t your-image-name  # Replace with your image name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run -d -p 8080:8080 your-image-name  # Ensure your container runs properly\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker exec [container_id] your_build_commands_here  # Replace [container_id] with the actual container ID and your_build_commands_with_the_necessary_commands\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker stop [container_id] && docker rm [container_id]  # Clean up the container after execution\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4122888_0", "jobs": [{"name": "run-selenium-htmlsuite", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Uploading HTML Suite\"\n# Make sure your test_suite.html is in the root directory\nscp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} test_suite.html ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/path/to/your/remote/directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running HTML Suite remotely\"\nssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'\ncd /path/to/your/remote/directory\njava -cp \"/path/to/selenium/libs/*\" org.openqa.selenium.htmlunit.HtmlUnitDriver -path test_suite.html\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41231745_0", "jobs": [{"name": "check-pull-request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Retrieve the tag name from the event\nTAG_NAME=${GITHUB_REF#refs/tags/}\n\n# Query the GitHub API for pull requests that are merged into the current branch\nPRS=$(curl -s -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -H \"Accept: application/vnd.github.v3+json\" \\\n  \"https://api.github.com/repos/${{ github.repository }}/pulls?state=all&head=${{ github.repository }}:${TAG_NAME}\")\n\n# Check if any PRs were found and set output\nif [ \"$(echo \"$PRS\" | jq '. | length')\" -gt 0 ]; then\n  echo \"Pull requests found.\"\n  echo \"::set-output name=prs_found::true\"\nelse\n  echo \"No pull requests found for this tag.\"\n  echo \"::set-output name=prs_found::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.get_prs.outputs.prs_found }}\" = \"true\" ]; then\n  echo \"Tag '${GITHUB_REF#refs/tags/}' is associated with a pull request.\"\nelse\n  echo \"Tag '${GITHUB_REF#refs/tags/}' is NOT associated with any pull requests.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41234756_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Finding the latest WAR file in Nexus...\"\nWAR_FILE=$(curl -u \"$NEXUS_USERNAME:$NEXUS_PASSWORD\" -s \"$NEXUS_URL/service/rest/v1/search/assets?repository=<YOUR_REPOSITORY>&maven.groupId=<YOUR_GROUP_ID>&maven.artifactId=<YOUR_ARTIFACT_ID>&maven.extension=war\" | jq -r '.items[0].downloadUrl')\n\nif [[ \"$WAR_FILE\" == \"null\" ]]; then\n  echo \"No WAR file found.\"\n  exit 1\nfi\n\necho \"Downloading WAR file: $WAR_FILE\"\ncurl -u \"$NEXUS_USERNAME:$NEXUS_PASSWORD\" -O \"$WAR_FILE\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying WAR file to Tomcat...\"\nWAR_NAME=$(basename \"$WAR_FILE\")\n\ncurl -u \"$TOMCAT_USERNAME:$TOMCAT_PASSWORD\" --upload-file \"$WAR_NAME\" \"$TOMCAT_URL/manager/text/deploy?path=/<YOUR_APP_NAME>&update=true\"\n\necho \"Deployment complete.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41237865_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./dist", "CIvars": []}]}]}]}
{"id": "41245623_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Debug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your appropriate test command\n.\\packages\\NUnit.ConsoleRunner.3.11.1\\tools\\nunit3-console.exe .\\YourTestProject\\bin\\Debug\\YourTestProject.dll --result=TestResult.xml;format=xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "TestResult.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f TestResult.xml ]; then\n  echo \"Test Results:\"\n  cat TestResult.xml\nelse\n  echo \"No test results found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41250911_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example: Customize this to match your components directory structure\nchanged=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'components/' | cut -d '/' -f2 | uniq | tr '\\n' ' ')\necho \"::set-output name=changed_components::$changed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -z \"${{ steps.changes.outputs.changed_components }}\" ]; then\n  echo \"No components have changed. Skipping deploy.\"\nelse\n  echo \"Deploying: ${{ steps.changes.outputs.changed_components }}\"\n  # Here you would trigger your deployment logic based on the changed components. \n  # For example:\n  for component in ${{ steps.changes.outputs.changed_components }}; do\n    echo \"Deploying component: $component\"\n    # Replace with your actual deploy command; for example:\n    cd components/$component\n    # Example: Deploy command for each component\n    npm run deploy\n    cd ../..\n  done\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4125934_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/path/to/your/remote/directory", "CIvars": []}, {"type": "arg", "name": "git-ftp-args", "value": "--insecure", "CIvars": []}]}]}]}
{"id": "41266889_0", "jobs": [{"name": "override-plugins", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"your-plugin-1\" > plugins.txt\necho \"your-plugin-2\" >> plugins.txt\necho \"your-plugin-3\" >> plugins.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\ngit add plugins.txt\ngit commit -m \"Override plugins.txt\"\ngit push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41267968_0", "jobs": [{"name": "check_appveyor", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Checking AppVeyor build status...\"\nAPPVEYOR_API_URL=\"https://ci.appveyor.com/api/builds\"\nAPPVEYOR_ACCOUNT_NAME=\"YourAccountName\"   # Replace with your AppVeyor account name\nAPPVEYOR_PROJECT_NAME=\"YourProjectName\"   # Replace with your AppVeyor project name\nAPPVEYOR_API_KEY=\"${{ secrets.APPVEYOR_API_KEY }}\"  # Store your API key in GitHub secrets\n\n# Fetch the last build status\nBUILD_STATUS=$(curl -s -H \"X-AppVeyor-Api-Key: ${APPVEYOR_API_KEY}\" \\\n           \"$APPVEYOR_API_URL?accountName=$APPVEYOR_ACCOUNT_NAME&projectSlug=$APPVEYOR_PROJECT_NAME\" \\\n           | jq -r '.[0].status')\n\nif [ \"$BUILD_STATUS\" != \"Success\" ]; then\n  echo \"AppVeyor build status is not successful: $BUILD_STATUS\"\n  exit 1\nelse\n  echo \"AppVeyor build status is successful.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"AppVeyor checks passed. You can merge this pull request.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41278108_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the Visual Studio Installer URL and the installation parameters\n$vsInstallerUrl = \"https://download.visualstudio.microsoft.com/download/pr/xxxxxxxxx/xxxxxx/vs_Community.exe\" # Replace with the actual Visual Studio installer URL\n$vsInstallerPath = \"$env:TEMP\\vs_Community.exe\"\n\n# Download the Visual Studio Installer\nInvoke-WebRequest -Uri $vsInstallerUrl -OutFile $vsInstallerPath\n\n# Install Visual Studio\nStart-Process -FilePath $vsInstallerPath -ArgumentList \"--layout $env:TEMP\\vs_install --lang en-US\" -Wait -NoNewWindow\n\n# Optionally, you can clean up the installer\nRemove-Item $vsInstallerPath\n\n# Wait for the installation to complete\nWrite-Host \"Visual Studio Installation Complete.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4128372_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1.1", "shell": "bash", "with": [{"type": "arg", "name": "vsVersion", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourDatabaseProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourDatabaseProject.sqlproj /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourDatabaseProject.sqlproj /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.publish # Update with the project filename and Publish Profile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlCMD -S $SQL_SERVER -d $SQL_DATABASE -U $SQL_USER -P $SQL_PASSWORD -i YourDeploymentScript.sql # Update command as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41294796_0", "jobs": [{"name": "handle-webhook-payload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Payload received: ${{ github.event.client_payload }}\"\necho \"Value of my_param: ${{ github.event.client_payload.my_param }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41296875_0", "jobs": [{"name": "sync-config", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/my-codeigniter-app", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "app", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/my-codeigniter-config", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "config", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cp -r config/* app/application/config/\ncp -r config/.env app/.env  # If you're using .env for environment variables\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd app\ngit config --local user.name \"github-actions\"\ngit config --local user.email \"github-actions@github.com\"\n\n# Check if there are any changes\nif [ -n \"$(git status --porcelain)\" ]; then\n  git add application/config/\n  git commit -m \"Update configuration from my-codeigniter-config\"\n  git push origin main  # Change to the appropriate branch if necessary\nelse\n  echo \"No changes to commit\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4129780_0", "jobs": [{"name": "wait_for_builds", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "wget -q http://<your-jenkins-url>/jnlpJars/jenkins-cli.jar -O jenkins-cli.jar\necho \"Jenkins CLI is installed.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Jenkins CLI command to wait for unfinished builds\nwhile true; do\n  UNFINISHED_BUILDS=$(java -jar jenkins-cli.jar -s \"$JENKINS_URL\" -auth \"$JENKINS_USER:$JENKINS_TOKEN\" list-builds | grep \"UNSTABLE\\|IN-PROGRESS\\|BUILDING\")\n  if [ -z \"$UNFINISHED_BUILDS\" ]; then\n    echo \"No unfinished builds detected.\"\n    break\n  else\n    echo \"Waiting for unfinished builds...\"\n    sleep 30\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41301245_0", "jobs": [{"name": "phpci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, curl, bcmath, soap", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"PHP CI passed!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"PHP CI failed!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41310720_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build completed!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41310928_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying v1\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying v2\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41322113_0", "jobs": [{"name": "checkout", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}, {"type": "arg", "name": "ref", "value": "refs/heads/*", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Branches in the repository:\"\ngit branch -a\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Repository Content:\"\nls -R  # List all files in the repository recursively\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41323116_0", "jobs": [{"name": "check-changes", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch origin\ngit checkout master\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Check for file changes in master compared to the previous commit\ngit diff --name-only HEAD^ HEAD > changes.txt\n# Store the result in an output variable\nif [ -s changes.txt ]; then\n  echo \"::set-output name=master_changed::true\"\nelse\n  echo \"::set-output name=master_changed::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'feature' with the name of your feature branch\ngit checkout ${{ github.head_ref }} # This checks out the feature branch\ngit diff --name-only origin/master...HEAD > changes_feature.txt\n# Store the result in an output variable\nif [ -s changes_feature.txt ]; then\n  echo \"::set-output name=branch_changed::true\"\nelse\n  echo \"::set-output name=branch_changed::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.master_changes.outputs.master_changed }}\" == \"true\" && \"${{ steps.branch_changes.outputs.branch_changed }}\" == \"true\" ]]; then\n  echo \"Both master and feature branch have changes.\"\nelse\n  echo \"Changes are not found in both branches.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41324243_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Deploy your built Mule application\ncurl -X POST \"https://on-premise-url/api/v1/deploy\" \\\n-u \"${{ secrets.MULE_USERNAME }}:${{ secrets.MULE_PASSWORD }}\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"appName\": \"your-app-name\",  # Change to your app name\n  \"environment\": \"${{ secrets.MULE_ENV }}\",  # Environment to deploy\n  \"version\": \"1.0.0\",  # Change this as needed\n  \"archive\": \"data/mule-project.zip\"  # Path to your built archive\n}'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to MuleSoft completed successfully.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41324762_0", "jobs": [{"name": "handle-conflict", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 2, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "PR_BRANCH=${{ github.head_ref }}\nBASE_BRANCH=${{ github.base_ref }}\n\n# Fetch the base branch to check for conflicts\ngit fetch origin $BASE_BRANCH:$BASE_BRANCH\n\n# Check out the PR branch\ngit checkout $PR_BRANCH\n\n# Try to merge the base branch into the PR branch\nif ! git merge --no-commit --no-ff $BASE_BRANCH; then\n  echo \"Conflict detected\"\n  echo \"conflict=true\" >> $GITHUB_ENV\nelse\n  echo \"No conflict detected\"\n  echo \"conflict=false\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "NEW_BRANCH_NAME=\"${{ github.head_ref }}-conflicted\"\necho \"Creating new branch: $NEW_BRANCH_NAME\"\ngit checkout -b $NEW_BRANCH_NAME\n\n# Push the new branch to the repository\ngit push origin $NEW_BRANCH_NAME\n\n# Optionally, create a pull request for the new branch\ncurl -X POST \\\n  -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n  -d '{\"title\":\"Conflicted Changes\",\"head\":\"'$NEW_BRANCH_NAME'\",\"base\":\"'$BASE_BRANCH'\"}' \\\n  https://api.github.com/repos/${{ github.repository }}/pulls\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Workflow completed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41326475_0", "jobs": [{"name": "import", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/repoB", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "repoB", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git clone https://github.com/your-username/repoA.git repoA\ncd repoA\ngit fetch --all\n# Optionally checkout a specific branch\ngit checkout main \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Adjust the file patterns below to match the files you want to import\ncd repoA\ngit filter-branch --subdirectory-filter path/to/files -- --all \n\n# Now move the filtered history to repoB\ncd ../repoB\ngit remote add repoA ../repoA\ngit fetch repoA\ngit merge repoA/main --allow-unrelated-histories -m \"Import files from repoA\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd repoB\ngit push origin main # Change branch name if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41329653_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"\n# Add your deployment script/command here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41345629_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "<SVN_REPO_URL>", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.SVN_TOKEN }}", "CIvars": [{"name": "SVN_TOKEN", "expression": "secrets.SVN_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "my-project", "CIvars": []}, {"type": "arg", "name": "submodules", "value": "recursive", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd my-project\n./gradlew build # or your build command; adjust based on your project needs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd my-project\n./gradlew test # adjust this command if your project structure is different\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Liferay...\"\n# Add your deployment commands here\n# e.g., using curl or SSH to send artifacts to your Liferay server\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41345724_0", "jobs": [{"name": "check_reviewers_vs_assignees", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"PR_NUMBER=$(echo ${{ github.event.pull_request.number }})\" >> $GITHUB_ENV\nPR_DATA=$(curl -s -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n                  \"https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}\")\necho \"$PR_DATA\" >> pr_data.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ASSIGNEES=$(jq '.assignees | map(.login) | join(\", \")' pr_data.json)\nREVIEWERS=$(jq '.requested_reviewers | map(.login) | join(\", \")' pr_data.json)\n\necho \"ASSIGNEES=${ASSIGNEES}\" >> $GITHUB_ENV\necho \"REVIEWERS=${REVIEWERS}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Assignees: $ASSIGNEES\"\necho \"Reviewers: $REVIEWERS\"\n\nif [ \"$ASSIGNEES\" != \"$REVIEWERS\" ]; then\n  echo \"The assignees and reviewers are different!\"\n  exit 1\nelse\n  echo \"The assignees and reviewers are the same.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm pr_data.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41350543_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install   # Change this to your build command if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Change this to your build command if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"heroku_api_key=${{ secrets.HEROKU_API_KEY }}\" > ~/.netrc\necho \"machine api.heroku.com\" >> ~/.netrc\necho \"  login ${HEROKU_APP_NAME}\" >> ~/.netrc\necho \"  password ${HEROKU_API_KEY}\" >> ~/.netrc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41351504_0", "jobs": [{"name": "split-branches", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "master", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config user.name \"github-actions\"\ngit config user.email \"github-actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create feature-1 branch if there are *.txt files\nif ls *.txt 1> /dev/null 2>&1; then\n  git checkout -b feature-1\n  echo \"Feature 1 branch created.\"\n  git push origin feature-1\nfi\n\n# Create feature-2 branch if there are *.md files\nif ls *.md 1> /dev/null 2>&1; then\n  git checkout -b feature-2\n  echo \"Feature 2 branch created.\"\n  git push origin feature-2\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41372242_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploy step can be added here\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41372973_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build . -t your-username/your-image:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push your-username/your-image:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Make sure to add your deployment commands here\n# For example, if you're using SSH to deploy to a remote server\n# ssh user@your-server \"docker pull your-username/your-image:latest && docker run -d your-username/your-image:latest\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41387282_0", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx depcheck || echo \"No unused dependencies found.\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint || echo \"No linting errors found.\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git clean -fd", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\ngit add .\ngit commit -m \"Automated cleanup\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41389119_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.PFX_FILE_BASE64 }}\" | base64 --decode > universalapp_temporarykey.pfx\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y openssl\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example command to deploy your application using the .pfx file\nopenssl pkcs12 -in universalapp_temporarykey.pfx -out output_key.pem -nodes -nocerts\n# Add your deployment commands here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -f universalapp_temporarykey.pfx\nrm -f output_key.pem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4140014_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}]}]}]}
{"id": "41405036_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build  # Adjust based on your project setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish ./YourWebJobProject.csproj -c Release -o ./publish  # Adjust for your web job project\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourWebAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "41405694_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}, {"type": "arg", "name": "cache", "value": "npm", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm ci\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -rf node_modules\nnpm cache clean --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/ # Change this path according to your build output\n", "CIvars": []}]}]}]}
{"id": "41408726_0", "jobs": [{"name": "example_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Webhook triggered a push event on the main branch!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41408741_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-subscription", "value": "${{ secrets.AZURE_SUBSCRIPTION }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION", "expression": "secrets.AZURE_SUBSCRIPTION", "type": "secret"}]}, {"type": "arg", "name": "azure-tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az storage account check-name --name ${{ secrets.STORAGE_ACCOUNT_NAME }} --query 'nameAvailable' -o tsv > exists.txt\nif [ \"$(cat exists.txt)\" = \"true\" ]; then\n  echo \"Storage account does not exist.\"\n  echo \"storageAccountExists=false\" >> $GITHUB_ENV\nelse\n  echo \"Storage account already exists.\"\n  echo \"storageAccountExists=true\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az storage account create \\\n  --name ${{ secrets.STORAGE_ACCOUNT_NAME }} \\\n  --resource-group ${{ secrets.RESOURCE_GROUP }} \\\n  --location ${{ secrets.AZURE_LOCATION }} \\\n  --sku Standard_LRS\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az deployment group create \\\n  --resource-group ${{ secrets.RESOURCE_GROUP }} \\\n  --template-file path/to/your/template.json \\\n  --parameters path/to/your/parameters.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4140986_0", "jobs": [{"name": "run-sahi-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y gradle # or the relevant build tool you are using\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you should set up Sahi if it's not part of your source.\n# Example: Download and unzip Sahi if necessary\nwget -q https://sahipro.com/wp-content/uploads/2022/09/sahi_9.2.zip\nunzip -qq sahi_9.2.zip -d sahi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace the path to your Sahi test execution script\ncd sahi\n./run_sahi_tests.sh # Make sure this script exists and is executable\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "sahi-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "sahi/test-results", "CIvars": []}]}]}]}
{"id": "41410699_0", "jobs": [{"name": "checkout", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 1, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Last commit hash: $(git rev-parse HEAD)\"\necho \"Last commit message: $(git log -1 --pretty=%B)\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41423745_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore ./YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./YourSolution.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./YourSolution.sln --configuration Release --no-build --collect:\"XPlat Code Coverage\" --logger:xunit --results-directory ./TestResults", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./TestResults/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dorny/test-reporter", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xUnit", "CIvars": []}, {"type": "arg", "name": "path", "value": "./TestResults/*.xml", "CIvars": []}, {"type": "arg", "name": "reporter", "value": "xunit", "CIvars": []}]}]}]}
{"id": "41436189_0", "jobs": [{"name": "check-secrets", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "GitHubSuperFund/secret-check", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "files", "value": ".env\n.env.production\nconfig/*.json\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Secrets found in the codebase!\"\nexit 1\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "require-approval", "steps": [{"type": "shell_cmd", "cmd": "if [ \"${{ github.event.pull_request.review_comments }}\" -eq 0 ]; then\n  echo \"Pull request requires approval from at least one reviewer.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify-on-failure", "steps": [{"type": "shell_cmd", "cmd": "echo \"Sending notification to team regarding failure during security checks!\"\n# You could integrate a notification service here (like Slack, Discord, Email, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41447343_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ./ios/exportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "41452692_0", "jobs": [{"name": "check-requirement", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "REQUIRED_FILE=\"required-file.txt\"\nREQUIRED_CONTENT=\"This is the required content.\"\n\n# Check if the required file exists\nif [ ! -f \"$REQUIRED_FILE\" ]; then\n  echo \"Error: '$REQUIRED_FILE' does not exist in the pull request.\"\n  exit 1\nfi\n\n# Check if the required content is present in the file\nif ! grep -q \"$REQUIRED_CONTENT\" \"$REQUIRED_FILE\"; then\n  echo \"Error: '$REQUIRED_FILE' does not contain the required content:\"\n  echo \"\\\"$REQUIRED_CONTENT\\\"\"\n  exit 1\nfi\n\necho \"All checks passed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41465194_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41465532_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Setting up the environment\"\nsudo xcode-select -switch /Applications/Xcode.app/Contents/Developer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ${{ matrix.project }}\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project ${{ matrix.project }} -scheme 'YourSchemeName' -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "414662_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "<SVN_REPO_URL>", "CIvars": []}, {"type": "arg", "name": "path", "value": "myproject", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Checking for the latest commit\"\ncd myproject\nsvn update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd myproject\n# Here you add your build commands\n# Examples:\n# ./gradlew build  (for Gradle)\n# mvn clean install  (for Maven)\n# npm install && npm run build (for Node.js)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41467429_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install sphinx  # Change this if you use a different doc generator\n# If you have a `requirements.txt`, uncomment the line below\n# pip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sphinx-build -b html docs/source/ docs/build/  # Adjust this to your paths\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs/build", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "41473569_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41476931_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Replace with your requirements file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your test command\npytest  # Assumes you are using pytest; adjust as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41477261_0", "jobs": [{"name": "push-to-origin", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --local user.name \"GitHub Actions\"\ngit config --local user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ $(git rev-list --count HEAD ^origin/master) -gt 0 ]]; then\n  echo \"Pushing local commits to origin/master...\"\n  git push origin master\nelse\n  echo \"Nothing to push. The branch is up-to-date with origin/master.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41477821_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "${{ matrix.node-version }}", "CIvars": [{"name": "node-version", "expression": "matrix.node-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41482858_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"actions@github.com\"\ngit clone --branch gh-pages https://github.com/${{ github.repository }} gh-pages\nrm -rf gh-pages/*\ncp -r dist/* gh-pages/  # Adjust if your output directory is different\ncd gh-pages\ngit add .\ngit commit -m \"Deploy: $(date +'%Y-%m-%d %H:%M:%S')\"\ngit push --force https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41487659_0", "jobs": [{"name": "nightwatch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41491411_0", "jobs": [{"name": "reset-and-push", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Replace <commit_hash> with the commit to which you want to reset\ngit reset --hard <commit_hash>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"action@github.com\"\ngit push origin master --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4150315_0", "jobs": [{"name": "fetch_user_info", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Fetching user information...\"\nUSER_INFO=$(curl -s -H \"Authorization: token $GITHUB_TOKEN\" https://api.github.com/user)\n\necho \"Current User Information:\"\necho \"${USER_INFO}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${USER_INFO}\" | jq '.login, .id, .name, .email, .html_url' | sed 's/^/User Property: /'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41504154_0", "jobs": [{"name": "check_diff", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Check for whitespace changes\nif ! git diff -w --exit-code; then\n  echo \"Found whitespace-only changes!\"\n  git diff -w\n  exit 1\nelse\n  echo \"No whitespace-only changes found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"No whitespace changes detected. Commit is clean.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41506891_0", "jobs": [{"name": "find-prs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install requests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "import os\nimport requests\n\nGITHUB_TOKEN = os.getenv(\"GITHUB_TOKEN\")\nREVIEWER = os.getenv(\"REVIEWER\")\nrepo = os.getenv(\"GITHUB_REPOSITORY\")\napi_url = f'https://api.github.com/repos/{repo}/pulls'\nheaders = {'Authorization': f'token {GITHUB_TOKEN}'}\n\n# Call the GitHub API to get all open PRs\nresponse = requests.get(api_url, headers=headers)\nprs = response.json()\n\n# Filter PRs where the user is a reviewer\nmatching_prs = []\nfor pr in prs:\n    pr_number = pr['number']\n    reviews_url = pr['review_comments_url'].replace('comments', 'reviews')\n    reviews_response = requests.get(reviews_url, headers=headers)\n    reviews = reviews_response.json()\n    \n    for review in reviews:\n        if review.get('user', {}).get('login') == REVIEWER:\n            matching_prs.append(pr)\n\n# Print results\nif matching_prs:\n    print(\"Found PRs where user is a reviewer:\")\n    for pr in matching_prs:\n        print(f\"PR #{pr['number']}: {pr['html_url']}\")\nelse:\n    print(f\"No PRs found where user '{REVIEWER}' is a reviewer.\")\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41517394_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install --upgrade pip\npip install setuptools wheel\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ${{ matrix.package }}\npython setup.py bdist_wheel\ncd ..\nmv ${{ matrix.package }}/dist/*.whl wheels/  # Move the wheel files to a common directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pip install wheels/*.whl  # Install the built wheels\npip install -r requirements.txt  # Add any additional dependencies here\n# Run your tests here, for instance using pytest\npytest tests/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41526320_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y oxygen-xml-editor\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for xml in $(find . -name \"*.xml\"); do\n  echo \"Validating $xml\"\n  oxygen-xml-editor validate \"$xml\" # replace with the correct command or script to validate\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f \"./xslt/transform.xslt\" ]; then\n  for xml in $(find . -name \"*.xml\"); do\n    echo \"Transforming $xml\"\n    oxygen-xml-editor transform \"$xml\" \"./xslt/transform.xslt\" -o \"${xml%.xml}.html\" # output to .html\n  done\nelse\n  echo \"No XSLT found for transformation.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xml-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "**/*.html\n**/*.xml\n", "CIvars": []}]}]}]}
{"id": "41535022_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config user.name \"GitHub Action\"\ngit config user.email \"action@example.com\"  # Replace with your email\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'main' and 'feature-branch' with your branch names\ngit checkout main\ngit merge feature-branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41544692_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41544916_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4155311_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking for changes in Surround SCM...\"\n# Add commands to check or fetch Surround SCM changes\n# Example: run command to checkout or update from Surround SCM\n# This depends on your Surround SCM CLI/command setup\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41562417_0", "jobs": [{"name": "compress", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can use any command to compress your source files\ntar -cvzf source-code.tar.gz ./src  # Adjust the path and compression tool as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "source-code", "CIvars": []}, {"type": "arg", "name": "path", "value": "source-code.tar.gz", "CIvars": []}]}]}]}
{"id": "41564942_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "matlab-actions/setup-matlab", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "matlab-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "matlab -batch \"run('path/to/your_script.m')\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41565716_0", "jobs": [{"name": "skip-ci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config user.name \"github-actions[bot]\"\ngit config user.email \"github-actions[bot]@users.noreply.github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=sha::$(git rev-parse HEAD)\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git commit --amend -m \"$(git log -1 --pretty=%B) [skip ci]\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin HEAD --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41565857_1", "jobs": [{"name": "checkstyle", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p checkstyle\nwget https://checkstyle.org/checkstyle-XXXXX-all.jar -O checkstyle/checkstyle.jar\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "java -jar checkstyle/checkstyle.jar -c checkstyle.xml **/*.java\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41566217_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change this to your package manager if not using npm\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Change this to your test command if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41568730_0", "jobs": [{"name": "sonarqube", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-project-key", "value": "YOUR_PROJECT_KEY", "CIvars": []}, {"type": "arg", "name": "sonar-project-name", "value": "YOUR_PROJECT_NAME", "CIvars": []}, {"type": "arg", "name": "sonar-host-url", "value": "https://sonarcloud.io", "CIvars": []}, {"type": "arg", "name": "sonar-login", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "COVERAGE=$(grep -oP '\\d+\\.\\d+(?=%)' coverage/lcov.info | awk '{sum += $1} END {print sum / NR}')\necho \"Coverage Percentage: $COVERAGE\"\n\nBASELINE_COVERAGE=80.0 # Set your baseline coverage percentage here\nif (( $(echo \"$COVERAGE < $BASELINE_COVERAGE\" | bc -l) )); then\n  echo \"Code coverage dropped below baseline of $BASELINE_COVERAGE%\"\n  exit 1\nelse\n  echo \"Code coverage is above baseline.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41576095_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl https://install.meteor.com/ | sh\nexport PATH=$HOME/.meteor:$PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "meteor npm install\nmeteor npm install --save-dev debugonly\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "meteor build ../build --server-only", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run --name mongo-test -d -p 27017:27017 mongo:latest\nsleep 10  # Wait for MongoDB to be fully started\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "meteor test --driver-package practicalmeteor:mocha --port 3000 --settings settings.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker stop mongo-test && docker rm mongo-test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41577118_0", "jobs": [{"name": "modify-file-locations", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install some-package  # Install any required dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python script.py  # Call your script that changes file locations\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add .\ngit commit -m \"Update file locations\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.head_ref }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41581178_0", "jobs": [{"name": "remove-collaborators", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install requests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "import os\nimport requests\n\nREPO = os.getenv(\"REPO\")\nGITHUB_TOKEN = os.getenv(\"GITHUB_TOKEN\")\nheaders = {\n    \"Authorization\": f\"Bearer {GITHUB_TOKEN}\",\n    \"Accept\": \"application/vnd.github.v3+json\",\n}\n\n# Get all forks\nforks_url = f\"https://api.github.com/repos/{REPO}/forks\"\nresponse = requests.get(forks_url, headers=headers)\nforks = response.json()\n\nfor fork in forks:\n    # Get the owner of the fork\n    fork_owner = fork['owner']['login']\n\n    # Define conditions under which to remove collaborators\n    # For example, you can check if the fork owner is in a specific list\n    collaborators_url = f\"https://api.github.com/repos/{REPO}/collaborators\"\n    collaborators_response = requests.get(collaborators_url, headers=headers)\n    collaborators = collaborators_response.json()\n\n    for collaborator in collaborators:\n        collaborator_login = collaborator['login']\n        if collaborator_login == fork_owner:\n            # Remove the collaborator\n            remove_url = f\"https://api.github.com/repos/{REPO}/collaborators/{collaborator_login}\"\n            response = requests.delete(remove_url, headers=headers)\n            print(f\"Removed collaborator: {collaborator_login} for forking the repo.\")\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41581807_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41583571_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"\n# Your deployment commands here, e.g. using SSH, a CLI tool, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41586880_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Build the Docker image with a tag based on the branch\ndocker build -t my-image:${{ github.ref }} .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run the container using the image just built\ndocker run --rm my-image:${{ github.ref }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41590746_0", "jobs": [{"name": "install-semantic-ui", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install semantic-ui --save\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx gulp build -f\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.email \"action@github.com\"\ngit config --global user.name \"GitHub Action\"\ngit add .\ngit commit -m \"Auto-install Semantic UI\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41590812_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "fat-jar", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/*.jar", "CIvars": []}]}]}]}
{"id": "41592319_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Add your deployment script/command here, for example:\n# dotnet publish -c Release -o ./publish\n\n# Example for Azure deployment:\n# az webapp deploy --resource-group <your-resource-group> --name <your-webapp-name> --src-path ./publish\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "cleanup", "steps": [{"type": "shell_cmd", "cmd": "echo \"Cleaning up resources...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41599813_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41602265_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41602525_0", "jobs": [{"name": "sync-branches", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"action@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git fetch origin", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "LOCAL=$(git rev-parse HEAD)\nREMOTE=$(git rev-parse origin/yourbranch)\nif [ \"$LOCAL\" != \"$REMOTE\" ]; then\n  echo \"Diverged branches detected.\"\n  echo \"##[set-output name=diverged;]true\"\nelse\n  echo \"Branches are in sync.\"\n  echo \"##[set-output name=diverged;]false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout yourbranch\ngit merge origin/yourbranch --no-commit --no-ff # Avoid automatic commit\ngit commit -m \"Merged remote changes while keeping local changes\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin yourbranch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Sync process completed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41603168_0", "jobs": [{"name": "get-ip", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Fetching the IP address...\"\n# Using curl to check the public IP address\nHOST_IP=$(curl -s ifconfig.me)\necho \"Host IP Address: $HOST_IP\"\n\n# Optionally, you can also get the local network IP (within the GitHub Actions environment)\nLOCAL_IP=$(hostname -I | awk '{print $1}')\necho \"Local Network IP Address: $LOCAL_IP\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41603687_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install Doctl (DigitalOcean CLI)\ncurl -sSL https://github.com/digitalocean/doctl/releases/latest/download/doctl-$(uname | tr '[:upper:]' '[:lower:]')-amd64.tar.gz | tar -xz\nsudo mv doctl /usr/local/bin\n\n# Authenticate with DigitalOcean\ndoctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\n\n# Deploy your application (adjust command as per your deployment method)\n# Example for deploying using App Platform\ndoctl apps deploy YOUR_APP_ID --spec .do/app.yaml # Adjust this path if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41610949_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn sonar:sonar", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41615804_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --watch=false --bail", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build -- --prod", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "angular-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "dist/your-app-name", "CIvars": []}]}]}]}
{"id": "41634002_0", "jobs": [{"name": "cherry-pick", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"PR_NUMBER=$(echo '${{ github.event.issue.number }}' | grep -o '[0-9]*')\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get the commits to cherry-pick from the closed PR\ncommits=$(git log --pretty=format:\"%H\" origin/main..origin/pr/${{ env.PR_NUMBER }}/merge)\nfor commit in $commits; do\n  git cherry-pick $commit || exit 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41636861_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --no-restore --configuration Release --ignore-failed-sources\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41638965_0", "jobs": [{"name": "list_repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl -H \"Authorization: token $GITHUB_TOKEN\" \\\n     -H \"Accept: application/vnd.github.v3+json\" \\\n     https://api.github.com/user/repos?per_page=100 | \njq '.[] | {name: .name, fork: .fork, clone_url: .clone_url}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41640349_0", "jobs": [{"name": "update-base-branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GITHUB_TOKEN }}\" | gh auth login --with-token\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Change \"main\" to the desired base branch\nBASE_BRANCH=\"main\"\nPR_NUMBER=\"${{ github.event.pull_request.number }}\"\n\n# Update the base branch using GitHub API\ngh pr edit $PR_NUMBER --base $BASE_BRANCH\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41642918_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name 'GitHub Actions'\ngit config --global user.email 'actions@github.com'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Define the base and feature branches to merge\nBASE_BRANCH=\"main\"\nFEATURE_BRANCH=\"feature-branch\"  # Change this to your feature branch name\n\n# Checkout the base branch\ngit checkout $BASE_BRANCH\n\n# Merge the feature branch\ngit merge $FEATURE_BRANCH\n\n# Push changes if merge is successful\ngit push origin $BASE_BRANCH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git branch -d $FEATURE_BRANCH || true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41644899_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "/tmp/.buildx-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-buildx-cache-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-buildx-cache-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "file", "value": "./Dockerfile", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "myusername/myrepo:latest", "CIvars": []}]}]}]}
{"id": "41648219_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Ensure you have a requirements.txt file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # Assuming you are using pytest for testing\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41650895_0", "jobs": [{"name": "compare-git-commands", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@example.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout -b new-feature origin/main\necho \"Created and checked out new branch 'new-feature' from 'origin/main'.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git branch new-feature-2 origin/main\necho \"Created new branch 'new-feature-2' from 'origin/main' but did not check it out.\"\necho \"To switch to 'new-feature-2', you would need to use 'git checkout new-feature-2'.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"This workflow demonstrates the differences between the two Git commands.\"\necho \"1. 'git checkout -b <branch> <remote branch>' creates a new branch and checks it out.\"\necho \"2. 'git branch <branch> <remote branch>' creates a new branch but does not switch to it.\"\necho \"You can see the branches created in this workflow in the repository.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git branch -a", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41652141_0", "jobs": [{"name": "read_repo_data", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Fetching repository details...\"\ncurl -H \"Authorization: token $GITHUB_TOKEN\" https://api.github.com/repos/<OWNER>/<REPO>\n\n# Replace <OWNER> and <REPO> with your GitHub username and repository name respectively\n# You can perform various read-only API actions here using curl.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41652803_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41656419_0", "jobs": [{"name": "update-redirect-uris", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v0.2.0", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GOOGLE_CREDENTIALS }}", "CIvars": [{"name": "GOOGLE_CREDENTIALS", "expression": "secrets.GOOGLE_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GOOGLE_PROJECT_ID }}", "CIvars": [{"name": "GOOGLE_PROJECT_ID", "expression": "secrets.GOOGLE_PROJECT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Replace YOUR_CLIENT_ID and YOUR_REDIRECT_URL with appropriate values\nCLIENT_ID=\"YOUR_CLIENT_ID\"\nREDIRECT_URL=\"YOUR_REDIRECT_URL\"\n\n# Retrieve existing OAuth 2.0 client\necho \"Retrieving existing OAuth client info...\"\nCLIENT_INFO=$(gcloud alpha services identity get-access-token --client-id=${CLIENT_ID} --format=json)\necho \"Client Info: $CLIENT_INFO\"\n\n# Update redirect URIs (this is just placeholder logic)\necho \"Updating redirect URIs...\"\n# Code to call Google API to update URIs goes here. \n\n# Example for using an API, replace with actual command/function\nRESPONSE=$(curl -X POST https://your.api.endpoint.here \\\n            -H \"Authorization: Bearer $(gcloud auth application-default print-access-token)\" \\\n            -H \"Content-Type: application/json\" \\\n            -d '{\n                \"clientId\": \"'\"$CLIENT_ID\"'\",\n                \"redirectUris\": [\"'\"$REDIRECT_URL\"'\"]\n            }')\n\necho \"Response: $RESPONSE\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Redirect URIs updated successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41660240_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41666889_0", "jobs": [{"name": "trigger_script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no user@your-developer-machine 'bash -s' < path/to/your/xcode-bot-script.sh\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41675232_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo xcode-select -s /Applications/Xcode_8.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If your project uses CocoaPods, uncomment the next line\n# pod install\n\n# If you use Carthage, you can uncomment the next line\n# brew install carthage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourScheme build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Set Environment Variables\nexport TEST_RUNNER_PATH=$(xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6' test | grep -A 1 'Test Suite '[0-9]*' is finished in' | tail -n 1 | awk '{print $4}')\n\n# Specify the path for the Instruments trace\nTRACE_PATH=\"$GITHUB_WORKSPACE/test-results.trace\"\n\n# Run Instruments\ninstruments -w 'iPhone 6 (10.0)' -t 'Automation' \"$TEST_RUNNER_PATH\" -D \"$TRACE_PATH\" | tee instruments_output.log\n\n# Add additional commands if needed to process the trace or the output\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41678296_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Install any necessary dependencies or tools.\nsudo apt-get update\nsudo apt-get install -y jq curl\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Authenticate with the cluster using the provided tokens\necho \"Authenticating with the cluster\"\ncurl -X POST \"$CLUSTER_URL/auth\" -H \"Authorization: Bearer $CLUSTER_TOKEN\"\n\n# Example deployment command\necho \"Deploying application...\"\n# Replace the following with your specific deployment commands\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to the cluster was successful!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41680511_0", "jobs": [{"name": "find-keychain-file", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Listing Keychains in /Users/$(whoami)/Library/Keychains\"\nls /Users/$(whoami)/Library/Keychains\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f /Users/$(whoami)/Library/Keychains/login.keychain ]; then\n  echo \"Found login.keychain file.\"\nelse\n  echo \"login.keychain file not found.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4168312_0", "jobs": [{"name": "check_tfs_build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install the TFS command-line tool if necessary\ncurl -O https://example.com/path/to/tfs_tool.tar.gz\ntar -xzf tfs_tool.tar.gz\nsudo mv tfs_tool /usr/local/bin\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Use TFS REST API or CLI to obtain the latest build information\n# Make sure to set the necessary TFS authentication methods if needed\nlatest_build_info=$(curl -s -u user:token \"https://tfs.myorganization.com/tfs/_apis/build/builds?definitions=1&$top=1&api-version=5.0\")\necho \"LATEST_BUILD_INFO=${latest_build_info}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Parse the latest build information and check commits\n# Here, you might need to tailor the parsing based on the output from the TFS API\nif [ \"$LATEST_BUILD_INFO\" == *\"previous_build_commit_id\"* ]; then\n  echo \"only_previous_commit=true\" >> $GITHUB_ENV\nelse\n  echo \"only_previous_commit=false\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Call TFS REST API to stop the build if the condition is met\ncurl -X PATCH -u user:token \"https://tfs.myorganization.com/tfs/_apis/build/builds/{buildId}?api-version=5.0\" \\\n-H \"Content-Type: application/json\" -d '{\"status\": \"stopped\", \"result\": \"cancelling\"}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41686602_0", "jobs": [{"name": "trigger-codepipeline", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-credentials", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "PIPELINE_NAME=\"your-codepipeline-name\"  # Change this to your pipeline's name\naws codepipeline start-pipeline-execution --name $PIPELINE_NAME\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41687793_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --collect:\"XPlat Code Coverage\" --logger \"trx;LogFileName=test_results.trx\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet tool install --global trx2html\ntrx2html test_results.trx --out test_results.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test_results.trx\ntest_results.html\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "coverallsapp/github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "41695530_0", "jobs": [{"name": "extract-pr-id", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"The Pull Request ID is: ${{ github.event.pull_request.id }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41699448_0", "jobs": [{"name": "prevent-tag-push", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"An attempt to push a tag '$GITHUB_REF' was detected.\"\necho \"If this was unintentional, please delete the tag on the remote repository.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Comment this out or handle it according to your needs\necho \"Deleting remote tag to prevent accidental push.\"\ngit push --delete origin ${GITHUB_REF#refs/tags/}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::error::Tag pushes are not allowed in this repository.\"\nexit 1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "417014_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "BASE64_AUTH=$(echo \":$AZURE_DEVOPS_PAT\" | base64)\nBUILD_STATUS_URL=\"https://dev.azure.com/$AZURE_DEVOPS_ORG/$AZURE_DEVOPS_PROJECT/_apis/build/builds/$BUILD_ID?api-version=6.0\"\n\nif [ \"$STATUS\" == \"success\" ]; then\n  STATUS_JSON='{\"status\": \"completed\", \"result\": \"succeeded\"}'\nelse\n  STATUS_JSON='{\"status\": \"completed\", \"result\": \"failed\"}'\nfi\n\ncurl -X PATCH \\\n  -H \"Authorization: Basic $BASE64_AUTH\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"$STATUS_JSON\" \\\n  \"$BUILD_STATUS_URL\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41701909_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "0.5.1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --follow-symlinks --delete", "CIvars": []}]}]}]}
{"id": "41703313_0", "jobs": [{"name": "create-prs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --local user.email \"your-email@example.com\"\ngit config --local user.name \"Your Name\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get the list of commits since the last push (up to 10 commits for demonstration)\ncommits=$(git log origin/main..HEAD --pretty=format:\"%H\" -n 10)\necho \"::set-output name=commits::$commits\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "IFS=' ' read -r -a commit_array <<< \"${{ steps.get_commits.outputs.commits }}\"\nfor commit in \"${commit_array[@]}\"; do\n  # Create a new branch based on the commit\n  branch_name=\"temp-pr-$(date +%s)\"\n  git checkout -b \"$branch_name\" \"$commit\"\n\n  # Create a pull request using the GitHub CLI\n  gh pr create --base main --head \"$branch_name\" --title \"PR for commit $commit\" --body \"This PR contains changes from commit $commit.\"\n\n  # Checkout back to main to continue the loop for the next commit\n  git checkout main\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41708792_0", "jobs": [{"name": "find-prs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"COMMIT_SHA=${{ github.event.inputs.commit_sha }}\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Define variables\nREPO=${{ github.repository }}\nCOMMIT_SHA=${{ env.COMMIT_SHA }}\nPAGE=1\nPER_PAGE=100\nPRS_URL=\"https://api.github.com/repos/${REPO}/pulls\"\n\necho \"Fetching pull requests containing commit: $COMMIT_SHA\"\n\n# Make request to get pull requests\nwhile true; do\n  RESPONSE=$(curl -s -H \"Authorization: token $GITHUB_TOKEN\" \"${PRS_URL}?state=all&per_page=${PER_PAGE}&page=${PAGE}\")\n  Any_PRs=0\n\n  # Check if we got any results\n  if [[ $(echo \"$RESPONSE\" | jq '. | length') -eq 0 ]]; then\n    break\n  fi\n  \n  # Loop through each PR\n  echo \"$RESPONSE\" | jq -c '.[]' | while read -r pr; do\n    PR_NUMBER=$(echo \"$pr\" | jq '.number')\n    if curl -s -H \"Authorization: token $GITHUB_TOKEN\" \"https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/commits\" | jq -e \".[] | select(.sha == \\\"$COMMIT_SHA\\\")\" > /dev/null; then\n      echo \"Found PR #$PR_NUMBER that includes commit $COMMIT_SHA\"\n      Any_PRs=1\n    fi\n  done\n\n  if [ $Any_PRs -eq 0 ]; then\n    echo \"No further PRs found with commit $COMMIT_SHA on page $PAGE.\"\n    break\n  fi\n\n  PAGE=$((PAGE + 1))\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "417134_0", "jobs": [{"name": "ci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}, {"name": "nightly_build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "nightly-build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/build/artifacts", "CIvars": []}]}]}]}
{"id": "41721311_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sql-server", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sql-server-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "sa-password", "value": "${{ secrets.SA_PASSWORD }}", "CIvars": [{"name": "SA_PASSWORD", "expression": "secrets.SA_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "accept-terms", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Download SQL Source Control installer\nInstall-Package -Name \"SQL Source Control\" -Source \"Redgate\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a script that automates the source control process\n& \"C:\\Program Files\\RedGate\\SQL Source Control\\SQL Source Control.exe\" -project \"C:\\path\\to\\your\\project\" -server \"<your_sql_server>\" -database \"<your_database>\" -username \"<your_username>\" -password \"<your_password>\" -action \"commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name 'GitHub Action'\ngit config --global user.email 'action@github.com'\ngit add .\ngit commit -m \"Automated SQL Source Control commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41728323_0", "jobs": [{"name": "recover-branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git fetch --all\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify the name of the branch you want to recover\nBRANCH_TO_RECOVER='feature/my-branch'\n\n# Check if the remote branch exists\nif git show-ref --verify --quiet refs/remotes/origin/$BRANCH_TO_RECOVER; then\n  echo \"Branch exists: $BRANCH_TO_RECOVER\"\n  echo \"::set-output name=branch_exists::true\"\nelse\n  echo \"Branch does not exist: $BRANCH_TO_RECOVER\"\n  echo \"::set-output name=branch_exists::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Recover the branch by creating a new branch based on a specific commit or main branch\n# For example, here we recover from the 'main' branch\nBRANCH_TO_RECOVER='feature/my-branch'\nBASE_BRANCH='main'\n\ngit checkout -b $BRANCH_TO_RECOVER origin/$BASE_BRANCH\ngit push origin $BRANCH_TO_RECOVER\necho \"Recovered the branch: $BRANCH_TO_RECOVER\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41734067_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Adjust according to your package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust according to your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local_dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "server_dir", "value": "/path/to/deploy/directory", "CIvars": []}, {"type": "arg", "name": "git", "value": true, "CIvars": []}]}]}]}
{"id": "41743227_0", "jobs": [{"name": "sync", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no user1@source-server 'cd /path/to/source/repo && git pull'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no user1@source-server 'cd /path/to/source/repo && git merge'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no user2@destination-server 'cd /path/to/destination/repo && git pull && git merge && git push'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41763946_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd web-project-directory # Change to your web project directory if necessary\nnpm install\n\ncd ../function-project-directory # Change to your functions project directory\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd web-project-directory # Change to your web project directory if necessary\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd function-project-directory # Change to your functions project directory\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd function-project-directory # Change to your functions project directory\nnpm run deploy # Adjust this command based on your deployment strategy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41771060_0", "jobs": [{"name": "run-playbook", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install ansible\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ansible-playbook path/to/your_playbook.yml -i inventory_file", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41774464_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"${{ secrets.SSH_PRIVATE_KEY }}\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -H github.com >> ~/.ssh/known_hosts\n# Add more hosts if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with your commands that use SSH\nssh -o StrictHostKeyChecking=no user@host \"your-command\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41780995_0", "jobs": [{"name": "sync-variables", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "hashicorp/setup-terraform", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "terraform_version", "value": "1.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -L https://www.chef.io/chef/install.sh | sudo bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "wget https://github.com/OctopusDeploy/OctopusCLI/releases/latest/download/OctopusCLI.zip\nunzip OctopusCLI.zip -d octopus-cli\nsudo mv octopus-cli/octo /usr/local/bin\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you would synchronize your variables\n# Example using Terraform CLI commands\nterraform init\nterraform apply -auto-approve -var-file=variables.tfvars\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you would apply your Chef configurations\nknife book delete <name>\nknife book upload <name>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example of using GitHub CLI to set secrets\ngh secret set MY_SECRET_VARIABLE --body \"secret_value\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "octo push --package ../path-to-your-package --packageversion 1.0.0 --replace-existing\nocto deploy-release --project YourProjectName --version 1.0.0 --deployto YourEnvironment\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional cleanup steps\nterraform destroy -auto-approve\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41787320_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Azure DevOps...\"\n# Replace this with your deployment commands, for example with REST API or Azure CLI\naz devops login --organization https://dev.azure.com/YOUR_ORG --personal-access-token ${{ secrets.AZURE_PAT }}\naz pipelines run --name YOUR_PIPELINE_NAME --branch main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41788889_0", "jobs": [{"name": "rollback", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Get the SHA of the very first commit\ninitial_commit=$(git rev-list --max-parents=0 HEAD)\necho \"Initial commit SHA: $initial_commit\"\necho \"initial_commit_sha=$initial_commit\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Check out the initial commit\ngit checkout ${{ env.initial_commit_sha }}\n\n# Create a new orphan branch with the initial commit\ngit checkout --orphan initial-rollback\ngit commit -m \"Rollback to initial commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin initial-rollback --force\necho \"Rollback to initial commit has been pushed to a new branch called 'initial-rollback'.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41798111_0", "jobs": [{"name": "trigger_build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Trigger the downstream workflow\ncurl -X POST \\\n-H \"Authorization: token $DOWNSREAM_REPO_TOKEN\" \\\n-H \"Accept: application/vnd.github.v3+json\" \\\nhttps://api.github.com/repos/username/downstream-repo/actions/workflows/your_workflow_file.yml/dispatches \\\n-d '{\"ref\": \"main\"}'  # Change the ref accordingly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41798980_0", "jobs": [{"name": "run", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt  # Change as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python your-script.py  # Change to your execution script\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Using GITHUB_TOKEN to interact with another repository\"\n# Example: Clone another repo\ngit clone https://github.com/your-username/another-repo.git\ncd another-repo\ngit config user.name \"Your Name\"\ngit config user.email \"your-email@example.com\"\n\n# Example: Making changes and pushing back\necho \"Making a change\" >> some-file.txt\ngit add some-file.txt\ngit commit -m \"Made a change\"\ngit push origin main  # or the appropriate branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41799526_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t my-app:latest . # Replace 'my-app' with your app name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run -d --name my-app-container my-app:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker stop my-app-container || true\ndocker rm my-app-container || true\ndocker rmi my-app:latest || true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41801814_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gradle-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew build --info", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "debug-apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/outputs/apk/debug/app-debug.apk", "CIvars": []}]}]}]}
{"id": "41808873_0", "jobs": [{"name": "fetch-test-stats", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install requests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "import os\nimport requests\n\n# Parameters\nrepo_owner = 'your-username'  # Change this to your GitHub username or organization\nrepo_name = 'your-repo'        # Change this to your repository name\n\n# GitHub API URL for fetching commits (as an example for getting test results)\nurl = f'https://api.github.com/repos/{repo_owner}/{repo_name}/commits'\n\n# Set up headers\nheaders = {\n    'Authorization': f'token {os.environ[\"GITHUB_TOKEN\"]}',\n    'Accept': 'application/vnd.github.v3+json'\n}\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    # Process data to calculate statistics (this is a placeholder)\n    stats = {\n        'total_commits': len(data),\n        'latest_commit': data[0]['commit']['message']\n    }\n    print(f'Test Statistics: {stats}')\nelse:\n    print(f'Error fetching data: {response.status_code} - {response.json()}')\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41823945_0", "jobs": [{"name": "trigger_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"This job was triggered by an HTTP request!\"\n# Add your scripts/commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41838144_0", "jobs": [{"name": "clone_repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create and switch to the target branch\ngit checkout -b $TARGET_BRANCH\n\n# Clone the repository into the new branch\ngit clone --depth 1 $TARGET_REPO ./temp-repo\ncp -r ./temp-repo/. .  # Copy files from the cloned repo to the current repo\nrm -rf ./temp-repo  # Clean up\n\n# Stage and commit the changes\ngit add .\ngit commit -m \"Cloned repository into $TARGET_BRANCH\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin $TARGET_BRANCH", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41840309_0", "jobs": [{"name": "check-resource-versions", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y curl", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Log in to Concourse\necho \"Logging in to Concourse...\"\ncurl -u \"${ATC_USER}:${ATC_PASSWORD}\" \"${CONCOURSE_URL}/api/v1/teams/your-team-name/pipelines/your-pipeline-name/resources\" | jq '.[] | { name: .name, versions: .versions }'\n\n# Optionally implement your logic to check the resource version frequency\n# For example: check the last_updated or intervals\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41842727_0", "jobs": [{"name": "uname-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker://{{ matrix.image }}", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "uname -a", "CIvars": []}, {"type": "arg", "name": "entrypoint", "value": "/bin/sh", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Checked uname on ${{ matrix.image }}\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41845734_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_HUB_USERNAME }}", "CIvars": [{"name": "DOCKER_HUB_USERNAME", "expression": "secrets.DOCKER_HUB_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_HUB_TOKEN }}", "CIvars": [{"name": "DOCKER_HUB_TOKEN", "expression": "secrets.DOCKER_HUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.QUAY_USERNAME }}", "CIvars": [{"name": "QUAY_USERNAME", "expression": "secrets.QUAY_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.QUAY_TOKEN }}", "CIvars": [{"name": "QUAY_TOKEN", "expression": "secrets.QUAY_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t myusername/myimage:latest .\necho \"Image built locally.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push myusername/myimage:latest\necho \"Image pushed to Docker Hub.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker tag myusername/myimage:latest quay.io/myquayusername/myimage:latest\ndocker push quay.io/myquayusername/myimage:latest\necho \"Image pushed to Quay.io.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41850433_0", "jobs": [{"name": "ibmcloud-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl -sL https://ibm.biz/idt-installer | bash\nibmcloud login --apikey \"${{ secrets.IBMCLOUD_API_KEY }}\" -r \"${{ secrets.IBM_CLOUD_REGION }}\" -g \"${{ secrets.IBM_CLOUD_RESOURCE_GROUP }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ibmcloud plugin install cloudfoundry -r Bluemix\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ibmcloud cf push your-app-name -f path/to/your/manifest.yml -b your-buildpack\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41853004_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install TFS Command Line Tool if needed\n# You may need specific TFS tools depending on your environment\necho \"Deploying to TFS...\"\n\n# Example command to deploy, adjust as necessary\ntf.exe build /v:quiet /collection:${{ env.TFS_URL }} ${{ github.workspace }} /username:${{ secrets.TFS_USERNAME }} /password:${{ secrets.TFS_PASSWORD }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41853739_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Activate your Visual Studio environment\n# You may want to modify the path based on your installation\n& 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\devenv.com'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a solution file named MySolution.sln\n& 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe' MySolution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run tests if any, could be a test command\n& 'C:\\Path\\To\\Your\\TestRunner.exe'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41870299_0", "jobs": [{"name": "replace_paths", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-artifact", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming artifacts are in 'path/to/artifacts'\n# Traverse all files in the folder and make replacements\nfind ./path/to/artifacts -type f | while read file; do\n    sed -i 's|old/path|new/path|g' \"$file\"  # Adjust the paths accordingly\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "modified-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/artifacts", "CIvars": []}]}]}]}
{"id": "41872386_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t my-app:${{ github.sha }} .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push my-app:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > k8s_config\nexport KUBECONFIG=k8s_config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/my-deployment my-app=my-app:${{ github.sha }} --record\nkubectl rollout status deployment/my-deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41876441_0", "jobs": [{"name": "trigger_concourse", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Log in to Concourse\nauth_response=$(curl -s --request POST \"$CONCOURSE_URL/api/v1/creative-race-70258/atc/login\" \\\n  --data '{\"team_name\": \"main\", \"username\": \"'\"$CONCOURSE_USERNAME\"'\", \"password\": \"'\"$CONCOURSE_PASSWORD\"'\"}')\n\naccess_token=$(echo $auth_response | jq -r .access_token)\n\n# Trigger the pipeline\ncurl --request POST \"$CONCOURSE_URL/api/v1/pipelines/$PIPELINE_NAME/runs\" \\\n  -H \"Authorization: Bearer $access_token\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41877064_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn deploy -DaltDeploymentRepository=local::default::file://${{ github.workspace }}/local-repo", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ls -R local-repo\n# You can also include checks or tests for the artifacts if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41883840_0", "jobs": [{"name": "update", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name 'Your GitHub Username'\ngit config --global user.email 'your-email@example.com'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout ${{ github.head_ref }}\ngit fetch origin ${{ github.base_ref }}\ngit merge origin/$GITHUB_BASE_REF --no-edit || echo \"Merge conflicts detected.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin ${{ github.head_ref }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41884730_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building on branch $GITHUB_REF\"\n# Add your build commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41889216_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2021.3.14f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "standalone-linux", "CIvars": []}, {"type": "arg", "name": "buildName", "value": "MyBuildName", "CIvars": []}, {"type": "arg", "name": "buildPath", "value": "build/", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": "./", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "unity-editor -batchmode -quit -projectPath $GITHUB_WORKSPACE -logFile -executeMethod BuildScript.PerformBuild\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41896266_0", "jobs": [{"name": "selenium", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41897677_0", "jobs": [{"name": "virtualization-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install necessary packages for nested virtualization\nsudo apt-get update\nsudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils\n\n# Enable nested virtualization (specific commands depend on the virtualization platform)\necho \"options kvm-intel nested=1\" | sudo tee /etc/modprobe.d/kvm-intel.conf\necho \"options kvm-amd nested=1\" | sudo tee /etc/modprobe.d/kvm-amd.conf\nsudo modprobe -r kvm-intel kvm-amd\nsudo modprobe kvm-intel # or kvm-amd\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with your own commands to run your nested virtualization tests\necho \"Running tests with nested virtualization...\"\n# Example: Run a nested VM here (You should replace with your actual commands)\n# virt-install --name nested-vm --memory 2048 --vcpus 2 --disk size=10 --os-variant ubuntu20.04 --virt-type kvm --cdrom /path/to/iso\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Cleanup any nested VMs if necessary\n# virsh destroy nested-vm\n# virsh undefine nested-vm\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41898026_0", "jobs": [{"name": "calculate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Your logic here (e.g., calculation)\necho \"param_value=Hello World\" >> $GITHUB_ENV\necho \"::set-output name=param_value::Hello World\"\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "use_param", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"The global parameter value is: ${{ needs.calculate.outputs.global_param }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41901140_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploy step would go here.\"  # Here, you would insert deployment commands\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41902802_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41915067_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/build/artifacts", "CIvars": []}]}]}]}
{"id": "41916862_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install  # Assuming you have a Gemfile with necessary gems\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby sort_yaml.rb path/to/input.yaml path/to/output.yaml  # Update the paths as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build  # Builds your Jekyll site\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying site...\"\n# Add your deployment steps here.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41918993_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t my-docker-image .\ndocker run --rm my-docker-image\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run --rm my-docker-image test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker tag my-docker-image:latest my-docker-image:${{ github.sha }}\ndocker push my-docker-image:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41919053_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-Pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-Pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Debug build -quiet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourWatchKitScheme -configuration Debug build -quiet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' -quiet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourWatchKitScheme -destination 'platform=watchOS Simulator,name=Apple Watch Series 7 - 45mm,OS=latest' -quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10058575_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake generate", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}]}]}]}
{"id": "10141640_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This is where you would set up any necessary database config. Ensure your config/database.yml is set properly or handle any secret vars.\necho \"DATABASE_URL=postgres://user:password@localhost:5432/mydatabase\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rake db:deploy  # Adjust this as needed for your Rake tasks\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "101786_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.32", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --notest --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "perlcritic --severity 5 .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -l t/*.t", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cpanm App::cpanminus\ncpanm --installdeps .\nmkdir -p pkg\ntar -czf pkg/myapp.tar.gz .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "myapp-package", "CIvars": []}, {"type": "arg", "name": "path", "value": "pkg/myapp.tar.gz", "CIvars": []}]}]}]}
{"id": "10193828_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install doxygen\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "doxygen Doxyfile  # Ensure Doxyfile is set up correctly in the repo\n# If using Appledoc, the command could be:\n# appledoc --output docs .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -d \"html\" ]; then\n  mv html docs  # Doxygen's HTML output; adjust based on your setup\nfi\n# For Appledoc, you would move its output if in a different directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add docs\ngit commit -m \"Update documentation\" || echo \"No changes to commit\"\ngit push origin main  # Make sure you have the right permissions set\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10232042_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet\npuppet --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\n# If you have a Gemfile for puppet module testing, include it here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here\n# Example of running RSpec tests\nrspec tests/unit\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y puppet-apply\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet apply --modulepath=modules manifests/init.pp  # Adjust according to your module path\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10235026_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=production bundle exec rake assets:precompile", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl https://cli-assets.heroku.com/install.sh | sh\necho \"machine api.heroku.com\" >> ~/.netrc\necho \"  login ${{ secrets.HEROKU_EMAIL }}\" >> ~/.netrc\necho \"  password ${HEROKU_API_KEY}\" >> ~/.netrc\necho \"machine git.heroku.com\" >> ~/.netrc\necho \"  login ${{ secrets.HEROKU_EMAIL }}\" >> ~/.netrc\necho \"  password ${HEROKU_API_KEY}\" >> ~/.netrc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git HEAD:refs/heads/main", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10242059_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github actions/config/database.yml\nRAILS_ENV=test bundle exec rake db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake jasmine:ci\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jasmine-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/jasmine/tests/results", "CIvars": []}]}]}]}
{"id": "10278754_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawrence/actions-cmake", "version": "v2.3.0", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y libdependency-dev  # Install dependencies as needed\n# Add more dependencies as required by your projects\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..  # Configure the project\ncmake --build . --target all -- -j2  # Build the project, adjust the number of jobs as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure  # Run tests and display output on failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build", "CIvars": []}]}]}]}
{"id": "10280526_0", "jobs": [{"name": "coverage-report", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-clover coverage.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\n\\$cloverData = simplexml_load_file('coverage.xml');\n\\$report = '';\n\nforeach (\\$cloverData->file as \\$file) {\n    \\$fileName = (string) \\$file['name'];\n    \\$lines = count(\\$file->lines->line);\n    \\$covered = count(array_filter((array) \\$file->lines->line, function(\\$line) {\n        return (string) \\$line['type'] === 'stmt' && (string) \\$line['count'] > 0;\n    }));\n\n    \\$coverage = \\$covered / \\$lines * 100;\n    \\$report .= \\\"File: \\$fileName - Coverage: \\\".number_format(\\$coverage, 2).\\\"%\\\\n\\\";\n}\n\nfile_put_contents('coverage-report.txt', \\$report);\necho \\$report;\n\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage-report.txt", "CIvars": []}]}]}]}
{"id": "10696112_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Production Server...\"\n# Add deployment commands here, for example:\n# scp -r ./dist user@server:/path/to/deploy\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "channel", "value": "#your-slack-channel", "CIvars": []}, {"type": "arg", "name": "message", "value": "Deployment Successful! \ud83c\udf89", "CIvars": []}, {"type": "arg", "name": "slack-token", "value": "${{ secrets.SLACK_TOKEN }}", "CIvars": [{"name": "SLACK_TOKEN", "expression": "secrets.SLACK_TOKEN", "type": "secret"}]}]}]}]}
{"id": "10747196_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -archivePath MyApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "10803469_2", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "10807480_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty --test --no-column\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Tests passed!\";", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p coverage\nxcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme CODE_COVERAGE=YES\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "CodeCoverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage", "CIvars": []}]}]}]}
{"id": "10815617_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test --jacoco", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn cobertura:cobertura", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cobertura-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/site/cobertura/", "CIvars": []}]}]}, {"name": "cobertura-display", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cobertura-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "cobertura-report", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd cobertura-report\nnpm install -g http-server\nhttp-server -p 8080 & # Serve the report\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "marocchino/sticky-pull-request-comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "GITHUB_TOKEN", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "comment", "value": "Coverage report is available at: [Coverage Report](http://127.0.0.1:8080)", "CIvars": []}]}]}]}
{"id": "11051925_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --frozen-lockfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nRAILS_ENV=test bundle exec rails db:create\nRAILS_ENV=test bundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake test:coverage\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11064453_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install WinRM if necessary\n# Configure WinRM for the target server\n\n$securePassword = ConvertTo-SecureString $WIN_SERVER_PASSWORD -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential ($WIN_SERVER_USER, $securePassword)\n\n# Define the command to deploy the application/code\n$deployCommand = \"Your commands or script to update the application\"\n\n# Using Invoke-Command to run the command on the remote server\nInvoke-Command -ComputerName $WIN_SERVER_IP -Credential $cred -ScriptBlock { $using:deployCommand }\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$securePassword = ConvertTo-SecureString $WIN_SERVER_PASSWORD -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential ($WIN_SERVER_USER, $securePassword)\n\n$deployCommand = \"Your commands or script to update the application\"\n\nInvoke-Command -ComputerName $WIN_SERVER_IP -Credential $cred -ScriptBlock { $using:deployCommand }\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11101725_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have any build steps like npm/Yarn or other build tools. Adjust accordingly.\necho \"Building assets if needed...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "ftp.example.com", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/wordpress/directory", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to WordPress site completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11117334_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.10.8", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "11148362_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/server/directory", "CIvars": []}, {"type": "arg", "name": "git-ftp-args", "value": "--insecure", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -u $FTP_USERNAME:$FTP_PASSWORD ftp://$FTP_SERVER/path/to/cache/ -Q \"DELE cache_file_name\"  # Example to clear cache\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1116088_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal --logger \"trx;LogFileName=TestResults.trx\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.nunit_tests.outcome }}\" != \"success\" ]; then\n  echo \"NUnit tests failed. Reporting to CruiseControl.NET server...\"\n  curl -X POST https://your-cruisecontrol-server/report \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"project\": \"YourProjectName\",\n          \"status\": \"failed\",\n          \"log\": \"${{ steps.nunit_tests.outputs.test-results }}\"\n        }'\n  exit 1\nelse\n  echo \"All NUnit tests passed!\"\n  curl -X POST https://your-cruisecontrol-server/report \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n          \"project\": \"YourProjectName\",\n          \"status\": \"success\"\n        }'\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "TestResults.trx", "CIvars": []}]}]}]}
{"id": "11282972_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl https://cli-assets.heroku.com/install.sh | sh\necho 'export PATH=\"/usr/local/heroku/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku auth:token", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11351224_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Install dependencies from requirements file (if any).\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./scripts/setup-environment.ps1  # Path to your PowerShell script.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python ./scripts/build.py  # Path to your Python build script.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pwsh ./scripts/run-tests.ps1  # Path to your PowerShell test script.\npython -m unittest discover -s tests/  # Running python unittests (modify as needed).\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output/", "CIvars": []}]}]}]}
{"id": "11364237_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp phpunit.xml.dist phpunit.xml  # Adjust if your config is named differently\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=mysql://user:password@localhost:3306/test_db\" >> .env\necho \"COMPOSE_NAME=${{ github.repository }}\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phing test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports/", "CIvars": []}]}]}]}
{"id": "11762089_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build ./${{ matrix.service }} -t myapp/${{ matrix.service }}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run myapp/${{ matrix.service }}:latest npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run myapp/${{ matrix.service }}:latest npm run test:integration\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build ./${{ matrix.service }} -t myapp/${{ matrix.service }}:latest\ndocker push myapp/${{ matrix.service }}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a deployment script or a command to deploy your application\n./deploy.sh\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "CI/CD pipeline completed.", "CIvars": []}]}]}]}
{"id": "11769219_0", "jobs": [{"name": "checkout-and-run-chef", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the path to your Chef configuration (e.g. repo, cookbooks)\ncd your-chef-directory\nchef-client -z -o 'recipe[your_cookbook::default]'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11783854_0", "jobs": [{"name": "phpspec", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpspec run --format=pretty", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpspec run --format=pretty --coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}]}]}
{"id": "11799340_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader\n# Add any other dependency installations as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start SSH Agent and add the key\neval \"$(ssh-agent -s)\"\necho \"$SSH_PRIVATE_KEY\" | ssh-add -\n# Ensure the host is known (skip strict host key checking, if necessary)\nmkdir -p ~/.ssh\nssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts\n\n# Change to the deployment path\nssh $DEPLOY_USER@$DEPLOY_SERVER \"cd $DEPLOY_PATH && git pull\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11832674_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, json, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DB_CONNECTION=mysql\" >> .env\necho \"DB_HOST=127.0.0.1\" >> .env\necho \"DB_PORT=3306\" >> .env\necho \"DB_DATABASE=your_database_name\" >> .env\necho \"DB_USERNAME=root\" >> .env\necho \"DB_PASSWORD=your_root_password\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --format=pretty", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "11852982_0", "jobs": [{"name": "create-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/create-repo", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "folder-name/repo-name", "CIvars": []}, {"type": "arg", "name": "private", "value": true, "CIvars": []}, {"type": "arg", "name": "description", "value": "This is a new repository created by GitHub Actions", "CIvars": []}, {"type": "arg", "name": "visibility", "value": "public", "CIvars": []}]}]}]}
{"id": "1198789_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.30", "CIvars": []}, {"type": "arg", "name": "install", "value": "cpanm", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -l t/*.t", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1200721_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f package.json ]; then\n  npm install\nelse\n  echo \"No package.json found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f package.json ]; then\n  npm test\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f requirements.txt ]; then\n  pip install -r requirements.txt\nelse\n  echo \"No requirements.txt found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f requirements.txt ]; then\n  pytest  # or your preferred test command\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f pom.xml ]; then\n  mvn install\nelif [ -f build.gradle ]; then\n  gradle build\nelse\n  echo \"No build file found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-go", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "go-version", "value": "1.18", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f go.mod ]; then\n  go mod tidy\nelse\n  echo \"No go.mod found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f go.mod ]; then\n  go test ./...\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Gemfile ]; then\n  bundle install\nelse\n  echo \"No Gemfile found\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f Gemfile ]; then\n  bundle exec rspec  # or your preferred test command\nelse\n  echo \"No tests to run\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1207771_0", "jobs": [{"name": "send_notification", "steps": [{"type": "gh_action", "cmd": "", "name": "fikovnik/teams-notifier", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "webhook-url", "value": "${{ secrets.TEAMS_WEBHOOK_URL }}", "CIvars": [{"name": "TEAMS_WEBHOOK_URL", "expression": "secrets.TEAMS_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "A new commit has been pushed to the main branch!\nCommit message: ${{ github.event.head_commit.message }}\nAuthor: ${{ github.event.head_commit.author.name }}\nView commit: ${{ github.event.head_commit.url }}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.head_commit.author.name", "expression": "github.event.head_commit.author.name", "type": "context"}, {"name": "event.head_commit.url", "expression": "github.event.head_commit.url", "type": "context"}]}]}]}]}
{"id": "12242368_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nRAILS_ENV=test bin/rails db:create\nRAILS_ENV=test bin/rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec   # Use this if you are using RSpec for testing\n# For Minitest, use: bundle exec rake test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12269007_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create RAILS_ENV=test\nrails db:migrate RAILS_ENV=test\nbundle exec rspec  # Use your test suite command, e.g., rspec, minitest, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/<your-heroku-app-name>.git\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12309720_0", "jobs": [{"name": "handle-branch-deletion", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-notify", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "Branch deleted: ${GITHUB_REF}", "CIvars": [{"name": "GITHUB_REF", "expression": "GITHUB_REF", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources for deleted branch: ${GITHUB_REF}\"\n# Add your cleanup commands here\n# For example, delete specific files, or clear cache\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12313093_0", "jobs": [{"name": "start-rails-server", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler && bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "nohup rails server -b 0.0.0.0 -p 3000 &\nuntil curl --output /dev/null --silent --head --fail http://localhost:3000; do\n  echo 'Waiting for server to start...'\n  sleep 5\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Server is up and running!\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Find the PID of the Rails server and terminate it\nkill $(ps aux | grep '[r]ails server' | awk '{print $2}')\necho \"Rails server has been shut down.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12345262_0", "jobs": [{"name": "view-logs", "steps": [{"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Fetch logs using the GitHub API\necho \"Fetching recent commit logs...\"\n\n# Fetch logs\ncurl -H \"Authorization: token $GITHUB_TOKEN\" \\\n     -H \"Accept: application/vnd.github.v3+json\" \\\n     \"https://api.github.com/repos/${{ github.repository }}/commits\" | \\\njq '.[].commit.message' # Display commit messages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12409546_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "find . -name '*.php' -exec php -l {} \\;", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Unit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/php-cs-fixer fix --dry-run --diff", "name": "", "version": "", "shell": "bash"}]}, {"name": "static_analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12526851_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # No --fail-fast option here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test_results\ncp -r spec/reports/* test_results/ || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test_results/", "CIvars": []}]}]}]}
{"id": "12555390_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "4.7.x", "CIvars": []}, {"type": "arg", "name": "include-prerelease", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "choco install visualstudio2019community --package-parameters \"--allWorkloads\" --yes --force\nchoco install visualstudio2019buildtools --package-parameters \"--allWorkloads\" --yes --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" YourSolution.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" YourTestProject.csproj /p:Configuration=Release /p:Platform=\"Any CPU\" /p:TargetFramework=net472 /p:RunTest=TRUE\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12677905_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml  # You might need to create this file\nRAILS_ENV=test bundle exec rails db:create\nRAILS_ENV=test bundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec  # or whatever test framework you use\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-heroku-app.git  # Replace with your Heroku app name\ngit push heroku main  # Push to Heroku main branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12704139_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2012", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set environment variable with the encrypted password\n# Use a proper base64 or custom encryption, this is just an example\necho \"MY_ENCRYPTED_PASSWORD=$(echo -n 'YourActualPassword' | base64)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here, we retrieve and decode the password\necho \"DECRYPTED_PASSWORD=$(echo $MY_ENCRYPTED_PASSWORD | base64 --decode)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# The MSBuild task to publish using the decrypted password\n& \"C:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe\" YourProject.sln /p:PublishProfile=YourPublishProfile /p:Password=$DECRYPTED_PASSWORD\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clean up any sensitive information if needed\necho \"Cleaning up...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12755268_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unused", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12781627_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rails\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:migrate RAILS_ENV=test\nbundle exec rspec  # Replace with your test framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/YOUR_APP_NAME.git\ngit push heroku main  # Change to your branch if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "12817011_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# If you are using CocoaPods, uncomment the next line\n# pod install\n# If you are using Swift Package Manager, uncomment the next line\n# swift package update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProjectName.xcodeproj \\\n           -scheme YourSchemeName \\\n           -destination 'platform=iOS Simulator,name=iPhone 14' \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProjectName.xcodeproj \\\n                -scheme YourSchemeName \\\n                -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProjectName.xcodeproj \\\n           -scheme YourSchemeName \\\n           -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n           archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourAppArchive", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "12905060_1", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php send_email.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13040718_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13075890_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "javac ModifyExitCode.java\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "java ModifyExitCode ${{ github.event.action }} # Pass arguments to your Java program\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.exit_code_run.outcome }}\" == \"failure\" ]]; then\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13078033_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "fivemat/xcode-build", "version": "v1.0", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CODESIGN_KEY }}\" | base64 --decode > ./cert.p12\necho \"${{ secrets.CODESIGN_PASSWORD }}\" > ./cert_password.txt\nsecurity create-keychain -p \"\" build.keychain\nsecurity import ./cert.p12 -k ~/Library/Keychains/build.keychain -P \"${{ secrets.CODESIGN_PASSWORD }}\" -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory  # Navigate to your project directory\npod install  # or any other dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13205032_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install git-ftp", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Configure Git-FTP\ngit config git-ftp.url \"ftp://$FTP_SERVER\"\ngit config git-ftp.username \"$FTP_USERNAME\"\ngit config git-ftp.password \"$FTP_PASSWORD\"\n\n# Check if there are changes\ngit ftp fetch || true  # Fetch the status, ignore errors if the directory is missing\n\n# Only upload if there are changes\nif git diff --quiet HEAD HEAD~1; then\n  echo \"No changes to deploy.\"\nelse\n  git ftp push --dry-run | grep -v 'No changes' || echo \"Changes detected, deploying...\"\n  git ftp push\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "132139_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "13268577_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_APP_NAME", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "13369597_1", "jobs": [{"name": "label-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php path/to/check_labels.php # Adjust the path as needed.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13372566_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "tcrundall/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  sudo gem install cocoapods\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13474041_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test:integration", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}]}, {"name": "sonarcloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "v1.4.0", "shell": "bash", "with": [{"type": "arg", "name": "extra-args", "value": "-Dsonar.projectKey=YOUR_PROJECT_KEY -Dsonar.organization=YOUR_ORG_NAME -Dsonar.sources=./src -Dsonar.tests=./tests -Dsonar.coverage.exclusions=**/node_modules/**,**/*.spec.js\n", "CIvars": []}]}]}]}
{"id": "13573708_1", "jobs": [{"name": "pull_repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install git", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby pull_repositories.rb", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13592348_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Adjust if you're using a different testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install rubocop\nrubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"All checks passed!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Some checks failed, please review!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13636466_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "get-notify/action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "The specs have failed! Please check the Actions tab for details.", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "13681510_0", "jobs": [{"name": "monticello", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "smalltalkhub/smalltalk:latest", "version": null, "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Assuming you have a script or command to load your Monticello packages\necho \"Loading Monticello packages\"\n# Example of loading a Monticello baseline\n./path/to/your/script_to_load_monticello.st\n\n# You might want to run tests if applicable\necho \"Running tests\"\n./path/to/your/test_script.st\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources if needed\"\n# Include any clean-up commands you want to run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13701517_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish --no-restore", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.1", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./publish", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "${{ secrets.DEPLOYMENT_PATH }}", "CIvars": [{"name": "DEPLOYMENT_PATH", "expression": "secrets.DEPLOYMENT_PATH", "type": "secret"}]}]}]}]}
{"id": "1374441_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem build your_gem_name.gemspec  # Replace with your gemspec name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem push your_gem_name-*.gem --key ${{ secrets.RUBYGEMS_API_KEY }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13801836_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-jdk", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package --file pom.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v4.1.9", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "13862033_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "compiler", "value": "gcc", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ntar -cvzf artifacts.tar.gz .  # Create an archive of the build artifacts\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cpp-build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/artifacts.tar.gz", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm -rf build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "13894020_1", "jobs": [{"name": "trigger_repo_a", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "username/repo-a", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "create-symlink.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "13967560_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Test Results: Check the logs above for output.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14110639_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14115385_0", "jobs": [{"name": "identify_build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=token::${{ secrets.GITHUB_TOKEN }}\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Fetching workflow runs...\"\nRUNS=$(curl -s -H \"Authorization: token ${{ steps.get_token.outputs.token }}\" \\\n  \"https://api.github.com/repos/${{ github.repository }}/actions/runs\" \\\n  | jq '.workflow_runs | map({id: .id, name: .name, status: .status, conclusion: .conclusion, created_at: .created_at})')\necho \"::set-output name=runs::$RUNS\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Latest Build Information:\"\necho \"${{ steps.workflow_runs.outputs.runs }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "LATEST_RUN=$(echo \"${{ steps.workflow_runs.outputs.runs }}\" | jq '.[0]')\necho \"::set-output name=latest_run::$LATEST_RUN\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Latest Build ID: ${{ steps.latest_run.outputs.latest_run.id }}\"\necho \"Latest Build Name: ${{ steps.latest_run.outputs.latest_run.name }}\"\necho \"Status: ${{ steps.latest_run.outputs.latest_run.status }}\"\necho \"Conclusion: ${{ steps.latest_run.outputs.latest_run.conclusion }}\"\necho \"Created At: ${{ steps.latest_run.outputs.latest_run.created_at }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1411641_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --reporter=json > test-results.json", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results.json", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "${{ secrets.SMTP_USER }}", "CIvars": [{"name": "SMTP_USER", "expression": "secrets.SMTP_USER", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "CI Build Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The CI build finished with a status of ${{ job.status }}.\nTest results have been generated.\nHere are the results:\n```json\n$(cat test-results.json)\n```\n", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm test-results.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "141319_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\necho \"::add-path::${HOME}/.composer/vendor/bin\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14194509_0", "jobs": [{"name": "syntax-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "find . -name '*.php' -exec php -l {} \\; || exit 1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14274293_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -eq 0 ]; then\n  echo \"Build successful!\"\n  echo \"::set-output name=status::success\"\nelse\n  echo \"Build failed!\"\n  echo \"::set-output name=status::failure\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-action-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Build Status: ${{ steps.build_status.outputs.status }}\n", "CIvars": [{"name": "build_status.outputs.status", "expression": "steps.build_status.outputs.status", "type": "steps"}]}]}]}]}
{"id": "14295751_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"A new commit has been pushed to the 'feature-branch'.\"\necho \"You can clone this branch with the following command:\"\necho \"git clone -b feature-branch https://github.com/USERNAME/REPO.git\"\necho \"Please check the branch for the latest changes.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Branch Shared: feature-branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "The `feature-branch` has been updated with new changes.\nYou can review it [here](https://github.com/USERNAME/REPO/tree/feature-branch).\nPlease reach out to the repository owner for access.\n", "CIvars": []}, {"type": "arg", "name": "labels", "value": "notification", "CIvars": []}, {"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "14333096_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install capistrano\ngem install capistrano-rails # if you're using capistrano-rails\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --frozen-lockfile # if you are using Yarn for JS dependencies\n# npm install --ci # Uncomment if using npm instead of Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh # Create SSH directory\necho \"${SSH_KEY}\" > ~/.ssh/id_rsa # Add private key\nchmod 600 ~/.ssh/id_rsa # Set permissions for the private key\nssh-keyscan -H ${HOST} >> ~/.ssh/known_hosts # Add host to known hosts\nbundle exec cap production deploy # Run your Capistrano deployment command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -f ~/.ssh/id_rsa", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14401278_0", "jobs": [{"name": "install-app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release -sdk iphonesimulator\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "APP_PATH=$(find ./build/ -name '*.app' -print -quit)\necho \"APP_PATH=$APP_PATH\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl boot \"iPhone 14\" # Or the simulator you want to use\nsleep 10 # Give the simulator some time to boot\nxcrun simctl install booted ${{ env.APP_PATH }}\nxcrun simctl launch booted com.yourcompany.yourapp # Replace with your app's bundle identifier\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14410567_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, sqlite3", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-html coverage-report", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage-report", "CIvars": []}]}]}]}
{"id": "144274_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}]}]}
{"id": "14482636_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14485983_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-progress --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can customize the command to run your Twig tests\nvendor/bin/phpunit --testsuite TwigTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "apt-get update\napt-get install -y tidy\n# Assuming your HTML files are in a `html` directory\ntidy -c -q html/*.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g htmlhint\nhtmlhint html/*.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Using twigcs for Twig standards\ncomposer require --dev squizlabs/php_codesniffer\nvendor/bin/phpcs --standard=PSR12 --extensions=twig twig/**/*.twig\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14541617_0", "jobs": [{"name": "upstream", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Dummy command to simulate upstream work\necho \"Upstream Job is running...\"\n# Commit some changes (optional)\necho \"Changes made\" >> changes.txt\ngit config user.name \"Your Name\"\ngit config user.email \"your_email@example.com\"\ngit add changes.txt\ngit commit -m \"Making changes\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "downstream", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the authors of the last commits made in the last push\nauthors=$(git log --format='%ae' -n 5) # Adjust `n` as needed\necho \"repo_authors=${authors}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Notification: Change Made to Repository", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nChanges have been made to the upstream repository. \n\nBest,\nYour Team\n", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ env.repo_authors }}", "CIvars": [{"name": "repo_authors", "expression": "env.repo_authors", "type": "env"}]}]}]}]}
{"id": "14765725_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Fetch the current version\ncurrent_version=$(grep -oP '\\d+\\.\\d+\\.\\d+' lib/gem_name/version.rb)\nIFS='.' read -r major minor patch <<< \"$current_version\"\n\n# Increment the version (for example, increment patch version)\nnew_patch=$((patch + 1))\nnew_version=\"$major.$minor.$new_patch\"\n\n# Update the version in the gemspec and version files\nsed -i \"s/$current_version/$new_version/g\" lib/gem_name/version.rb\nsed -i \"s/version = \\\"$current_version\\\"/version = \\\"$new_version\\\"/g\" gem_name.gemspec\n\necho \"New version: $new_version\"\necho \"::set-output name=new_version::$new_version\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"github-actions@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit commit -am \"Bump version to ${{ steps.bump_version.outputs.new_version }}\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build gem_name.gemspec\ngem push gem_name-*.gem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14769258_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git log --pretty=format:'%ae' | sort -u > authors.txt\necho \"::set-output name=authors::$(cat authors.txt | tr '\\n' ',')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Build Failure Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build for commit `${{ github.sha }}` has failed. Please investigate the issue.", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "to", "value": "${{ steps.get_authors.outputs.authors }}", "CIvars": [{"name": "get_authors.outputs.authors", "expression": "steps.get_authors.outputs.authors", "type": "steps"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_FROM }}", "CIvars": [{"name": "EMAIL_FROM", "expression": "secrets.EMAIL_FROM", "type": "secret"}]}]}]}]}
{"id": "14776321_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "s4u/setup-maven", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "maven-version", "value": "3.8.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py collectstatic --noinput", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t your-django-app-name .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.DOCKER_HUB_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_HUB_USERNAME }}\" --password-stdin\ndocker tag your-django-app-name your-dockerhub-username/your-django-app-name:latest\ndocker push your-dockerhub-username/your-django-app-name:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\nssh -o StrictHostKeyChecking=no -i private_key.pem user@your-server-ip 'docker pull your-dockerhub-username/your-django-app-name:latest && docker-compose up -d'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14814644_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore ${{ matrix.project }}/${{ matrix.project }}.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ${{ matrix.project }}/${{ matrix.project }}.csproj --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish ${{ matrix.project }}/${{ matrix.project }}.csproj --configuration Release --output ${{ github.workspace }}/${{ matrix.project }}/publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_WEB_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "${{ github.workspace }}/${{ matrix.project }}/publish", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}, {"name": "project", "expression": "matrix.project", "type": "matrix"}]}]}]}]}
{"id": "14913586_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\nscp -o StrictHostKeyChecking=no -r ./path/to/your/application $USER@$HOST:/path/to/deployment/\nssh -o StrictHostKeyChecking=no $USER@$HOST 'cd /path/to/deployment && php artisan migrate'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "14932150_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull_request_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge_method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "commit_title", "value": "Auto Merged Pull Request #${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "commit_message", "value": "This pull request has been automatically merged by GitHub Actions", "CIvars": []}, {"type": "arg", "name": "delete_branch", "value": true, "CIvars": []}]}]}]}
{"id": "1510771_0", "jobs": [{"name": "diagnose-timeouts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install any dependencies your CCNet requires\n# For example, using NuGet\ndotnet restore\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace CCNetPath with the actual path to your CCNet installation\nCCNetPath=\"C:\\path\\to\\ccnet\\\"\nccnet.exe //diagnostics\n# You can also check logs or perform any additional commands to gather data\n# E.g., analyzing log file for timeouts\n$logPath = \"${{ github.workspace }}\\ccnet\\logs\"\nGet-Content \"$logPath\\ccnet.log\" | Select-String -Pattern \"timeout\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ccnet-logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "C:\\path\\to\\ccnet\\logs\\*.log  # Adjust as necessary\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "some/notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "The diagnostic run for CCNet has completed. Please check the logs.", "CIvars": []}]}]}]}
{"id": "152579_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "soapdog/coverage-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "./coverage", "CIvars": []}]}]}]}
{"id": "15281504_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "setup-msbuild/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "2012", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourDatabaseProject.sqlproj /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfile.pubxml /p:DbConnectionString=\"YourConnectionString\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1544119_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode_13.4.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15509677_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nRAILS_ENV=test bundle exec rails db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1561923_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name Pester -SkipPublisherCheck -Force -Scope CurrentUser\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": ".\\scripts\\YourScript.ps1\n# or run a test if you have one\nInvoke-Pester .\\tests\\YourTest.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if ($LASTEXITCODE -ne 0) {\n  Write-Host \"Error: The last command failed with exit code $LASTEXITCODE.\"\n  exit $LASTEXITCODE\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15767089_0", "jobs": [{"name": "check-slave-status", "steps": [{"type": "shell_cmd", "cmd": "# Sample script to check if slave is offline\n# Replace this with your actual logic\nSLAVE_STATUS=$(curl -s http://your-slave-address/status)\nif [[ \"$SLAVE_STATUS\" == \"offline\" ]]; then\n  echo \"slave_status=offline\" >> $GITHUB_ENV\nelse\n  echo \"slave_status=online\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendgrid-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "your-sender-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Slave Offline Alert", "CIvars": []}, {"type": "arg", "name": "content", "value": "Attention! The slave is currently offline. Please check the status.\n", "CIvars": []}]}]}]}
{"id": "15814307_0", "jobs": [{"name": "R-CMD-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('devtools')\ndevtools::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check --as-cran .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"library(testthat); test_dir('tests/testthat')\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"covr::codecov()\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15819946_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your custom Minitest runner\nbundle exec ruby -I test your_custom_minitest_runner.rb\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you are using minitest-ci for test reporting\nif [[ -f 'test/reports/minitest_report.xml' ]]; then\n  echo \"Uploading test report...\"\n  # Upload the test result to the CI reporting service\n  # Here you might want to modify this command based on your CI report configuration\n  # For example, if you have some specific command or API call\n  # Example: bundle exec ci_reporter --format=xml --output=report.json\nelse\n  echo \"No test report found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "15825770_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "const pr_number = context.payload.pull_request.number;\nconst message = \"\u2705 This pull request is good to merge!\";\nawait github.issues.createComment({\n  ...context.repo,\n  issue_number: pr_number,\n  body: message\n});\n", "CIvars": []}]}]}]}
{"id": "15890547_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"${{ secrets.DEPLOY_KEY }}\" >> ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cap production deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1607682_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a deploy script in your repository\nruby script/deploy.rb\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start CruiseControl.rb in production mode\n# Adjust the path if your CruiseControl.rb is in a different directory\nnohup ruby -rubygems -e 'require \"cruise_control\" ; CruiseControl::Application.run' &\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optionally, insert a wait time or check to confirm CC server is running\nsleep 10  # Adjust the sleep time as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16086932_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "R -e \"install.packages('constroptim')\"\nR -e \"install.packages('ggplot2')\" # Include any other dependencies needed.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R # Replace with your actual R script name.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16244738_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysql, mysqli, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}, {"type": "arg", "name": "ini_values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16306012_0", "jobs": [{"name": "check_duplicates", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch origin +refs/pull/*/merge:refs/remotes/origin/pr/*\ngit checkout ${{ github.head_ref }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=base_branch::$(echo ${GITHUB_BASE_REF})\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "BASE_BRANCH=\"${{ steps.get_base_branch.outputs.base_branch }}\"\necho \"Checking for duplicate commits against ${BASE_BRANCH}\"\n\n# Get the commits on the current PR branch that are not in the base branch\ngit log --oneline ${BASE_BRANCH}..${GITHUB_SHA} > commits.txt\n\n# Get the commits that are already in the base branch\ngit log --oneline ${BASE_BRANCH}.. | grep -Ff commits.txt > duplicates.txt || true\n\n# Count duplicate commits\nDUPLICATES_COUNT=$(wc -l < duplicates.txt)\n\nif [ $DUPLICATES_COUNT -gt 0 ]; then\n  echo \"Found ${DUPLICATES_COUNT} duplicate commits in the pull request.\"\n  echo \"::set-output name=duplicates::true\"\n  cat duplicates.txt\nelse\n  echo \"No duplicate commits found.\"\n  echo \"::set-output name=duplicates::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "\u26a0\ufe0f Your pull request contains some commits that are already present in the base branch:\n```bash\n$(cat duplicates.txt)\n```\nPlease consider removing these commits to clean up your PR history.\n", "CIvars": []}]}]}]}
{"id": "16366517_0", "jobs": [{"name": "code-quality", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "coinmarketcap/action-composer", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "~/.composer/vendor/bin/phpcs --standard=ruleset.xml path/to/your/code\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1640312_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you're using a package manager like CocoaPods or Carthage\npod install  # For CocoaPods\n# or\n# carthage bootstrap --platform macOS  # For Carthage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourSchemeName -configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProject.xcodeproj -scheme YourSchemeName -configuration Debug\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16416917_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppUITests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12' test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "DerivedData/YourApp/Logs/Test/", "CIvars": []}]}]}]}
{"id": "1642381_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "svn-tools/svn-checkout", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "<SVN_REPOSITORY_URL>", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SVN_USERNAME }}", "CIvars": [{"name": "SVN_USERNAME", "expression": "secrets.SVN_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SVN_PASSWORD }}", "CIvars": [{"name": "SVN_PASSWORD", "expression": "secrets.SVN_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/project.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build path/to/your/project.csproj --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish path/to/your/project.csproj --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "aspnet-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output", "CIvars": []}]}]}]}
{"id": "16440059_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -l $(find . -name '*.php')", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can include any build steps necessary for your application, such as:\n# - asset compilation\n# - preparing files for deployment\necho \"Preparing package for deployment...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "php-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/package", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "php-artifact", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying...\"\n# Implement deployment logic here\n# For example, you could use:\n# - Powershell to deploy to an Azure Web App\n# - Use FTP to upload files\n# This is just a placeholder; fill in with your actual deployment command.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16570781_0", "jobs": [{"name": "reverse-bundle-install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --without env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify the gems you want to uninstall\nBUNDLE_GEMFILE=Gemfile bundle exec gem list | grep -v 'env' | awk '{print $1}' | xargs gem uninstall -x\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# List installed gems to confirm uninstallation\ngem list\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16695038_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running parent build steps...\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peterjuras/trigger-workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "owner", "value": "${{ github.repository_owner }}", "CIvars": [{"name": "repository_owner", "expression": "github.repository_owner", "type": "context"}]}, {"type": "arg", "name": "repo", "value": "your-repo-name", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "child.yml", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "16748115_0", "jobs": [{"name": "modify-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Adjust according to your project (e.g., `yarn install`)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "node modify-pr.js # A script to modify the PR content as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thanks for your contribution! \nYour PR has been modified successfully. \n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\ngit add .\ngit commit -m \"Automated modifications to PR\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1685111_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:schema:load RAILS_ENV=test\nbundle exec rspec # Change this line if you are using a different testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails assets:precompile", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --format SimpleCov::Formatter\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16932635_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew check", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install\nnpm run lint\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/libs/*.jar", "CIvars": []}]}]}, {"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Pull Request Title: ${{ github.event.pull_request.title }}\"\necho \"Pull Request Body: ${{ github.event.pull_request.body }}\"\necho \"Author: ${{ github.event.pull_request.user.login }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thank you for your contribution! Your pull request is under review. Please ensure all checks pass.\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Notify the team that a PR has been opened for review.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "16947246_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.32", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "perl Makefile.PL && make && make test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"=== Build Logs ===\"\ncat build.log\necho \"=== Test Logs ===\"\ncat test.log\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17026405_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, json, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer:v2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --bootstrap vendor/autoload.php tests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"One or more tests failed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17092599_0", "jobs": [{"name": "performance-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y default-jdk wget\nwget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz\ntar -xzf apache-jmeter-5.5.tgz\necho \"export PATH=\\$PATH:$(pwd)/apache-jmeter-5.5/bin\" >> $BASH_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "jmeter -n -t ./tests/YourTestPlan.jmx -l ./results/results.jtl -j ./results/jmeter.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "BlazeMeter/BlazeMeter-Github-Actions", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "apiKey", "value": "${{ secrets.BLAZEMETER_API_KEY }}", "CIvars": [{"name": "BLAZEMETER_API_KEY", "expression": "secrets.BLAZEMETER_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "jmeterResultsFile", "value": "./results/results.jtl", "CIvars": []}, {"type": "arg", "name": "projectName", "value": "YourProjectName", "CIvars": []}, {"type": "arg", "name": "testName", "value": "Performance Test - ${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "STATUS_URL=\"https://a2.blazemeter.com/api/v1/test/${{ steps.upload_results.outputs.testId }}\"\nRESULT=$(curl -s -H \"X-API-Key: ${{ secrets.BLAZEMETER_API_KEY }}\" $STATUS_URL)\n\nSTATUS=$(echo $RESULT | jq -r '.status')\n\necho \"Test Status: $STATUS\"\n\nif [[ \"$STATUS\" == \"finished\" ]]; then\n  SCORE=$(echo $RESULT | jq -r '.score')\n  echo \"Performance Score: $SCORE\"\n\n  if [[ $SCORE -lt 70 ]]; then\n    echo \"Performance test failed. Score below threshold.\"\n    exit 1\n  else\n    echo \"Performance test passed.\"\n  fi\nelse\n  echo \"Test did not finish properly.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ./publish-results\ncp ./results/results.jtl ./publish-results/\ncp ./results/jmeter.log ./publish-results/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jmeter-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./publish-results", "CIvars": []}]}]}]}
{"id": "17126099_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.3", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, bcmath, sqlite3, json", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -R /path/to/drupal7 /path/to/drupal\ncp /path/to/drupal/sites/default/default.settings.php /path/to/drupal/sites/default/settings.php\n# Set up the database connection or any further configuration needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Put any commands to set up your database here\n# Example: drush si -y\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.composer/cache\nvendor\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "17201345_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Or your testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.cloudbees.com/v1/deploy\" \\\n-H \"Authorization: Bearer $CLOUDBEES_API_TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n      \"appName\": \"your-app-name\",\n      \"env\": {\n          \"RAILS_ENV\": \"production\"\n      }\n    }'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17277871_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer audit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "17302693_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release clean build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12' | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyApp-Build", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/build/output", "CIvars": []}]}]}]}
{"id": "17346137_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.13.9", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "strategy", "value": "git", "CIvars": []}]}]}]}
{"id": "17405128_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install  # If you're using JavaScript with Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust according to your test suite\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install  # If you're using JavaScript with Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-app-name.git  # Replace with your Heroku app name\ngit push heroku main  # Deploy to the main branch on Heroku\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17414469_0", "jobs": [{"name": "behat-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gettext", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mysql -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e \"CREATE DATABASE my_database_name;\"\n# Ensure you have set up your database using GitHub Secrets\n# Replace `my_database_name` with your actual database name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat -f pretty --tags 'your_jira_issue_tag'  # Replace 'your_jira_issue_tag' with appropriate tag\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17424733_0", "jobs": [{"name": "run-puppet", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet apply path/to/your/manifest.pp  # Specify the path to your manifest file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional: You can add steps here to clean up after your Puppet run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17457842_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ matrix.environment }}\" == \"development\" ]; then\n  echo \"BEHAT_ENV=development\" >> $GITHUB_ENV\n  echo \"BEHAT_DB_URL=mysql://user:password@localhost/development_db\" >> $GITHUB_ENV\nelif [ \"${{ matrix.environment }}\" == \"staging\" ]; then\n  echo \"BEHAT_ENV=staging\" >> $GITHUB_ENV\n  echo \"BEHAT_DB_URL=mysql://user:password@localhost/staging_db\" >> $GITHUB_ENV\nelif [ \"${{ matrix.environment }}\" == \"production\" ]; then\n  echo \"BEHAT_ENV=production\" >> $GITHUB_ENV\n  echo \"BEHAT_DB_URL=mysql://user:password@localhost/production_db\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --config behat.yml --env $BEHAT_ENV\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17511251_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# here you can add commands to run your tests\n./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can add build commands here, if necessary\necho \"Building the project...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the server...\"\n# Add deployment commands like rsync, scp, etc. here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "176273_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "hashicorp/setup-packer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "1.8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "packer validate ./path/to/your/packer.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "packer build -machine-readable ./path/to/your/packer.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes your build process outputs an image file (e.g. .img, .box etc.)\nmkdir -p artifacts\ncp output-image-file.ext artifacts/  # change to actual output file\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vm-image-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "artifacts/output-image-file.ext", "CIvars": []}]}]}]}
{"id": "17634760_0", "jobs": [{"name": "clone", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git clone https://github.com/yourusername/another-repo.git\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -s https://getcomposer.org/installer | php -- --install-dir=bin --filename=composer\nphp bin/composer require --dev phing/phing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phing deploy  # Adjust this to your specific build target\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17650397_0", "jobs": [{"name": "phpcs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "intl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "export PATH=\"$HOME/.composer/vendor/bin:$PATH\" # Make sure phpcs is in PATH\nphpcs --standard=PSR12 --report=checkstyle --report-file=phpcs-report.xml .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "phpcs-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "phpcs-report.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if grep -q '<error ' phpcs-report.xml; then\n  echo \"PHP_CodeSniffer found issues.\";\n  exit 1;\nelse\n  echo \"No issues found.\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17678306_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "uk-install", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application\"\n# Insert your deployment script here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17710097_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_DEVOPS_PAT }}\" | az devops login --organization https://dev.azure.com/your-organization\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az pipelines run --name \"Pipeline-Name\" --project \"Project-Name\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17738234_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake generate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd public\ngit init\ngit config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\ngit add .\ngit commit -m \"Deploying to GitHub Pages\"\ngit push --force \"https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git\" master:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17803165_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building and testing application...\"\n# Add your build commands here\n# Example: npm install && npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "benc-uk/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "<your_username>/<your_downstream_repo>", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "event-type", "value": "trigger-saving", "CIvars": []}, {"type": "arg", "name": "client-payload", "value": "{\"ref\": \"${{ github.ref }}\", \"commit\": \"${{ github.sha }}\"}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}]}
{"id": "17843725_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler -v '<SPECIFY VERSION>' # Optional: specify bundler version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create \nbin/rails db:migrate\nbin/rails db:test:prepare  # Prepare test database\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec   # Change this command according to your test suite (e.g., Minitest, RSpec)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17867467_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-scripts --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --format=pretty", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "behat-failure-screenshots", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/failure/screenshots", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Behat tests failed. Please check the logs and conditions.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17972053_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, dom", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Be sure to install Behat globally or in your project's composer.json dependencies\ncomposer require --dev behat/behat behat/mink behat/mink-selenium2-driver\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Adjust the command based on your Behat configuration\nvendor/bin/behat --format=pretty --format=progress --tags=@ui\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "behat-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/behat-results", "CIvars": []}]}]}]}
{"id": "17979731_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test || echo \"Tests failed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mv test/test_results.txt outputs/test_results.txt\necho \"Test output captured\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"${CHEF_SERVER_URL}/organizations/YOUR_ORG/environments/YOUR_ENVIRONMENT/error_reports\" \\\n  -H \"Authorization: Bearer ${CHEF_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"error\": \"Test suite failed\",\n    \"details\": \"'\"${ERROR_REPORT}\"'\"\n  }'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleanup tasks here if necessary\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "17992081_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite UnitTests --testdox", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18205327_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}]}]}]}
{"id": "18257630_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "1826216_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-install-ansible", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.10", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${PRIVATE_KEY}\" > private_key.pem\nchmod 600 private_key.pem\nansible-playbook -i your_inventory_file deploy.yml --private-key private_key.pem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18294973_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife cookbook upload ./cookbooks --all  # This assumes your cookbooks are in a 'cookbooks' directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have `knife` configured properly\nknife ssh \"name:${{ secrets.CHEF_NODE_NAME }}\" \"sudo chef-client\" --ssh-user <your-ssh-user> --identity-file <path-to-your-ssh-key>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18318097_0", "jobs": [{"name": "delete_branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deleting branch for the closed pull request...\"\nBRANCH_NAME=${{ github.event.pull_request.head.ref }}\n\n# Delete the branch if it is not the main or default branch\nif [[ \"$BRANCH_NAME\" != \"main\" && \"$BRANCH_NAME\" != \"master\" ]]; then\n  gh pr close \"${{ github.event.pull_request.number }}\" --delete-branch\n  echo \"Branch '$BRANCH_NAME' deleted.\"\nelse\n  echo \"The branch '$BRANCH_NAME' is a protected branch. Skipping deletion.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18322205_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p tmp/db\ncp config/database.yml.example config/database.yml\nbundle exec rails db:create\nbundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Replace with your test framework if you're using something else like Minitest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install rubocop\nbundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-app.git\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Refactoring completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18386629_0", "jobs": [{"name": "create-pull-request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "main", "CIvars": []}, {"type": "arg", "name": "title", "value": "Merge bug fix from maintenance branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "This pull request merges the latest bug fixes from the maintenance branch.", "CIvars": []}, {"type": "arg", "name": "base", "value": "main", "CIvars": []}, {"type": "arg", "name": "head", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "kentaro-m/assign-pull-request-reviewers", "version": "v1.2.0", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "username1,username2", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "bug", "CIvars": []}]}]}]}
{"id": "1845466_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath ${{ github.workspace }}/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-App-Archive", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "18457992_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -sdk iphonesimulator \\\n           -destination \"platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios_version }}\" \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace \\\n                -scheme YourScheme \\\n                -sdk iphonesimulator \\\n                -destination \"platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios_version }}\" \\\n                CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18527511_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-install", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit.xml \n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nscp -o StrictHostKeyChecking=no -r . $USER@$HOST:/path/to/deploy  # Replace with actual deployment path\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no $USER@$HOST 'bash /path/to/deployment/script.sh'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18536210_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}\" >> $GITHUB_ENV\necho \"APP_STORE_CONNECT_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane gym --scheme YourSchemeName --export_method app-store --output_directory ./output --output_name YourAppName.ipa", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourAppName.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output/YourAppName.ipa", "CIvars": []}]}]}]}
{"id": "18651120_0", "jobs": [{"name": "generate-changelog", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install github_changelog_generator\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "github_changelog_generator -u YOUR_GITHUB_USERNAME -p YOUR_REPOSITORY_NAME -o CHANGELOG.md\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add CHANGELOG.md\ngit commit -m \"Update CHANGELOG.md\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18734154_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane gym --scheme \"YourAppScheme\" --archive_path \"YourApp.xcarchive\" --export_method \"app-store\" --output_directory \"./build\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane pilot upload --archive_path \"./build/YourApp.xcarchive\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18846605_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1890228_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt # Adjust if necessary for your package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest # Adjust to your testing framework, e.g., npm test for Node.js apps\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet # Adjust app.yaml path if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18905805_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "18912960_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-clover coverage.xml\nbash <(curl -s https://codecov.io/bash) -f coverage.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying your project...\"\n# Add your deployment commands here, e.g.:\n# ssh user@your-server \"cd /path/to/your/project && git pull origin main\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19031858_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Navigate to the iOS project\nfastlane beta  # Assuming 'beta' lane is set up in your Fastfile\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19033601_0", "jobs": [{"name": "request-review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "repo-sync/github-sync", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "target_branch", "value": "master", "CIvars": []}, {"type": "arg", "name": "reviewers", "value": "user1\nuser2\nteam_name\n", "CIvars": []}]}]}]}
{"id": "19068182_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "qt/qt-actions/setup-qt", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "target-linux", "value": true, "CIvars": []}, {"type": "arg", "name": "build-tools", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential g++ gcc cmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "qmake your_project.pro  # Replace with your actual .pro file name\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./your_executable # Replace with the executable name generated by your build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19110730_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane test # Ensure you have this lane set up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane release # This lane should handle the App Store deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19137424_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet-lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet-lint manifests/", "name": "", "version": "", "shell": "bash"}]}, {"name": "validate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install puppet", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet parser validate manifests/", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying Puppet Manifests to $SERVER_ENDPOINT\"\nsshpass -p \"$SERVER_PASSWORD\" scp -r ./manifests/ $SERVER_USER@$SERVER_ENDPOINT:/etc/puppetlabs/code/environments/production/manifests/\nsshpass -p \"$SERVER_PASSWORD\" ssh $SERVER_USER@$SERVER_ENDPOINT 'sudo puppet agent -t'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19200017_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-scripts", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19210088_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"VARIABLES=$(cat variables.yml | grep -v '^\\s*#' | sed 's/^/\\'/' | sed 's/:/\\'/',/g | sed 's/,/\\n/g')\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Load environment variables from the file\neval \"${{ env.VARIABLES }}\"\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your deployment commands here\n# e.g., pushing to gh-pages branch, uploading to some server, etc.\necho \"Deploying...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19312068_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying version ${{ github.ref }} to production...\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "assets/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}]}]}
{"id": "19335688_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpunit/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev php-webdriver/webdriver", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y xvfb\nXvfb :99 -screen 0 1920x1080x24 &\nphp vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19438183_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet ef database update --project YourProject.Data\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Synchronize Sitecore items\n# You may need to implement or call a specific script or tools\n# to synchronize Sitecore content based on your requirements\n./scripts/sync-sitecore-content.ps1 \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with the actual deployment commands or scripts you use.\n./scripts/deploy-to-sitecore.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-send", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "channel", "value": "#notifications", "CIvars": []}, {"type": "arg", "name": "text", "value": "Sitecore database consistency workflow completed successfully!", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-send", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "channel", "value": "#notifications", "CIvars": []}, {"type": "arg", "name": "text", "value": "Sitecore database consistency workflow failed. Please check the logs.", "CIvars": []}]}]}]}
{"id": "1946907_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "text", "value": "Nightly build failed! Please check the logs for more details.", "CIvars": []}]}]}, {"name": "success", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "text", "value": "Nightly build succeeded! \ud83c\udf89", "CIvars": []}]}]}]}
{"id": "19477555_0", "jobs": [{"name": "python", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "nodejs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "java", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn install\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19481138_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"\n# Add your deployment script here\n  \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "1948305_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or your preferred test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19513126_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=${{ secrets.DATABASE_URL }}\" >> $GITHUB_ENV\necho \"API_KEY=${{ secrets.API_KEY }}\" >> $GITHUB_ENV\necho \"ANOTHER_ENV_VAR=some_value\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Add your deployment script here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19555107_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd Path/To/Your/XcodeProject  # Navigate to your project directory\npod install  # Example for CocoaPods, adjust for your dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration AppStoreDistribution archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportPath ${{ github.workspace }}/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install fastlane if not already available\ngem install fastlane\n\n# Use fastlane to upload the IPA to TestFlight\nfastlane pilot upload --app_identifier $BUNDLE_ID --ipa ${{ github.workspace }}/build/YourApp.ipa --api_key_path api_key.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19628512_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install --project-directory=YourProjectName/  # Adjust to your project directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -configuration Debug -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.0' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -configuration Debug -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.0'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19629284_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\n# If your project uses CocoaPods, uncomment the following line\n# pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n# Ensure the command line tools are installed\nxcode-select --install || echo \"Command Line Tools already installed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xcode-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/test/results", "CIvars": []}]}]}]}
{"id": "19737264_0", "jobs": [{"name": "install_dependencies", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19742123_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -fsSL https://apt.repos.inside.growingtree.com/vagrant/GPG-KEY-vagrant | gpg --dearmor -o /usr/share/keyrings/vagrant.gpg\necho \"deb [signed-by=/usr/share/keyrings/vagrant.gpg] https://apt.repos.inside.growingtree.com/vagrant/ubuntu $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/vagrant.list\napt-get update\napt-get install -y vagrant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant validate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up --provision\nvagrant package --output my-vagrant-box.box\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vagrant-box", "CIvars": []}, {"type": "arg", "name": "path", "value": "my-vagrant-box.box", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vagrant-box", "CIvars": []}, {"type": "arg", "name": "path", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "vagrant box add my-vagrant-box my-vagrant-box.box\n# Further deployment steps can be added here, such as vagrant up in a production environment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19764964_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Adjust to your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Preparing to deploy the application...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.REMOTE_HOST }}", "CIvars": [{"name": "REMOTE_HOST", "expression": "secrets.REMOTE_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.REMOTE_USER }}", "CIvars": [{"name": "REMOTE_USER", "expression": "secrets.REMOTE_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": ".", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.REMOTE_PATH }}", "CIvars": [{"name": "REMOTE_PATH", "expression": "secrets.REMOTE_PATH", "type": "secret"}]}, {"type": "arg", "name": "rm", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Application deployed successfully!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19773928_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' clean build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19930113_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "wget https://raw.githubusercontent.com/adamwiggins/CodeCoverage/master/CodeCoverage.php\nphp CodeCoverage.php ./vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19949932_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --no-restore -o ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAzureAppName", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\nrm -rf ./publish\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "19961854_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n-scheme YourScheme \\\n-configuration Debug \\\n-destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \\\nclean test \\\nCODE_COVERAGE=YES\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun xccov view --report --json YourProject/DerivedData/Logs/Test/*.xcresult > coverage_report.json\nxcrun xccov view --summary --json YourProject/DerivedData/Logs/Test/*.xcresult > coverage_summary.json\nxcrun xccov view --report YourProject/DerivedData/Logs/Test/*.xcresult > coverage_report.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage_report.json\ncoverage_summary.json\ncoverage_report.txt\n", "CIvars": []}]}]}]}
{"id": "1998589_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ github.workspace }}/vendor/bin\" >> $GITHUB_PATH", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing # or phing <your-task-name> if you want to run a specific task\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20007578_0", "jobs": [{"name": "check_branch_name", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"BRANCH_NAME=$(echo '${{ github.head_ref }}' | tr '[:upper:]' '[:lower:]')\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking branch name: $BRANCH_NAME\"\nif [[ \"$BRANCH_NAME\" != refs/heads/feature/* && \"$BRANCH_NAME\" != refs/heads/bugfix/* ]]; then\n  echo \"Branch name '$BRANCH_NAME' is not in the expected format (must start with 'feature/' or 'bugfix/').\"\n  echo \"::set-output name=branch_rename_required::true\"\nelse\n  echo \"Branch name format is correct.\"\n  echo \"::set-output name=branch_rename_required::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "\u26a0\ufe0f Please consider renaming your branch to follow the organization\u2019s naming conventions:\n- Use `feature/` for new features\n- Use `bugfix/` for bug fixes.\n", "CIvars": []}]}]}]}
{"id": "20105643_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxis112358/setup-xcode", "version": "v1.3", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your_project_directory # Change this to your project's root directory\nif [ -f Podfile ]; then\n  pod install --repo-update\nfi\n# Add other dependency installation commands as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test \\\n  -workspace YourWorkspace.xcworkspace \\ # Change this to your workspace or project\n  -scheme YourSchemeName \\                 # Change to your scheme\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  ONLY_ACTIVE_ARCH=NO | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive \\\n  -workspace YourWorkspace.xcworkspace \\ # Change this to your workspace or project\n  -scheme YourSchemeName \\                 # Change to your scheme\n  -archivePath ./build/YourApp.xcarchive \\ # Change as necessary\n  CODE_SIGN_IDENTITY=\"\" \\\n  CODE_SIGNING_REQUIRED=NO \\\n  CODE_SIGNING_ALLOWED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n  -archivePath ./build/YourApp.xcarchive \\ # Change as necessary\n  -exportPath ./build/YourApp.ipa \\\n  -exportOptionsPlist ExportOptions.plist # Make sure this plist is configured correctly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20166017_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourProjectScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourProjectScheme -sdk iphoneos -configuration Release archive -archivePath ./build/YourProject.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ./build/YourProject.xcarchive -exportPath ./build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-App", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/*.ipa", "CIvars": []}]}]}]}
{"id": "20184577_0", "jobs": [{"name": "tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testsuite=unit # Adjust your PHPUnit command as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpstan/phpstan  # Install PHPStan if not in composer.json\n./vendor/bin/phpstan analyse src --level max # Adjust the source directory and level as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20193628_0", "jobs": [{"name": "style-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install --save-dev prettier", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx prettier --check .", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install black\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "black --check .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20328747_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "gcc-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y cmake libcppunit-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable --reporter=xml > test-results.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cppunit-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/test-results.xml", "CIvars": []}]}]}]}
{"id": "20601972_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release -sdk iphonesimulator -arch x86_64 ONLY_ACTIVE_ARCH=NO clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20631816_0", "jobs": [{"name": "delete_pending_build_requests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Package Microsoft.TeamFoundationServer.Client -Source nuget.org -Scope CurrentUser\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# PowerShell script to delete all pending build requests\n$tfsUrl = $env:TFS_URL\n$project = $env:TFS_PROJECT\n$username = $env:TFS_USERNAME\n$password = $env:TFS_PASSWORD\n\n# Create a TFS client\n$tfsCollection = New-Object Microsoft.TeamFoundation.Client.TfsTeamProjectCollection($tfsUrl)\n$tfsCollection.Authenticate($username, $password)\n\n# Get the Build Server\n$buildServer = $tfsCollection.GetService([Microsoft.TeamFoundation.Build.Client.IBuildServer])\n\n# Get all pending builds\n$pendingBuilds = $buildServer.QueryBuilds($project, [Microsoft.TeamFoundation.Build.Client.BuildStatus]::InProgress)\n\n# Loop through pending builds and delete them\nforeach ($build in $pendingBuilds) {\n    Write-Host \"Deleting Build #$($build.BuildNumber)\"\n    $buildServer.DeleteBuild($build.BuildDefinition.Uri, $build.BuildId)\n}\n\nWrite-Host \"All pending build requests have been deleted.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2068555_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "svn-action/checkout", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "https://your-svn-repo-url", "CIvars": []}, {"type": "arg", "name": "path", "value": "your-local-path", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y ant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-local-path # Change to your SVN checkout directory\nant build # Adjust the target according to your build file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-local-path # Change to your SVN checkout directory\nant test # Adjust the target according to your build file for running tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "your-local-path/test-results.xml", "CIvars": []}]}]}]}
{"id": "20689512_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "macos-setup/xcode", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install # Or any other dependency manager you use (e.g., Cartfile for Carthage)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 13' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Store logs or artifacts here if tests fail\nxcodebuild -showBuildTimingSummary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ui-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./YourProjectDirectory/Build/Logs/Test", "CIvars": []}]}]}]}
{"id": "20692990_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v2.9.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP1_NAME }}", "CIvars": [{"name": "HEROKU_APP1_NAME", "expression": "secrets.HEROKU_APP1_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "working_directory", "value": "./app1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v2.9.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP2_NAME }}", "CIvars": [{"name": "HEROKU_APP2_NAME", "expression": "secrets.HEROKU_APP2_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "working_directory", "value": "./app2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v2.9.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP3_NAME }}", "CIvars": [{"name": "HEROKU_APP3_NAME", "expression": "secrets.HEROKU_APP3_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "working_directory", "value": "./app3", "CIvars": []}]}]}]}
{"id": "2087347_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or whatever test framework you use\n# If you are using Minitest, replace with:\n# bundle exec rake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add API testing commands (e.g. Postman/Newman, RSpec, etc.)\n# Example using RSpec:\nbundle exec rspec spec/requests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20874490_0", "jobs": [{"name": "sync-database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "symfony/mysql-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "database", "value": "joomla_db", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.DB_USERNAME }}", "CIvars": [{"name": "DB_USERNAME", "expression": "secrets.DB_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DB_PASSWORD }}", "CIvars": [{"name": "DB_PASSWORD", "expression": "secrets.DB_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "mysqldump -h localhost -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} joomla_db > joomla_db_backup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "joomla-db-backup", "CIvars": []}, {"type": "arg", "name": "path", "value": "joomla_db_backup.sql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Database sync completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "20952512_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env && php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the server...\"\n# Add your deployment commands here, e.g.:\n# rsync -avz --delete ./ youruser@yourserver:/path/to/your/app\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21151792_0", "jobs": [{"name": "post-comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=commit_message::$(git log -1 --pretty=%B)\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment ", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Latest Commit Message: ${{ steps.get_commit_message.outputs.commit_message }}", "CIvars": [{"name": "get_commit_message.outputs.commit_message", "expression": "steps.get_commit_message.outputs.commit_message", "type": "steps"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const commit_message = '${{ steps.get_commit_message.outputs.commit_message }}';\nconst issue_title = 'Commit Message for Push';\nconst issue_body = `Latest Commit Message: ${commit_message}`;\nawait github.issues.create({\n  ...context.repo,\n  title: issue_title,\n  body: issue_body\n});\n", "CIvars": [{"name": "get_commit_message.outputs.commit_message", "expression": "steps.get_commit_message.outputs.commit_message", "type": "steps"}]}]}]}]}
{"id": "21220218_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 --extensions=php application/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpdoc -d application -t docs/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the production server...\"\n# Add your deployment commands here, for example:\n# scp -r ./* user@server:/path/to/destination\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21223589_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install axios", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example of dynamically generating email list\n# You can replace this with your logic to fetch or create the list\necho \"::set-output name=recipients::user1@example.com,user2@example.com,user3@example.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mohit-rajput/sendgrid-action", "version": "v1.2", "shell": "bash", "with": [{"type": "arg", "name": "api-key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ steps.get-recipients.outputs.recipients }}", "CIvars": [{"name": "get-recipients.outputs.recipients", "expression": "steps.get-recipients.outputs.recipients", "type": "steps"}]}, {"type": "arg", "name": "subject", "value": "Dynamic Email Subject", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello, this is a test email sent to dynamic recipients!", "CIvars": []}]}]}]}
{"id": "212999_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/ios-ci-action", "version": "v2.2.0", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "15.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21335173_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --ci --reporters=jest-junit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./junit.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "mikeal/publish-to-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "junit.xml", "CIvars": []}]}]}]}
{"id": "21487707_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/publish-from-macos", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -license accept\nbrew install cocoapods  # Install CocoaPods if needed\npod install              # Install dependencies via CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp/Products/Debug-iphonesimulator/*\n", "CIvars": []}]}]}]}
{"id": "21537366_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/remote/dir", "CIvars": []}]}]}]}
{"id": "21566225_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change to the appropriate command based on your project's package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Replace with your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Changes have been pushed to the repository.\" > changes.txt\ngit config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\ngit add changes.txt\ngit commit -m \"Add notification of changes\"\ngit push  # Ensure you have the correct permissions and tokens set for pushing back\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "discord/discord-webhook", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "${{ secrets.DISCORD_WEBHOOK_URL }}", "CIvars": [{"name": "DISCORD_WEBHOOK_URL", "expression": "secrets.DISCORD_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "A new change has been pushed to the repository. Check it out at ${{ github.repository }}!", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}, {"name": "track-vendor-changes", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch --depth=1 origin main\ngit diff --name-status origin/main...HEAD > vendor_changes.txt  # Adjust as necessary for your vendor files/structure\nif [[ -s vendor_changes.txt ]]; then\n  echo \"Vendor changes detected:\"\n  cat vendor_changes.txt\n  # You can add other handling logic here if needed.\nelse\n  echo \"No vendor changes detected.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2157460_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ github.event.ref == 'refs/heads/main' && secrets.PRODUCTION_APP_NAME || secrets.STAGING_APP_NAME }}", "CIvars": [{"name": "event.ref", "expression": "github.event.ref == 'refs/heads/main' && secrets.PRODUCTION_APP_NAME || secrets.STAGING_APP_NAME", "type": "context"}, {"name": "PRODUCTION_APP_NAME", "expression": "secrets.PRODUCTION_APP_NAME", "type": "secret"}, {"name": "STAGING_APP_NAME", "expression": "secrets.STAGING_APP_NAME", "type": "secret"}, {"name": "event.ref", "expression": "github.event.ref", "type": "context"}]}, {"type": "arg", "name": "slot-name", "value": "${{ github.event.ref == 'refs/heads/main' && 'production' || 'staging' }}", "CIvars": [{"name": "event.ref", "expression": "github.event.ref == 'refs/heads/main' && 'production' || 'staging'", "type": "context"}, {"name": "event.ref", "expression": "github.event.ref", "type": "context"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ github.event.ref == 'refs/heads/main' && secrets.AZURE_PRODUCTION_PUBLISH_PROFILE || secrets.AZURE_STAGING_PUBLISH_PROFILE }}", "CIvars": [{"name": "event.ref", "expression": "github.event.ref == 'refs/heads/main' && secrets.AZURE_PRODUCTION_PUBLISH_PROFILE || secrets.AZURE_STAGING_PUBLISH_PROFILE", "type": "context"}, {"name": "AZURE_PRODUCTION_PUBLISH_PROFILE", "expression": "secrets.AZURE_PRODUCTION_PUBLISH_PROFILE", "type": "secret"}, {"name": "AZURE_STAGING_PUBLISH_PROFILE", "expression": "secrets.AZURE_STAGING_PUBLISH_PROFILE", "type": "secret"}, {"name": "event.ref", "expression": "github.event.ref", "type": "context"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# You can use an appropriate command to migrate your database\n# This could be running a script or calling a DB migration tool\necho \"Running database migrations...\"\n\n# Example for EF Core\ndotnet ef database update --project YourProject.csproj --startup-project YourProject.csproj\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21690298_0", "jobs": [{"name": "create_release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}, {"type": "arg", "name": "cache", "value": "npm", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Changes made in this release:\n- What changed?\n", "CIvars": []}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "path/to/your/asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "your-asset-name.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "2180460_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "ini_values", "value": "error_reporting = E_ALL\ndisplay_errors = On\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\nssh -o StrictHostKeyChecking=no $DEPLOY_USER@$SERVER_IP \"\n  cd $DEPLOY_DIRECTORY\n  git pull origin main\n  composer install --no-dev --prefer-dist\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2182035_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}]}]}
{"id": "21844109_0", "jobs": [{"name": "move-issue", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/move-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "source_repo", "value": "${{ github.event.inputs.source_repo }}", "CIvars": [{"name": "event.inputs.source_repo", "expression": "github.event.inputs.source_repo", "type": "context"}]}, {"type": "arg", "name": "target_repo", "value": "${{ github.event.inputs.target_repo }}", "CIvars": [{"name": "event.inputs.target_repo", "expression": "github.event.inputs.target_repo", "type": "context"}]}, {"type": "arg", "name": "issue_number", "value": "${{ github.event.inputs.issue_number }}", "CIvars": [{"name": "event.inputs.issue_number", "expression": "github.event.inputs.issue_number", "type": "context"}]}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "2186215_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawrence/action-cmake", "version": "v1.0.1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.19.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build . --config Debug\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncpack -G ZIP  # or any other packaging tool you are using\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can use curl or any other tool to upload your symbols\ncurl -X POST \"${SYMBOL_SERVER_URL}/upload\" \\\n     -H \"Authorization: Bearer ${SYMBOL_SERVER_API_KEY}\" \\\n     -F \"file=@your_symbol_file.zip\"  # use the correct path to your symbol file\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "21999643_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install --repo-update # For projects using CocoaPods\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "**/TestLogs/*.log # Adjust according to your test logs' path\n", "CIvars": []}]}]}]}
{"id": "22022247_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler:2.3.0 # Adjust to your project's required Bundler version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphoneos -archivePath ~/output/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ~/output/YourApp.xcarchive -exportOptionsPlist ~/output/exportOptions.plist -exportPath ~/output\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "~/output/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "220668_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22088992_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env  # Assuming you have an .env.example file\n# Set your database credentials and any other environment variables\necho \"DB_DATABASE=your_database\" >> .env\necho \"DB_USERNAME=your_username\" >> .env\necho \"DB_PASSWORD=your_password\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Feature", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22177325_0", "jobs": [{"name": "load-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0c55b159cbfafe01e --instance-type t2.micro --key-name MyKeyPair --security-group-ids sg-01234567890123456 --query 'Instances[0].InstanceId' --output text)\necho \"INSTANCE_ID=${INSTANCE_ID}\" >> $GITHUB_ENV\necho \"Waiting for instance to be ready...\"\naws ec2 wait instance-running --instance-ids $INSTANCE_ID\nPUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)\necho \"PUBLIC_IP=${PUBLIC_IP}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running load tests on EC2 instance at ${PUBLIC_IP}\"\n# Replace this with your load test command, for example:\n# curl http://${PUBLIC_IP}/load-test-endpoint\n# Or use a load testing tool like Apache JMeter, Gatling, or k6.\nssh -o StrictHostKeyChecking=no -i MyKeyPair.pem ec2-user@${PUBLIC_IP} 'cd /path/to/your/load/test && ./run-load-test.sh'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "aws ec2 terminate-instances --instance-ids $INSTANCE_ID\naws ec2 wait instance-terminated --instance-ids $INSTANCE_ID\necho \"Terminated EC2 instance ${INSTANCE_ID}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22209177_0", "jobs": [{"name": "run-ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Executing Ruby code...\"\nruby my_script.rb  # Replace with your Ruby file name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22219526_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, sqlite3, mysqli, pdo, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "v4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "ftp://ftp.yourserver.com", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/deployment/directory", "CIvars": []}]}]}]}
{"id": "22249906_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22275744_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit_custom_1.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit_custom_2.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --configuration phpunit_custom_3.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22322124_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key\nchmod 600 private_key\nscp -o StrictHostKeyChecking=no -i private_key -r ./* $DEPLOY_USER@$SERVER_IP:$DEPLOY_PATH\nssh -o StrictHostKeyChecking=no -i private_key $DEPLOY_USER@$SERVER_IP \"cd $DEPLOY_PATH && composer install --no-dev --prefer-dist\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22324705_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer:v2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/sake dev/build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22361017_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, dom", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2245861_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/\nvendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unusedcode\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev squizlabs/php_codesniffer\ncomposer require --dev phpmd/phpmd\ncomposer require --dev roave/security-advisories\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-clover coverage.xml\nbash <(curl -s https://codecov.io/bash) -f coverage.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -z \"$(git status --porcelain)\" ]; then\n  echo \"No changes have been made.\";\nelse\n  echo \"Changes have been made.\";\n  # You can perform any notification here (like a webhook call)\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22482265_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "perl_version", "value": "5.32", "CIvars": []}, {"type": "arg", "name": "perl_module", "value": "Test::Harness", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cpanm --not-strict --installdeps .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -v t/*.t", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "prove -b -r t/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22519508_0", "jobs": [{"name": "check-forks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "PARENT_REPO=\"username/repository\"  # Set your parent repository here\nDELETED_REPO_CHECK_RESULT=$(gh repo view \"$PARENT_REPO\" --json isFork --jq '.isFork')\n\nif [ \"$DELETED_REPO_CHECK_RESULT\" == \"null\" ]; then\n  echo \"The repository $PARENT_REPO does not exist, checking forks...\"\n  FORKS=$(gh repo list \"$PARENT_REPO\" --limit 1000 --json nameWithOwner | jq -r '.[].nameWithOwner')\n  \n  if [ -z \"$FORKS\" ]; then\n    echo \"No forks found.\"\n  else\n    echo \"Found orphaned forks:\"\n    for FORK in $FORKS; do\n      echo \"- $FORK\"\n    done\n    # Optionally, send a notification, or take other actions here\n  fi\nelse\n  echo \"The repository $PARENT_REPO is still active.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22561183_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# If you're using CocoaPods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphoneos -configuration Release build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/test/results", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build failed! Please check the logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22563763_1", "jobs": [{"name": "solve-integrals", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pyenv/pyenv-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": 3.2, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install sympy\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python solve_integrals.py\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22582102_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can add any command here to test or execute after installing packages\nphp artisan test  # Example for Laravel, adjust as needed for your application\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22621690_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer:v2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22767470_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --without development test\nyarn install --production --frozen-lockfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust this command based on your test suite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CAPISTRANO_SSH_KEY }}\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -H $CAPISTRANO_SERVER >> ~/.ssh/known_hosts\nbundle exec cap production deploy\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:seed:incremental\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22786299_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "subversion/svn", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "svn_url", "value": "https://your_svn_repository_url", "CIvars": []}, {"type": "arg", "name": "svn_username", "value": "${{ secrets.SVN_USERNAME }}", "CIvars": [{"name": "SVN_USERNAME", "expression": "secrets.SVN_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "svn_password", "value": "${{ secrets.SVN_PASSWORD }}", "CIvars": [{"name": "SVN_PASSWORD", "expression": "secrets.SVN_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "checkout_path", "value": "svn_checkout", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app\nsudo xcodebuild -runFirstLaunch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -archivePath build/YourApp.xcarchive -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportPath build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "svn_checkout/YourProjectName/build/*.ipa", "CIvars": []}]}]}]}
{"id": "22873014_0", "jobs": [{"name": "update-provisioning-profiles", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nfastlane produce enable --skip_update # Ensure app is created in App Store Connect\nfastlane match type:appstore  # or type:development based on your need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane match nuke development  # Uncomment if you want to clean up development profiles\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22905081_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phpstan/phpstan\n~/.config/composer/vendor/bin/phpstan analyse\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require squizlabs/php_codesniffer\n~/.config/composer/vendor/bin/phpcs --standard=PSR2 src\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "22997721_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/actions-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProject\n# Adjust the command below based on your dependency manager (e.g. CocoaPods, Carthage, etc.)\npod install  # For CocoaPods\n# or \n# carthage update --platform iOS\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProject\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProject\nxcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23015168_0", "jobs": [{"name": "close_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/close-pull-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.issue.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}, {"type": "arg", "name": "comment", "value": "${{ github.event.comment.body }}", "CIvars": [{"name": "event.comment.body", "expression": "github.event.comment.body", "type": "context"}]}]}]}]}
{"id": "23231604_0", "jobs": [{"name": "dart-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dart-lang/setup-dart", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run tests with the option to fail on timeouts\ndart test --timeout=30s || echo \"Some tests may have timed out\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23428720_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=mysql://root:your_root_password@127.0.0.1:3306/your_database_name\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --bootstrap vendor/autoload.php tests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Your build commands, e.g., asset compilation, migrations, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23532682_0", "jobs": [{"name": "create-new-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/create-repository", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "new_repo_name", "value": "${{ github.event.inputs.new_repo_name }}", "CIvars": [{"name": "event.inputs.new_repo_name", "expression": "github.event.inputs.new_repo_name", "type": "context"}]}, {"type": "arg", "name": "new_repo_description", "value": "New repository created from existing repository.", "CIvars": []}, {"type": "arg", "name": "new_repo_visibility", "value": "${{ github.event.inputs.new_repo_visibility }}", "CIvars": [{"name": "event.inputs.new_repo_visibility", "expression": "github.event.inputs.new_repo_visibility", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "git clone https://github.com/${{ github.actor }}/${{ github.event.inputs.new_repo_name }}.git new-repo\ncd new-repo\n# Optional: Copy files or make changes\ncp -r ../* ./ # Replace with your needs\ngit add .\ngit commit -m \"Initial commit from existing repository\"\ngit push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23670711_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, openssl, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have PHPUnit configured, you can run your tests\n./vendor/bin/phpunit --testsuite EncryptionTestSuite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start your application or run necessary commands here if needed\nphp index.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"require 'system/core/CodeIgniter.php'; \n// testing encryption\n$encryptor = new \\CI_Encryption();\n// Your encryption and decryption test logic goes here.\nvar_dump($encryptor->encrypt('test_string')); \nvar_dump($encryptor->decrypt($encryptor->encrypt('test_string')));\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23699787_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit  # Assuming you have PHPUnit for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Using lftp for deployment\nsudo apt-get install lftp -y  # Install lftp\nlftp -u \"$USER\",\"$PASSWORD\" \"$HOST\" -e \"mirror -R ./path_to_your_codeigniter_app/ $REMOTE_DIR; quit\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23704348_0", "jobs": [{"name": "open-app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Change to your script path\n./path/to/your/script.sh\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2381910_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.12.10", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}, {"name": "database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Waiting for the MongoDB database to be ready...\"\nsleep 30 # Wait for 30 seconds to allow the database time to initialize\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run migrate # Add your migration command here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "23853024_0", "jobs": [{"name": "php-lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"\n~/.composer/vendor/bin/phpcs --standard=PSR12 --ignore=vendor/* app/ # Adjust the path according to your structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpstan/phpstan\nvendor/bin/phpstan analyse app/ --level=max\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2388692_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "mohitchechi/sendmail", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "CI Build Status - ${{ github.event_name }}", "CIvars": [{"name": "event_name", "expression": "github.event_name", "type": "context"}]}, {"type": "arg", "name": "body", "value": "The CI build for commit `${{ github.sha }}` on branch `${{ github.ref }}` has completed.\nStatus: ${{ job.status }}\nCheck the details here: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "status", "expression": "job.status", "type": "job"}, {"name": "server_url", "expression": "github.server_url", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "23904260_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=14.0' build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=14.0' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "DerivedData/YourApp/Logs/Test/*.log", "CIvars": []}]}]}]}
{"id": "23990264_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\nssh -o StrictHostKeyChecking=no $USERNAME@$SERVER \"cd $REMOTE_PATH && git pull && composer install --no-dev\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24000413_0", "jobs": [{"name": "install-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring,intl,xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g grunt-cli", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install --save-dev phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24031440_0", "jobs": [{"name": "dart", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/dart-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart compile exe bin/my_app.dart -o bin/my_app", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "dart-executable", "CIvars": []}, {"type": "arg", "name": "path", "value": "bin/my_app", "CIvars": []}]}]}]}
{"id": "24089355_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" | ssh-add -\nssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'\n  cd /path/to/your/app # Change to your application directory\n  git pull origin main\n  composer install --no-dev --optimize-autoloader\n  # Additional commands to clear cache, migrate DB etc.\n  # php artisan migrate --force # Uncomment if using Laravel\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "241007_0", "jobs": [{"name": "build-and-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # Change this if you're using a different testing framework\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet --project=$GCP_PROJECT_ID\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24132317_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory \npod install # Assuming you use CocoaPods, or use another package manager if applicable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Debug -sdk iphonesimulator CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nxcodebuild test -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' -enableCodeCoverage YES | tee xcodebuild.log | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nmkdir -p coverage\nxcrun xctrace list devices | grep -A 1 -E \"iPhone.*simulator\" | head -n 1 | awk '{print $1}' > device_id.txt\nDEVICE_ID=$(cat device_id.txt)\nxcrun xccov report -json \"${{ github.workspace }}/your-ios-app-directory/build/Logs/Test/Test-*.xcresult\" > coverage/coverage.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-ios-app-directory\nxcrun xccov view --report coverage/coverage.json > coverage/coverage.txt\nxcrun xccov view --archive coverage/coverage.json > coverage/coverage.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}]}]}
{"id": "24168417_0", "jobs": [{"name": "calabash-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.6, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install calabash-cucumber\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cucumber -c --tags ~@wip\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p reports\nmv calabash.log reports/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "calabash-test-reports", "CIvars": []}, {"type": "arg", "name": "path", "value": "reports/calabash.log", "CIvars": []}]}]}]}
{"id": "24177638_0", "jobs": [{"name": "tfs-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "adopat/pyenv-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# This assumes a TFS CLI or script is available for triggering builds.\n# Adjust with the proper installation steps for your scenario.\nsudo apt-get install -y some-tfs-cli # Example placeholder.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the actual command to trigger the build.\n# Using curl or a CLI tool to access TFS API\ncurl -X POST \"$TFS_URL/%5BYour_TFS_Build_Definition%5D/_apis/build/builds?api-version=2.0\" \\\n  -H 'Content-Type: application/json' \\\n  -u \":$TFS_PAT\" \\\n  -d '{\n    \"definition\": {\n      \"id\": \"<YOUR_BUILD_DEFINITION_ID>\"\n    },\n    \"reason\": \"Automated build triggered by GitHub Actions\"\n  }'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Implement logic to check build status and output logs if necessary.\n# You can use the TFS API to check the status.\nBUILD_ID=<YOUR_BUILD_ID> # This would typically be retrieved after triggering the build\nsleep 30 # Wait for a short time (or implement a polling mechanism)\ncurl -X GET \"$TFS_URL/_apis/build/builds/$BUILD_ID?api-version=2.0\" \\\n  -u \":$TFS_PAT\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24332209_0", "jobs": [{"name": "composer-update", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer update --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"you@example.com\"\ngit config --local user.name \"Your Name\"\ngit add composer.lock\ngit commit -m \"Update composer.lock\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24335970_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}", "CIvars": [{"name": "GOOGLE_APPLICATION_CREDENTIALS", "expression": "secrets.GOOGLE_APPLICATION_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24336309_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CI_ENVIRONMENT=testing\" >> .env\necho \"database.default.hostname=127.0.0.1\" >> .env\necho \"database.default.database=test_db\" >> .env\necho \"database.default.username=root\" >> .env\necho \"database.default.password=password\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24396606_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm test  # Change this to your actual build/test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "stefan-gerschefski/send-mail", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "you@example.com", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Build Successful!", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build has been successful!\nYou can view the details at: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}\n", "CIvars": [{"name": "event.repository.html_url", "expression": "github.event.repository.html_url", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "2446807_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H 'Content-type: application/json' \\\n--data '{\"text\":\"Build Successful! \u2728\",\"attachments\":[{\"text\":\"Job: ${{ github.job }}\\nCommit: ${GITHUB_SHA}\\nView the build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}]}' \\\n${{ secrets.SLACK_WEBHOOK_URL }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H 'Content-type: application/json' \\\n--data '{\"text\":\"Build Failed! \u274c\",\"attachments\":[{\"text\":\"Job: ${{ github.job }}\\nCommit: ${GITHUB_SHA}\\nView the build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}]}' \\\n${{ secrets.SLACK_WEBHOOK_URL }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24480996_0", "jobs": [{"name": "integration-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "DeLaGuardo/setup-clojure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "clojure-version", "value": "1.10.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein\nchmod +x lein\nsudo mv lein /usr/local/bin/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein deps", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein test :integration", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24505997_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production environment...\"\n# Add your deployment script or command here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}]}]}]}
{"id": "24528469_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento setup:upgrade\nphp bin/magento setup:di:compile\nphp bin/magento setup:static-content:deploy -f\nvendor/bin/phpunit --configuration phpunit.xml.dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "magento-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "var/\npub/media/\npub/static/\n", "CIvars": []}]}]}]}
{"id": "2454661_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install dependencies (customize according to your language)\nif [ -f requirements.txt ]; then\n  pip install -r requirements.txt\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Heroku...\"\ngit remote add heroku https://git.heroku.com/${HEROKU_APP_NAME}.git\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24564888_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"<h1>We are currently updating our application. Please check back later.</h1>\" > app_offline.htm", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Removing app_offline.htm\"\n# Use the Azure CLI or Kudu API to remove the app_offline.htm file after deployment\naz webapp delete-file --name <YOUR_APP_NAME> --resource-group <YOUR_RESOURCE_GROUP> --path app_offline.htm\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24581412_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your build output is in the 'dist' folder\nmkdir output\ncp -r dist/* output/   # Copy build files to 'output' folder\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "directory", "value": "output", "CIvars": []}]}]}]}
{"id": "24585609_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "tar -czf artifact.tar.gz path/to/your/build/output", "name": "", "version": "", "shell": "bash"}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Changes made in this release:\n- Detail your changes here or auto-generate a changelog\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "artifact.tar.gz", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "artifact.tar.gz", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/gzip", "CIvars": []}]}]}]}
{"id": "24585940_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\nyarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create RAILS_ENV=test\nbin/rails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install\nnpm test # replace with your test command (e.g., jest, mocha)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails test # optional step to run Rails tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24688055_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "JEKYLL_ENV=production bundle exec jekyll build --destination ./_site\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "cname", "value": "your-custom-domain.com", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Preview link: https://<your-github-username>.github.io/<your-repo-name>/\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n-d \"{\\\"body\\\": \\\"Preview your changes here: ${PREVIEW_LINK}\\\"}\" \\\n\"${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24709128_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y mercurial\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unityci/setup-android", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.0f1", "CIvars": []}, {"type": "arg", "name": "githubToken", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Library/PackageCache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-unity-${{ hashFiles('**/*.csproj', '**/packages-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "# If you want to build for a specific platform, you can uncomment below\n# - ./gradlew build\n# Or Use Unity CLI here\n/opt/unity/Editor/Unity -batchmode \\\n  -nographics \\\n  -quit \\\n  -projectPath . \\\n  -buildTarget StandaloneWindows \\\n  -executeMethod YourBuildMethod \\\n  -logFile\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-files", "CIvars": []}, {"type": "arg", "name": "path", "value": "Build/", "CIvars": []}]}]}]}
{"id": "24737621_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test | xcpretty -s\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test_logs\nxcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test | tee test_logs/test_output.log | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "test_logs/test_output.log", "CIvars": []}]}]}]}
{"id": "247607_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you are using CocoaPods, if needed\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' | tee result.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"Test Suite\" result.log; then\n  echo \"Tests passed.\"\nelse\n  echo \"Tests failed. Check the results above.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24776825_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Adjust this command based on your project's dependency manager.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Adjust this command based on your build process.\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "applesander/ftp-deploy", "version": "v2.0.4", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.TFS_SERVER }}", "CIvars": [{"name": "TFS_SERVER", "expression": "secrets.TFS_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.TFS_USERNAME }}", "CIvars": [{"name": "TFS_USERNAME", "expression": "secrets.TFS_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.TFS_PASSWORD }}", "CIvars": [{"name": "TFS_PASSWORD", "expression": "secrets.TFS_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./path-to-your-built-directory", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/drop-folder/path/on/tfs", "CIvars": []}]}]}]}
{"id": "24788311_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "malahayati/setup-android", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": "30", "CIvars": []}, {"type": "arg", "name": "build-tools", "value": "30.0.3", "CIvars": []}, {"type": "arg", "name": "licenses", "value": "android-sdk-license-.+\nandroid-sdk-preview-license-.+\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y qemu-kvm\nsudo apt-get install -y libvirt-bin ubuntu-vm-builder bridged\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"no\" | ~/android-sdk/emulator/emulator -avd test -no-snapshot-load -no-audio -no-window &\nadb wait-for-device\nadb shell input keyevent 82 &\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=your.package.name.YourTestClass", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24792833_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-lobanov/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourXcodeProject\nxcodebuild -resolvePackageDependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourXcodeProject\nxcodebuild -scheme \"YourScheme\" -sdk macosx -configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourXcodeProject\nxcodebuild test -scheme \"YourScheme\" -sdk macosx -configuration Debug\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24883921_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rails -v 'your_rails_version' # Replace with your desired Rails version, if necessary\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y postgresql-client  # Install Postgres client for database setup\ncp config/database.yml.example config/database.yml  # Copy database configuration if needed\nbundle exec rails db:create  # Create the database\nbundle exec rails db:migrate  # Run migrations\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust this command according to your testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop  # Adjust according to your linter settings\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build completed successfully!\"  # This can be replaced with any notification command as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24924815_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nRAILS_ENV=test bin/rails db:create\nRAILS_ENV=test bin/rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec --format documentation\nRAILS_ENV=test bundle exec rspec\nRAILS_ENV=test bundle exec simplecov\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f coverage/index.html ]; then\n  echo \"Code coverage report:\"\n  cat coverage/index.html\nelse\n  echo \"No coverage report found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "24930314_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "New Commit Pushed to Main", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new commit has been pushed to the main branch.\nCommit details:\n- Commit message: ${{ github.event.head_commit.message }}\n- Commit author: ${{ github.event.head_commit.author.name }}\n- Commit URL: ${{ github.event.head_commit.url }}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.head_commit.author.name", "expression": "github.event.head_commit.author.name", "type": "context"}, {"name": "event.head_commit.url", "expression": "github.event.head_commit.url", "type": "context"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "2493145_0", "jobs": [{"name": "check-interface", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./Project1/Project1.csproj --no-incremental", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./Project2/Project2.csproj --no-incremental", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./Project1/Project1.csproj --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./Project2/Project2.csproj --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": []}]}, {"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install eslint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx eslint .", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": []}]}]}
{"id": "24969225_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, mysqli, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {30..0}; do\n  if mysqladmin ping -h \"127.0.0.1\" --silent; then\n    break\n  fi\n  echo 'Waiting for database connection...'\n  sleep 1\ndone\nif [ \"$i\" == 0 ]; then\n  echo 'MySQL did not start in time!'\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php yii migrate --interactive=0\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testdox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25011644_1", "jobs": [{"name": "enable-icloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "xu-cheng/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x ./enable_icloud.sh\n./enable_icloud.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add YourProject.xcodeproj/project.pbxproj\ngit commit -m \"Enable iCloud capabilities\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25247632_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-len/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25302518_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./path-to-your-asset", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "your-asset-name.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "25501977_0", "jobs": [{"name": "check-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [[ ${{ github.event.pull_request.merged }} == 'true' ]]; then\n  echo \"The pull request #${{ github.event.pull_request.number }} has been merged.\"\n  echo \"::set-output name=merged::true\"\nelse\n  echo \"The pull request #${{ github.event.pull_request.number }} has not been merged.\"\n  echo \"::set-output name=merged::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "TARGET_BRANCH=\"main\" # change this to your target branch\ngit fetch origin $TARGET_BRANCH\ngit checkout $TARGET_BRANCH\ngit branch --contains ${{ github.event.pull_request.merge_commit_sha }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25527245_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "25567757_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.1, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build --trace\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Ensure the destination directory is clean\nrm -rf ./_site\n# Build Jekyll and deploy\nbundle exec jekyll build\n# Deploy using GitHub Pages (gh-pages branch)\ngit config --local user.name \"GitHub Actions\"\ngit config --local user.email \"actions@github.com\"\ngit add _site\ngit commit -m \"Deploy Jekyll site\" || echo \"No changes to commit\"\ngit push origin HEAD:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2558309_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nif [ -f Gemfile ]; then\n  cd your_rails_app_directory # Adjust this if necessary\n  bundle install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f requirements.txt ]; then\n  pip install -r requirements.txt\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_rails_app_directory # Adjust this if necessary\nbundle exec rspec # or your preferred command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_django_app_directory # Adjust this if necessary\npython manage.py test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_rails_app_directory # Adjust this if necessary\nbundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_django_app_directory # Adjust this if necessary\nflake8 .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_flex_app_directory # Adjust this if necessary\n# Add commands to build and run your Flex application\n# For example, npm install and npm test or any relevant commands\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25660340_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd, bcmath, soap, intl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a .env file with database credentials\ncp .env.example .env\nphp artisan key:generate\nphp artisan migrate --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rsync -avz --exclude 'vendor/' --delete ./ $STAGING_USER@$STAGING_SERVER:$STAGING_PATH\nssh $STAGING_USER@$STAGING_SERVER \"cd $STAGING_PATH && composer install --no-dev --optimize-autoloader && php bin/magento setup:di:compile && php bin/magento cache:clean && php bin/magento cache:flush && php bin/magento setup:static-content:deploy -f\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\"text\":\"Deployment Successful!\"}", "CIvars": []}, {"type": "arg", "name": "webhook-url", "value": "${{ secrets.SLACK_WEBHOOK }}", "CIvars": [{"name": "SLACK_WEBHOOK", "expression": "secrets.SLACK_WEBHOOK", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\"text\":\"Deployment Failed!\"}", "CIvars": []}, {"type": "arg", "name": "webhook-url", "value": "${{ secrets.SLACK_WEBHOOK }}", "CIvars": [{"name": "SLACK_WEBHOOK", "expression": "secrets.SLACK_WEBHOOK", "type": "secret"}]}]}]}]}
{"id": "25720665_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2.2.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh issue create \\\n  --title \"New issue from GitHub Actions\" \\\n  --body \"This issue was created automatically by a GitHub Actions workflow.\" \\\n  --repo \"${{ github.repository }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25738278_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\nsed -i 's/DB_DATABASE=.*/DB_DATABASE=ci_db/' .env\nsed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env\nsed -i 's/DB_PASSWORD=.*/DB_PASSWORD=root/' .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --seed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25802882_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, mysqli, pdo, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh user@yourserver.com \"cd /path/to/your/symfony/project && git pull origin main && composer install --no-dev --optimize-autoloader && php bin/console doctrine:migrations:migrate --no-interaction && php bin/console cache:clear --env=prod\"\n\n# Replace user@yourserver.com and /path/to/your/symfony/project accordingly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25894408_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "choco/install", "version": "v1.0.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "choco install visualstudio2013community --yes || choco install visualstudio2013professional --yes\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Change the path and solution name as per your project structure\n\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\devenv.exe\" YourSolution.sln /Build Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here. Example:\n\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\devenv.exe\" YourTests.vsmdi /RunAllTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25928636_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, sqlite3, mysqlnd, pdo_mysql, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$KEY\" > private_key.pem\nchmod 600 private_key.pem\nrsync -avz --delete -e \"ssh -i private_key.pem -o StrictHostKeyChecking=no\" ./ $USER@$HOST:$DEPLOY_PATH\nrm private_key.pem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "25942752_0", "jobs": [{"name": "push-to-fork", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"<your-email@example.com>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place any command here to modify your repository\n# For example, create or modify a file\necho \"Adding a new line to the file\" >> myfile.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git add myfile.txt  # Ensure you specify any modified/added files\ngit commit -m \"Update myfile.txt from GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "repository", "value": "<YOUR_FORK_OR_ORIGINAL_REPO_URL>", "CIvars": []}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "26086451_0", "jobs": [{"name": "analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dart-lang/setup-dart", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Example: run `dart analyze` while excluding certain directories\ndartanalyzer --exclude <exclusion_pattern> .\n# For example, to exclude all contents under a 'lib/excluded' directory:\n# dartanalyzer --exclude lib/excluded/ . \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26101127_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer test  # Replace with your test command if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Preparing to deploy...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"${{ secrets.JENKINS_URL }}/job/your-job-name/build?token=your-job-token\" \\\n--user \"${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}\" \\\n--data-urlencode \"json={'parameter': [{'name':'param1', 'value':'value1'}, {'name':'param2', 'value':'value2'}]}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26207773_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Triggering Chef Deployment...\"\nchef-client -z -o 'recipe[my_cookbook::deploy]'  # Replace with your cookbook and recipe\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment was successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26218346_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install postgresql-client\ncp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate\nbundle exec rails db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # You can change this to your testing framework\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-deploy", "version": "v3.12.10", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "your-heroku-app-name", "CIvars": []}, {"type": "arg", "name": "heroku_email", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}]}]}
{"id": "26220054_0", "jobs": [{"name": "check-branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"PR_NUMBER=${{ github.event.number }}\" >> $GITHUB_ENV\necho \"BRANCH_NAME=${{ github.head_ref }}\" >> $GITHUB_ENV\necho \"BASE_BRANCH=${{ github.base.ref }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking if branch '${{ env.BRANCH_NAME }}' can be properly branched...\"\n# You can add your custom branching logic here.\n\n# Example: Check if branch is branched off 'main'\ngit fetch origin ${{ env.BASE_BRANCH }}\nif git merge-base --is-ancestor origin/${{ env.BASE_BRANCH }} origin/${{ env.BRANCH_NAME }}; then\n  echo \"\u2705 Branch '${{ env.BRANCH_NAME }}' is correctly branched off '${{ env.BASE_BRANCH }}'.\"\nelse\n  echo \"\u274c Branch '${{ env.BRANCH_NAME }}' should be branched off '${{ env.BASE_BRANCH }}'.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Branch validation successful. Proceed with the PR!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26232669_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/solution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build path/to/your/solution.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test path/to/your/test/project.csproj --configuration Release --collect:\"XPlat Code Coverage\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/test-result", "version": "v0.1.0", "shell": "bash", "with": [{"type": "arg", "name": "test-results", "value": "path/to/your/test/results.xml", "CIvars": []}]}]}]}
{"id": "26311117_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install libpq-dev\ncp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26323524_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26334222_0", "jobs": [{"name": "sonar", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn sonar:sonar \\ -Dsonar.projectKey=<your-project-key> \\ -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \\ -Dsonar.login=${{ secrets.SONAR_TOKEN }} \\ -Dsonar.java.binaries=target/classes", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-token", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}]}]}
{"id": "26383164_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload --ipa \"path/to/your/app.ipa\" \\\n                       --username \"$APPLE_ID\" \\\n                       --app_identifier \"$APP_IDENTIFIER\" \\\n                       --skip_waiting_for_build_processing true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26383663_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26393448_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2650187_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar global require phing/phing\necho \"$HOME/.composer/vendor/bin\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y subversion", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "svn checkout https://your-svn-repo-url/trunk /path/to/svn/checkout\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing -f /path/to/your/build.xml # Change to your Phing build file path\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd /path/to/svn/checkout\nsvn add --force * # Add new files\nsvn commit -m \"Automated CI Sync from GitHub Action\" # Commit changes\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Use curl to notify your Hudson CI server, adjust the URL and payload accordingly\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"status\": \"success\"}' http://your-hudson-url/notify\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26536694_0", "jobs": [{"name": "check_rspec", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --dry-run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26563123_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "powershell -ExecutionPolicy ByPass -File './script.ps1'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment step goes here\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26586006_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "theqtcompany/setup-qt", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "qt-components", "value": "qtbase, qtdeclarative, qtmultimedia", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "choco install cmake", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake -G \"Visual Studio 16 2019\" -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --config Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2659433_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n# Run Rails tests (use your specific test command)\nbundle exec rake db:create db:schema:load RAILS_ENV=test\nbundle exec rspec # or your specific test task\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26616865_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, gd, curl, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "error_reporting=E_ALL", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26670248_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-deploy-action", "version": null, "shell": "bash", "with": []}]}]}
{"id": "26691606_0", "jobs": [{"name": "tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, gd, mysqlnd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26729124_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "keep_files", "value": false, "CIvars": []}]}]}]}
{"id": "26767466_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.6, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release archive -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $GITHUB_WORKSPACE/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\nbundle exec fastlane pilot upload --ipa build/YourProject.ipa --username YOUR_APPLE_ID\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26783622_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "start_time=$(date +%s)\nbundle exec rspec\nend_time=$(date +%s)\nruntime=$((end_time - start_time))\necho \"RSpec runtime: $runtime seconds\" >> runtime.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "rspec-runtime-log", "CIvars": []}, {"type": "arg", "name": "path", "value": "runtime.log", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cat runtime.log\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26792493_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane # Install Fastlane\nbundle install # Install other project dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourAppScheme -workspace YourApp.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta # Assuming you have a lane set up in Fastlane called 'beta'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26846904_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php }}", "CIvars": [{"name": "php", "expression": "matrix.php", "type": "matrix"}]}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "${{ matrix.node }}", "CIvars": [{"name": "node", "expression": "matrix.node", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26847454_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mathworks/matlab-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "matlab_version", "value": "R2021b", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "matlab -batch \"run(my_script);\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "matlab -batch \"build_my_project;\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Make a request to Drone API to report the build status\nBUILD_STATUS=\"success\"  # or \"failure\" based on the results of the previous steps\ncurl -X POST \"$DRONE_SERVER/api/repos/${{ github.repository }}/statuses/${{ github.sha }}\" \\\n  -H \"Authorization: Bearer $DRONE_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"state\\\": \\\"$BUILD_STATUS\\\", \\\"description\\\": \\\"GitHub Actions build status\\\", \\\"context\\\": \\\"GitHub Actions\\\"}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26878182_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec ruby -Ilib:test test/**/*_test.rb  # Adjust the path as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26894524_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Setting environment variables...\"\nexport VARIABLE_NAME_1=\"value1\"\nexport VARIABLE_NAME_2=\"value2\"\nexport VARIABLE_NAME_3=\"value3\"\n\n# You can add more environment variables as per your requirement\n\n# Optionally, save these variables to a .xcconfig file or pass them directly\necho \"VARIABLE_NAME_1 = $VARIABLE_NAME_1\" >> MyProject/MyProjectConfig.xcconfig\necho \"VARIABLE_NAME_2 = $VARIABLE_NAME_2\" >> MyProject/MyProjectConfig.xcconfig\necho \"VARIABLE_NAME_3 = $VARIABLE_NAME_3\" >> MyProject/MyProjectConfig.xcconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace MyProject.xcworkspace -scheme MyScheme -configuration Debug build -derivedDataPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace MyProject.xcworkspace -scheme MyScheme -configuration Debug test -derivedDataPath ./build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "26948582_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlang/setup-erlang", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "otp-version", "value": "24.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "make get-deps", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlang/setup-erlang", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "otp-version", "value": "24.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Here you can add your deployment commands\n# For example: SSH into your server and run deployment scripts\necho \"Deploying to the production server\"\nssh user@yourserver \"cd /path/to/app && git pull && make && ./start_script.sh\"\n# Add your deployment logic (could be FTP, SCP, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27039682_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27042189_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Use `pip install -r requirements.txt` for Python, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Your build command here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Your test command here\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "create_release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref_name }}", "CIvars": [{"name": "ref_name", "expression": "github.ref_name", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.release.outputs.upload_url }}", "CIvars": [{"name": "release.outputs.upload_url", "expression": "steps.release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./path/to/your/binary", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "your-binary-name.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "27076154_0", "jobs": [{"name": "install-ppw", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pear upgrade PEAR\npear channel-update pear.php.net\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pear install pear.php.net/ppw\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ppw --version\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27103051_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, curl, xml, dom", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phpstan/phpstan\nphpstan analyse\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, curl, xml, dom", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27131725_0", "jobs": [{"name": "resign", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/checkout-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p \"$HOME/Workspace\"\nmv *.ipa \"$HOME/Workspace\"/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Certificates\necho \"${{ secrets.P12 }}\" | base64 --decode > ~/Certificates/certificate.p12\necho \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ~/Certificates/profile.mobileprovision\necho \"${{ secrets.PASSWORD }}\" > ~/Certificates/password.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security import ~/Certificates/certificate.p12 -k ~/Library/Keychains/login.keychain -P $(< ~/Certificates/password.txt) -T /usr/bin/codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p \"$HOME/Resigned\"\n# Replace PATH_TO_YOUR_APP.ipa with the actual path of your IPA\ncodesign -f -s \"iPhone Distribution: Your Developer Name\" --preserve-metadata=identifier,entitlements --deep \"$HOME/Workspace/YOUR_APP.ipa\" --entitlements=entitlements.plist\ncp \"$HOME/Workspace/YOUR_APP.ipa\" \"$HOME/Resigned/ResignedApp.ipa\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Modify entitlements.plist to include beta-reports-active\nplutil -insert beta-reports-active -bool true entitlements.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun -sdk iphoneos PackageApplication -v \"$HOME/Resigned/ResignedApp.ipa\" -o \"${GITHUB_WORKSPACE}/ResignedApp.ipa\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ResignedApp", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/ResignedApp.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "27355333_0", "jobs": [{"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-pr", "version": "v0.1.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "27360190_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, pdo", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you are using PHPUnit\nvendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Any build commands you may need, e.g., optimization\nphp spark optimize\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you'd define your deployment steps, e.g., rsync to server, etc.\necho \"Deployment steps would go here.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27440564_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cmake  # If you need CMake or any other dependencies\ngem install cocoapods\npod install # Run pod install if using CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27517657_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Unit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint  # Assuming you have a linting script defined in composer.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Adjust the parameters as necessary\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -d '{\n    \"commit\": \"${{ github.sha }}\",\n    \"status\": \"passed\",  # or \"failed\"\n    \"buildTarget\": \"${{ github.workflow }}\",\n    \"project\": \"your_project\",\n    \"phid\": \"PHID-PROJ-xxxxxx\"\n  }' \\\n  https://phabricator.example.com/api/differential.publishcomment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2763289_0", "jobs": [{"name": "backup-restore-sqlserver", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ymlion/sql-server-docker", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sa_password", "value": "YourStrong@Passw0rd", "CIvars": []}, {"type": "arg", "name": "image", "value": "mcr.microsoft.com/mssql/server", "CIvars": []}, {"type": "arg", "name": "port", "value": 1433, "CIvars": []}, {"type": "arg", "name": "sql_server_version", "value": "2019-latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q 'SELECT 1;' &> /dev/null; then\n    echo \"SQL Server is up!\"\n    break\n  fi\n  echo \"Waiting for SQL Server to start...\"\n  sleep 10\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q \"BACKUP DATABASE [YourDatabase] TO DISK = '/var/opt/mssql/backup/YourDatabase.bak' WITH FORMAT, MEDIANAME = 'SQLServerBackups', NAME = 'Full Backup of YourDatabase';\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd' -Q \"RESTORE DATABASE [YourDatabase] FROM DISK = '/var/opt/mssql/backup/YourDatabase.bak' WITH REPLACE;\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your test commands here, such as running your application tests that depend on the database\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "27680342_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec middleman build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "27782986_0", "jobs": [{"name": "trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"##vso[task.setvariable variable=AZURE_DEVOPS_PAT]${{ secrets.AZURE_DEVOPS_PAT }}\"\naz devops configure --defaults organization=https://dev.azure.com/<Your_ORG_NAME> project=<Your_PROJECT_NAME>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "build_id=$(az pipelines run --name <Your_Pipeline_Name> --branch main --query id -o tsv)\necho \"Triggered build with ID: $build_id\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "status=\"running\"\nwhile [[ \"$status\" == \"running\" ]]\ndo\n  sleep 30\n  status=$(az pipelines show --id $build_id --query status -o tsv)\n  echo \"Current Build Status: $status\"\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "build_result=$(az pipelines show --id $build_id --query result -o tsv)\necho \"Build completed with result: $build_result\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28006003_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/actions-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mysql-actions/setup-mysql", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "database", "value": "test_db", "CIvars": []}, {"type": "arg", "name": "username", "value": "root", "CIvars": []}, {"type": "arg", "name": "password", "value": "", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./vendor/bin/propel migration:up\n./vendor/bin/propel sql:insert --data-file=tests/data/seeds.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/propel migration:down\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2801224_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore path/to/your/project.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build path/to/your/project.csproj --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test path/to/your/project.Tests.csproj --configuration Release --logger trx", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Generating test report...\"\n# Assuming you have a way to convert trx to a readable format\ndotnet test path/to/your/project.Tests.csproj --configuration Release --logger \"trx;LogFileName=testResults.trx\"\n\n# Example of using an external tool to convert trx to HTML\n# This requires you to have a tool installed that can process trx files\n# For instance, ReportUnit or any other reporting tool\n# reportunit path/to/testResults.trx path/to/output/report.html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/output/report.html", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST -H 'Content-type: application/json' --data '{\n  \"text\": \"Build failed for commit <'$GITHUB_SHA'>: <'$GITHUB_RUN_URL'>\\nCheck the reports in artifacts.\"\n}' $SLACK_WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28039777_0", "jobs": [{"name": "test-multiple-repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Running tests for Repository 1\"\ngit clone https://github.com/user/repo1.git\ncd repo1\n# Here you would run your tests, for example using a specific command\n# Replace with the test command according to your repo structure\nnpm install\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests for Repository 2\"\ngit clone https://github.com/user/repo2.git\ncd repo2\nnpm install\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests for Repository 3\"\ngit clone https://github.com/user/repo3.git\ncd repo3\nnpm install\nnpm test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28079358_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/mango run tests", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28158135_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # for React Native\n# If using yarn:\n# yarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "flutter-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}]}, {"name": "android-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sdkmanager --update", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28160402_0", "jobs": [{"name": "html_proofer", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec htmlproofer ./_site --ignore-unknown --check-html --empty-alt-ignore --ignore \"img,script,link\" --disable-external\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28217556_0", "jobs": [{"name": "tag-release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"github-actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git fetch --tags", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "current_version=$(git tag --sort=v:refname | tail -n 1)\nif [ -z \"$current_version\" ]; then\n  new_version=\"v1.0.0\" # default version if no tags exist\nelse\n  new_version=$(echo $current_version | awk -F. -v OFS=. '{$NF+=1; print}')\nfi\necho \"Next version: $new_version\"\necho \"tag=$new_version\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git tag ${{ env.tag }}\ngit push origin ${{ env.tag }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github-release/github-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ env.tag }}", "CIvars": [{"name": "tag", "expression": "env.tag", "type": "env"}]}, {"type": "arg", "name": "name", "value": "Release ${{ env.tag }}", "CIvars": [{"name": "tag", "expression": "env.tag", "type": "env"}]}, {"type": "arg", "name": "body", "value": "This is an automatic release for version ${{ env.tag }}.\n", "CIvars": [{"name": "tag", "expression": "env.tag", "type": "env"}]}]}]}]}
{"id": "28221579_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p Pods # Ensure the Pods directory is created\nchmod -R 777 Pods # Set permissions to allow write\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28285398_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "path/to/your/built/artifact.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "artifact.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "28348883_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cocoapods\npod install --project-directory=YourProjectDirectory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourSchemeName \\\n           -configuration Release \\\n           -derivedDataPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -archiveYourProject.xcarchive \\\n           -scheme YourSchemeName \\\n           -configuration Release \\\n           -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n           -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive \\\n           -exportPath $GITHUB_WORKSPACE/build \\\n           -exportOptionsPlist YourExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://upload.firebase.com/upload\" \\\n-H \"Authorization: Bearer $FIREBASE_TOKEN\" \\\n-F \"ipa=@$GITHUB_WORKSPACE/build/YourApp.ipa\" \\\n-F \"appId=YOUR_FIREBASE_APP_ID\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28351568_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer config --global github-oauth.github.com $GITHUB_TOKEN\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Modify to your testing framework/commands\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "2845020_0", "jobs": [{"name": "test-and-notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build  # Replace with your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test  # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test-results\ncp build/test-results/test/TEST-*.xml test-results/ || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Test Results for ${{ github.event_name }} on ${{ github.ref }}", "CIvars": [{"name": "event_name", "expression": "github.event_name", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Please find the latest test results attached.\n\nYou can review the results here: ${{ github.run_id }}\n\nTest results can be found in the attachments.\n", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "attachments", "value": "test-results/TEST-*.xml", "CIvars": []}, {"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "${{ secrets.SMTP_USER }}", "CIvars": [{"name": "SMTP_USER", "expression": "secrets.SMTP_USER", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "28507673_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ./artifacts\ncp -R build/Debug-iphonesimulator/*.app ./artifacts || echo \"No build artifacts found\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts", "CIvars": []}]}]}]}
{"id": "28589653_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CODE_SIGN_IDENTITY=<your_code_sign_identity>\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -archivePath ./build/YourApp.xcarchive \\\n           -sdk iphoneos \\\n           CODE_SIGN_IDENTITY=\"${{ secrets.CODE_SIGN_IDENTITY }}\" \\\n           CODE_SIGN_STYLE=\"manual\" \\\n           archive\n\nxcodebuild -exportArchive \\\n           -archivePath ./build/YourApp.xcarchive \\\n           -exportPath ./build \\\n           -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -f ./build/YourApp.ipa ]; then\n  echo \"Error: IPA file not generated.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "28725670_0", "jobs": [{"name": "backup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "postgres-action/setup-postgres", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "postgres-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "dbname", "value": "test_db", "CIvars": []}, {"type": "arg", "name": "username", "value": "your_username", "CIvars": []}, {"type": "arg", "name": "password", "value": "your_password", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "export PGPASSWORD=$DB_PASSWORD # Your database password environment variable\npg_dump -U $DB_USERNAME -h localhost -Fc test_db > backup.dump\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "db-backup", "CIvars": []}, {"type": "arg", "name": "path", "value": "backup.dump", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "find . -name \"*.dump\" -type f -mtime +30 -delete\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28753410_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "Build failed for ${{ github.run_id }}. Check details at ${{ github.run_url }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}, {"name": "run_url", "expression": "github.run_url", "type": "context"}]}]}]}]}
{"id": "28816374_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # or yarn install, depending on your package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Customize this command based on your build tool\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Ensure you have tests in your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p build  # Create a directory for the build\ncp -R ./dist/* ./build/  # Copy built files to the build directory, change if necessary\ncd build\nzip -r chrome-extension.zip .  # Create a zip file for the Chrome Extension\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "chrome-extension", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/chrome-extension.zip", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "burnett01/action-discord", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "New version of the Chrome Extension has been built! \nDownload it [here](https://github.com/${{ github.repository }}/actions/workflows/chrome-extension.yml).\n", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "28819473_0", "jobs": [{"name": "email-response", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"An email has been received!\" > response.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_host", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USER }}", "CIvars": [{"name": "EMAIL_USER", "expression": "secrets.EMAIL_USER", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASS }}", "CIvars": [{"name": "EMAIL_PASS", "expression": "secrets.EMAIL_PASS", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Re: Your Subject Here", "CIvars": []}, {"type": "arg", "name": "to", "value": "email@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_USER }}", "CIvars": [{"name": "EMAIL_USER", "expression": "secrets.EMAIL_USER", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Thank you for your email! This is an automated response.\nYour message was received and will be reviewed shortly.\n", "CIvars": []}, {"type": "arg", "name": "attachments", "value": "response.txt", "CIvars": []}]}]}]}
{"id": "28862965_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory # Change this to your project directory\npod install # Un-comment this if you are using CocoaPods\n# For Swift Package Manager:\n# swift package resolve\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' build | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your post-action script here\n# Ensure your script can handle timeouts gracefully\necho \"Post action script running...\"\n# Example post-action command with timeout\n(your_command_here) & pid=$!\n(sleep 300 && kill -HUP $pid) 2>/dev/null & watcher=$!\nwait $pid\nkill -HUP $watcher 2>/dev/null\necho \"Post action script completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28877899_0", "jobs": [{"name": "process-comments", "steps": [{"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Comment: ${{ github.event.comment.body }}\"\n\n# Extract custom parameters from the comment\n# Here we assume that the comments will be in the form `run [param1=value] [param2=value]`\ncomment_body=\"${{ github.event.comment.body }}\"\nif [[ \"$comment_body\" =~ run\\ (.*) ]]; then\n  parameters=\"${BASH_REMATCH[1]}\"\n  echo \"Parameters extracted: $parameters\"\n  echo \"PARAMS=$parameters\" >> $GITHUB_ENV\nelse\n  echo \"No valid parameters found.\"\n  exit 0  # Exit if no valid command found\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running job with the following parameters: $PARAMS\"\n# Here you can include logic to handle the parameters as needed\n# For demonstration, we'll just output them\n# You can also include any commands or scripts you need that take these parameters\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "28888159_0", "jobs": [{"name": "precompile_assets", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rails assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "compiled-assets", "CIvars": []}, {"type": "arg", "name": "path", "value": "public/assets", "CIvars": []}]}]}]}
{"id": "28922562_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Use the appropriate package manager for your project (e.g., CocoaPods, Carthage, etc.)\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppTests -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p results\ncp -R TestResults/** results/\necho \"Test results available in the results folder.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build and tests succeeded, ready to deploy!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build or tests failed, check the logs!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29005382_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install # Use this if you're using CocoaPods.\n# For example, if using Swift Package Manager, uncomment the following line:\n# swift package resolve\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.0'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nchmod +x ./path/to/your/script.sh # Ensure your custom script is executable\n./path/to/your/script.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "output-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourProjectDirectory/Path/To/Output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build or script failed, please check the logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29029306_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler:2.2.17\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta environment:${{ matrix.environment }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29035818_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install  # Ensure to install the pods if you are using them\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProjectName.xcodeproj -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProjectName.xcodeproj -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29124190_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "public/assets", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-assets-${{ hashFiles('Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-assets-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "if [ ! -d public/assets ]; then\n  RAILS_ENV=production bundle exec rake assets:precompile\nelse\n  echo \"Assets have already been compiled.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Insert your deployment script here\necho \"Deploying to production...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29130396_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your-App-Service-Name>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "<Your-Pre-Production-Slot>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "inlineScript", "value": "az webapp deployment slot swap --resource-group '<Your-Resource-Group>' --name '<Your-App-Service-Name>' --slot '<Your-Pre-Production-Slot>' --target-slot 'production'\n", "CIvars": []}]}]}]}
{"id": "29158214_0", "jobs": [{"name": "gated-check-in", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Please select a build definition:\"\necho \"1. Build Definition A\"\necho \"2. Build Definition B\"\necho \"3. Build Definition C\"\nread build_choice\necho \"You selected option: $build_choice\"        \necho \"::set-output name=build_choice::$build_choice\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Build Definition A\"\n# Place build commands for Definition A here\n# e.g., dotnet build, npm install, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Build Definition B\"\n# Place build commands for Definition B here\n# e.g., npm run build, mvn package, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Build Definition C\"\n# Place build commands for Definition C here\n# e.g., gradle build, \u2026 etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29471614_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn install -DskipTests=true", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-test-reporter", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}, {"type": "arg", "name": "fail_on_error", "value": true, "CIvars": []}]}]}]}
{"id": "29534979_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name xWebAdministration -Force -AllowClobber -Scope CurrentUser\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Import DSC Configuration\n$configPath = './MyDscConfig.ps1'\n. $configPath\n\n# Compile Configuration and Generate MOF\nMyDscConfig\n$configName = 'MyDscConfig'\n$mofPath = \"$PSScriptRoot\\$configName.mof\"\nPublish-DscConfiguration -Path $mofPath -Wait -Force -Verbose\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Apply the DSC Configuration\nStart-DscConfiguration -Path $mofPath -Wait -Verbose -Force -Credential (New-Object PSCredential('admin_user', (ConvertTo-SecureString 'admin_password' -AsPlainText -Force)))\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29622954_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit tests  # Adjust to your test folder structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment commands here, e.g.:\nssh user@yourserver.com 'cd /path/to/your/project && git pull && composer install'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -rf vendor  # Optional: clean up vendor to save space\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29646367_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install  # Adjust this command according to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint  # Adjust this command based on your tooling\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm install  # Adjust this command according to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Adjust this command based on your testing framework\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "./deploy.sh  # This is a placeholder for your deployment script\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "fields", "value": "executor, channel", "CIvars": []}, {"type": "arg", "name": "channel", "value": "#production-notifications", "CIvars": []}, {"type": "arg", "name": "custom_payload", "value": "{\"text\": \"Deployment Successful!\"}", "CIvars": []}]}]}, {"name": "approval", "steps": [{"type": "shell_cmd", "cmd": "echo \"Deployment approved. Please merge the pull request for final deployment.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29685690_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, zip, mysqli, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/typo3cms database:migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/typo3cms analyze", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Custom deployment script/commands for your server\necho \"Deploying to server...\"\nssh user@your_server_ip 'cd /path/to/your/typo3/project && git pull && composer install && php vendor/bin/typo3cms cache:flush'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29794034_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install  # if you're using CocoaPods\n# other dependency managers can be added here, like Carthage or Swift Package Manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n            -scheme YourScheme \\\n            -sdk iphoneos \\\n            -configuration Release \\\n            archive \\\n            -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n            CODE_SIGN_IDENTITY=\"\" \\\n            CODE_SIGNING_REQUIRED=NO  # adjust code signing as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n            -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n            -exportPath ${{ github.workspace }}/build/YourApp \\\n            -exportOptionsPlist ./path/to/ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29799602_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "commit-message", "value": "Automated merge of pull request #${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "29807641_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.test.outcome }}\" == \"failure\" ]]; then\n  echo \"Build failed!\"\n  echo \"status=failure\" >> $GITHUB_ENV\nelse\n  echo \"Build succeeded!\"\n  echo \"status=success\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "TAG=\"build-$(date +'%Y%m%d%H%M%S')\"\necho \"Tagging build with ${TAG}\"\ngit tag $TAG\ngit push origin $TAG\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ISSUE_TITLE=\"Build Failure: ${{ github.sha }}\"\nISSUE_BODY=\"The build failed for commit `${{ github.sha }}`.\\n\\nError Logs:\\n```\\n${{ steps.test.outputs.logs }}\\n```\"\ncurl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n  -d \"{\\\"title\\\":\\\"${ISSUE_TITLE}\\\", \\\"body\\\":\\\"${ISSUE_BODY}\\\"}\" \\\n  https://api.github.com/repos/${{ github.repository }}/issues\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29848912_0", "jobs": [{"name": "install-vendor", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -d \"vendor\" ]; then\n  echo \"Vendor folder does not exist!\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "path", "value": "vendor/", "CIvars": []}]}]}]}
{"id": "2995029_1", "jobs": [{"name": "backup-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$sourceFolder = \"C:\\Path\\To\\ExistingFolder\"\n$backupFolder = \"C:\\Path\\To\\BackupFolder\"\n.\\backup.ps1 -sourceFolder $sourceFolder -backupFolder $backupFolder\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment commands here (CruiseControl.NET command or script)\nWrite-Output \"Deploying new version...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "29990318_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust this command according to your SPA build process\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=production bundle exec rails assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rails db:create db:migrate\nbundle exec rspec  # Adjust the test command as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/bundle\nnode_modules\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-build-${{ hashFiles('**/Gemfile.lock', '**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-build-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "built-app", "CIvars": []}, {"type": "arg", "name": "path", "value": "public/assets", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "built-app", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"\n# Example deployment command, customize this as needed\n# scp -r ./public/assets user@yourserver:/path/to/deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30024741_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "snyk/actions/github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "test", "CIvars": []}]}]}, {"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "echo \"Build failed! Please check the logs.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30036433_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.DEPLOY_PRIVATE_KEY }}\" > id_rsa\nchmod 600 id_rsa\nexport DEPLOY_SSH_KEY=\"$(cat id_rsa)\"\nrocketeer deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30071845_0", "jobs": [{"name": "label-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --global user.email \"action@github.com\"\ngit config --global user.name \"GitHub Action\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "external-editor", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Thank you for your PR! \n\nIf you need to edit it using your favorite external editor, you can check it out locally with:\n\n```bash\ngit checkout ${GITHUB_HEAD_REF}\n```\n\nHappy coding!\n", "CIvars": [{"name": "GITHUB_HEAD_REF", "expression": "GITHUB_HEAD_REF", "type": "context"}]}]}]}]}
{"id": "30081597_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel_token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel_org_id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel_project_id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "fields", "value": "[\"alias\"]", "CIvars": []}]}]}]}
{"id": "30193118_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/aws-cloudformation-github-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "stack-name", "value": "your-stack-name", "CIvars": []}, {"type": "arg", "name": "template", "value": "template.yaml", "CIvars": []}, {"type": "arg", "name": "parameter-overrides", "value": "InstanceType=t2.micro\n# Additional parameters...\n", "CIvars": []}, {"type": "arg", "name": "capabilities", "value": "CAPABILITY_NAMED_IAM", "CIvars": []}, {"type": "arg", "name": "region", "value": "${{ secrets.AWS_REGION }}", "CIvars": [{"name": "AWS_REGION", "expression": "secrets.AWS_REGION", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "aws opsworks create-deployment \\\n  --stack-id your_stack_id \\\n  --app-id your_app_id \\\n  --command '{\"Name\":\"deploy\"}' \\\n  --region ${{ secrets.AWS_REGION }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30388900_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install  # Use Cocoapods if your project uses it\n# or use any other package manager commands you need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild clean build -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild archive -workspace YourWorkspace.xcworkspace -scheme YourScheme -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\nxcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $GITHUB_WORKSPACE/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "$GITHUB_WORKSPACE/build/YourApp.xcarchive", "CIvars": []}]}]}]}
{"id": "30439927_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with the actual build command for your Rails app\nbundle exec rake assets:precompile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "touch public/.nojekyll", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd public\ngit init\ngit config user.email \"your-email@example.com\"  # Replace with your email\ngit config user.name \"Your Name\"                 # Replace with your name\ngit add .\ngit commit -m \"Deploy to GitHub Pages\"\ngit push --force \"https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git\" master:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30455298_0", "jobs": [{"name": "setup-puppet-learning-vm", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rkh/vagrant-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "vagrant_version", "value": "2.2.14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y virtualbox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant ssh -c \"sudo apt-get update\"\nvagrant ssh -c \"sudo apt-get install -y puppet\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes your Puppet code is in a directory named `puppet`\nvagrant ssh -c \"sudo puppet apply /vagrant/puppet/your_manifest.pp\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Presuming you have some validators or tests\nvagrant ssh -c \"sudo puppet parser validate /vagrant/puppet/your_manifest.pp\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3056830_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./mvnw install  # Use your build tool, such as Maven or Gradle\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Install any dependencies listed in requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install  # Install any dependencies listed in Gemfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./mvnw test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # Use a command to run your tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rspec  # Use a command to run your tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30616820_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod lib lint  # Runs pod lib lint to validate the podspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod trunk push YourLibrary.podspec --allow-warnings --skip-import-validation --skip-tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourLibrary", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/library/framework", "CIvars": []}]}]}]}
{"id": "30680846_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, zip, gd, imagick", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpcs --standard=PSR12 --extensions=php src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpstan analyse --level=max src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run production", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "./coverage.cobertura.xml", "CIvars": []}]}]}]}
{"id": "30697558_0", "jobs": [{"name": "install-dev-packages", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require $(composer show --installed --format=json | jq -r '.installed[] | select(.require-dev | length > 0) | .name') \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30809323_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install\n# If you are using any WP-CLI commands, you can run them here.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key\nchmod 600 private_key\nscp -o StrictHostKeyChecking=no -i private_key -r * $USER@$HOST:/path/to/your/wordpress/directory/\nrm private_key\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30849866_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30922878_0", "jobs": [{"name": "run-powershell-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PowerShell -File ./path/to/your-script.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if (${{ steps.run-script.outcome }} -eq 'failure') {\n  echo \"Script failed with status ${{ steps.run-script.conclusion }}\"\n  if (${{ steps.run-script.conclusion }} -eq 'failure' -and (Get-Content ./path/to/your-script.ps1 | Select-String -Pattern \"exit 255\")) {\n    echo \"The script exited with code -1 (treated as return code 255).\"\n  }\n  exit 1  # Failing the job if the PowerShell script fails\n} else {\n  echo \"Script executed successfully!\"\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30981232_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -archivePath ./build/YourApp.xcarchive archive\nxcodebuild -exportArchive -archivePath ./build/YourApp.xcarchive -exportPath ./build -exportOptionsPlist ./exportOptions.plist \n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-app-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build succeeded!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build failed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "30999693_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "31008383_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew clean build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT }}", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet  # Adjust this according to the location of your app.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31016990_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jekyll/jekyll-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "31188192_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y puppet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo puppet apply ./path/to/your/manifests/init.pp\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can add any verification steps to ensure your Puppet configuration worked correctly:\nsudo puppet agent --test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have any tests defined, run them here\nsudo puppet apply ./path/to/your/tests/init.pp\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rspec ./path/to/your/specs\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31377758_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Navigate to your iOS folder if necessary\nfastlane deliver  # Change this if you have a different lane set up\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31438954_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\necho \"DATABASE_URL=mysql://your_user:your_password@127.0.0.1:3306/your_database_name\" >> .env\n# Adjust any other environment variables needed by your application here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/cake migrations migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Check that all translation files are present and up to date\nvendor/bin/cake i18n extract --paths src,plugins --out .pot\n# You can add additional commands to validate the translation files as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31439205_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test || echo \"Tests failed, but we are marking this job as unstable.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::notice::Job marked as unstable due to failed tests.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.run-tests.outcome }}\" == \"failure\" ]; then\n  echo \"The tests did not pass. Please check the details above.\"\nelse\n  echo \"All tests passed successfully!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31453378_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Example: Replace with your actual commands\necho \"Running your job...\"\n# Simulate test failure (uncomment to test failure)\n# exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "subject", "value": "GitHub Actions: Job Succeeded", "CIvars": []}, {"type": "arg", "name": "body", "value": "The job on the repository '$GITHUB_REPOSITORY' has succeeded.", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-server", "value": "${{ secrets.SMTP_SERVER }}", "CIvars": [{"name": "SMTP_SERVER", "expression": "secrets.SMTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "smtp-port", "value": "${{ secrets.SMTP_PORT }}", "CIvars": [{"name": "SMTP_PORT", "expression": "secrets.SMTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "subject", "value": "GitHub Actions: Job Failed", "CIvars": []}, {"type": "arg", "name": "body", "value": "The job on the repository '$GITHUB_REPOSITORY' has failed.", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-server", "value": "${{ secrets.SMTP_SERVER }}", "CIvars": [{"name": "SMTP_SERVER", "expression": "secrets.SMTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "smtp-port", "value": "${{ secrets.SMTP_PORT }}", "CIvars": [{"name": "SMTP_PORT", "expression": "secrets.SMTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}]}]}]}
{"id": "31458986_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Choose the appropriate command based on the bundler you're using\n# For JSPM\n# npm run build-jspm\n\n# For Webpack\nnpm run build-webpack\n\n# For Browserify\n# npm run build-browserify\n\n# For RequireJS\n# npm run build-requirejs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir output\n# Adjust the following command depending on how your build outputs artifacts\ncp -r dist/* output/  # Assume the built files are in the 'dist' folder\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "31471270_0", "jobs": [{"name": "run-powershell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"  # Stop on errors\nWrite-Host \"Starting PowerShell script execution...\"\n\n# Run your PowerShell script (replace 'your-script.ps1' with actual script name)\ntry {\n  .\\your-script.ps1\n  Write-Host \"PowerShell script executed successfully.\"\n} catch {\n  Write-Host \"Error occurred: $_\"\n  exit 1  # Ensure the job fails\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Debugging output:\"\necho \"Exit code: ${{ steps.run_script.outcome }}\"\necho \"Output: ${{ steps.run_script.outputs }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "315778_1", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./cleanup-old-builds.ps1 -ccnetApiUrl $env:CCNET_API_URL -apiKey $env:CCNET_API_KEY -daysThreshold 30\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31717410_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/wait-for-postgres", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "localhost", "CIvars": []}, {"type": "arg", "name": "port", "value": 5432, "CIvars": []}, {"type": "arg", "name": "user", "value": "postgres", "CIvars": []}, {"type": "arg", "name": "password", "value": "postgres", "CIvars": []}, {"type": "arg", "name": "db", "value": "test_db", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y postgresql-client\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psql -h localhost -U postgres -d test_db -f sql/setup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psql -h localhost -U postgres -d test_db -f sql/test.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can check the test outputs and make assertions\n# Example: Check for a specific output\nresult=$(psql -h localhost -U postgres -d test_db -c \"SELECT your_function_test();\" -t -A)\nexpected_result=\"expected_value\"\n\nif [[ \"$result\" != \"$expected_result\" ]]; then\n  echo \"Test failed: expected '$expected_result', got '$result'\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psql -h localhost -U postgres -d test_db -c \"DROP SCHEMA public CASCADE;\"\npsql -h localhost -U postgres -d test_db -c \"CREATE SCHEMA public;\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31752272_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Unlock the keychain\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD /Users/github/Library/Keychains/login.keychain-db\n\n# Build the archive\nxcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportOptionsPlist ExportOptions.plist -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportPath $GITHUB_WORKSPACE/build/YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "$GITHUB_WORKSPACE/build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "31767596_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "New Issue: [Your Issue Title Here]", "CIvars": []}, {"type": "arg", "name": "body", "value": "This issue was created automatically by GitHub Actions.\n- **Triggered by**: ${{ github.actor }}\n- **Event**: ${{ github.event_name }}\n- **Commit**: ${{ github.sha }}\n", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}, {"name": "event_name", "expression": "github.event_name", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "labels", "value": "automation\n", "CIvars": []}, {"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "31890665_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-l/xcpretty-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n# Add any other dependency managers you may be using, e.g., Carthage or Swift Package Manager.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' | xcpretty", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild clean -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31892346_0", "jobs": [{"name": "create-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gh repo create ${{ github.event.inputs.repo_name }} --public --confirm\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "31927602_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "This release includes the generated files.\n", "CIvars": []}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "path/to/your_file.ext", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "your_file.ext", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/octet-stream", "CIvars": []}]}]}]}
{"id": "31986449_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "r0adkll/upload-google-play", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "serviceAccountJson", "value": "${{ secrets.GOOGLE_PLAY_JSON }}", "CIvars": [{"name": "GOOGLE_PLAY_JSON", "expression": "secrets.GOOGLE_PLAY_JSON", "type": "secret"}]}, {"type": "arg", "name": "packageName", "value": "${{ secrets.PACKAGE_NAME }}", "CIvars": [{"name": "PACKAGE_NAME", "expression": "secrets.PACKAGE_NAME", "type": "secret"}]}, {"type": "arg", "name": "releaseFile", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}, {"type": "arg", "name": "track", "value": "internal", "CIvars": []}, {"type": "arg", "name": "inAppUpdatePriority", "value": 0, "CIvars": []}, {"type": "arg", "name": "status", "value": "published", "CIvars": []}]}]}]}
{"id": "3203571_0", "jobs": [{"name": "send-alert", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "slackapi/slack-github-action", "version": "v1.23.0", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\n  \"channel\": \"${{ env.SLACK_CHANNEL }}\",\n  \"text\": \"\ud83d\udea8 Jenkins Alert: Job '${{ github.event.workflow_run.name }}' has failed.\",\n  \"attachments\": [\n    {\n      \"text\": \"Job Details:\\n*Conclusion:* `${{ github.event.workflow_run.conclusion }}`\\n*Run ID:* `${{ github.event.workflow_run.id }}`\\n*View Job:* <${{ github.event.workflow_run.html_url }}|Click here>\"\n    }\n  ]\n}\n", "CIvars": [{"name": "SLACK_CHANNEL", "expression": "env.SLACK_CHANNEL", "type": "env"}, {"name": "event.workflow_run.name", "expression": "github.event.workflow_run.name", "type": "context"}, {"name": "event.workflow_run.conclusion", "expression": "github.event.workflow_run.conclusion", "type": "context"}, {"name": "event.workflow_run.id", "expression": "github.event.workflow_run.id", "type": "context"}, {"name": "event.workflow_run.html_url", "expression": "github.event.workflow_run.html_url", "type": "context"}]}]}]}]}
{"id": "32042482_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme <YourSchemeName> \\\n           -sdk iphoneos \\\n           -configuration Release \\\n           CODE_SIGN_IDENTITY=\"\" \\\n           CODE_SIGNING_REQUIRED=NO \\\n           CODE_SIGNING_ALLOWED=NO \\\n           -workspace <YourWorkspace.xcworkspace> \\\n           build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme <YourSchemeName> \\\n                -sdk iphonesimulator \\\n                -configuration Debug \\\n                CODE_SIGN_IDENTITY=\"\" \\\n                CODE_SIGNING_REQUIRED=NO \\\n                CODE_SIGNING_ALLOWED=NO \\\n                -workspace <YourWorkspace.xcworkspace> \\\n                -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32051889_0", "jobs": [{"name": "security-scan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet security", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "snyk/actions/docker", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "monitor --all-projects", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aquasecurity/trivy-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "scan-type", "value": "all", "CIvars": []}, {"type": "arg", "name": "severity", "value": "HIGH,CRITICAL", "CIvars": []}, {"type": "arg", "name": "exit-code", "value": "1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Check your security reports\"\n# Add additional commands for handling reports or notifying if issues are found\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32068437_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YOUR_PROJECT.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseA /p:Platform=\"Any CPU\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseA /p:Platform=\"Any CPU\" /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfileA", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseB /p:Platform=\"Any CPU\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YOUR_PROJECT.csproj /p:Configuration=ReleaseB /p:Platform=\"Any CPU\" /p:DeployOnBuild=true /p:PublishProfile=YourPublishProfileB", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Windows-Phone-Build-Artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/output/for/config-a\npath/to/output/for/config-b\n", "CIvars": []}]}]}]}
{"id": "32083029_0", "jobs": [{"name": "tidy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-perl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "perl-version", "value": "5.34", "CIvars": []}, {"type": "arg", "name": "packages", "value": "Perl::Tidy", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Find all .pl files to tidy\nfind . -name '*.pl' -print0 | xargs -0 perl -MPerl::Tidy -e 'for (@ARGV) { Perl::Tidy::tidy(:all = $_); }'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3210501_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd build/  # Navigate to the build directory\ncomposer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build/  # Navigate to the build directory\ncomposer global require phing/phing  # Install Phing globally\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build/  # Navigate to the build directory\n~/.composer/vendor/bin/phing  # Run Phing command to execute the build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32107954_0", "jobs": [{"name": "close-issues", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the commit messages from the last push\nmessages=$(git log -1 --pretty=%B)\necho \"commit_messages<<EOF\" >> $GITHUB_ENV\necho \"$messages\" >> $GITHUB_ENV\necho \"EOF\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking for issues to close in commit messages...\"\nfor message in ${{ env.commit_messages }}; do\n  if [[ \"$message\" == *\"fixes #\"* ]] || [[ \"$message\" == *\"closes #\"* ]]; then\n    issue_number=$(echo \"$message\" | grep -o \"#[0-9]*\" | sed 's/#//')\n    echo \"Closing issue #$issue_number...\"\n\n    # Using GitHub CLI to close the issue\n    gh issue close \"$issue_number\" --repo \"${{ github.repository }}\" --comment \"Closed by commit: ${{ github.sha }}\"\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "32136511_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod repo add private-repo https://<USERNAME>:${{ secrets.COCOAPODS_REPO_ACCESS_TOKEN }}@github.com/<USERNAME>/<PRIVATE_REPO>.git\npod repo update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3220647_1", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --bootstrap your-php-file-path/bootstrap.php your-php-file-path/tests", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32208115_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results-directory/", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.projectKey=your_project_key -Dsonar.organization=your_organization -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}  # Make sure to set SONAR_TOKEN in your GitHub secrets\n", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}]}]}
{"id": "32247212_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gradle-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "malinskiy/action-android", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": "${{ matrix.android-version }}", "CIvars": [{"name": "android-version", "expression": "matrix.android-version", "type": "matrix"}]}, {"type": "arg", "name": "target", "value": "${{ matrix.target }}", "CIvars": [{"name": "target", "expression": "matrix.target", "type": "matrix"}]}, {"type": "arg", "name": "script", "value": "./gradlew connected${{ matrix.target.capitalize() }}AndroidTest", "CIvars": [{"name": "target.capitalize()", "expression": "matrix.target.capitalize()", "type": "matrix"}, {"name": "target.capitalize", "expression": "matrix.target.capitalize", "type": "matrix"}]}]}]}]}
{"id": "32259270_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.ci config/database.yml\nbin/rails db:create db:migrate db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Change this if you are using a different test framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32262295_0", "jobs": [{"name": "add-reviewer", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "reviewer-bot/add-reviewer", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Reviewer has been added to the PR.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32330922_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text --coverage-clover coverage.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "coverage.xml", "CIvars": []}, {"type": "arg", "name": "flags", "value": "unittests", "CIvars": []}]}]}, {"name": "static_analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}, {"name": "security", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer audit --format=json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32347839_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive archive ENABLE_BITCODE=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportPath $GITHUB_WORKSPACE/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}]}]}
{"id": "3236740_1", "jobs": [{"name": "phpstan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse src --level=max", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32425582_0", "jobs": [{"name": "search", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Searching repositories in organization: ${{ github.event.inputs.org_name }} for string: ${{ github.event.inputs.search_string }}\"\n\n# Getting a list of repositories in the organization\nrepos=$(gh repo list ${{ github.event.inputs.org_name }} --json name -q '.[] | .name')\n\n# Initialize results array\nresults=\"\"\n\n# Search each repository for the string\nfor repo in $repos; do\n  echo \"Searching in repository: $repo\"\n  match_count=$(gh repo clone \"${{ github.event.inputs.org_name }}/$repo\" -- -q \"grep -r '${{ github.event.inputs.search_string }}' . || true\")\n  if [ -n \"$match_count\" ]; then\n    results+=\"Found in $repo:\\n$match_count\\n\"\n  fi\n  rm -rf \"$repo\"  # Clean up cloned repository\ndone\n\nif [ -z \"$results\" ]; then\n  echo \"No matches found.\"\nelse\n  echo -e \"Matches found:\\n$results\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ steps.search_repos.outputs.results }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32438212_0", "jobs": [{"name": "powershell-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Call the PowerShell script here\n# Example: .\\scripts\\your-script.ps1\nWrite-Host \"Running PowerShell script\"\n.\\scripts\\your-script.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Write-Host \"Cleanup after script execution\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32464231_1", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "32527186_1", "jobs": [{"name": "count_tags", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll\ngem install bundler\n# If you have a Gemfile, you can run bundle install instead\n# bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby count_posts_by_tags.rb\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32582012_0", "jobs": [{"name": "fetch_metadata", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "REPO_OWNER=\"username\"  # Replace with the owner of the target repo\nREPO_NAME=\"repo-name\"   # Replace with the target repo name\nTOKEN=\"${{ secrets.GITHUB_TOKEN }}\"  # GitHub provides a default token\nAPI_URL=\"https://api.github.com/repos/$REPO_OWNER/$REPO_NAME\"\n\n# Fetch metadata JSON\nresponse=$(curl -s -H \"Authorization: token $TOKEN\" \"$API_URL\")\n\n# Extract relevant metadata fields\nfull_name=$(echo \"$response\" | jq -r '.full_name')\ndescription=$(echo \"$response\" | jq -r '.description')\n\n# Output as environment variables\necho \"FULL_NAME=${full_name}\" >> $GITHUB_ENV\necho \"DESCRIPTION=${description}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create or update a file with the fetched metadata\necho \"---\" > _data/repo_metadata.yml\necho \"full_name: '${{ env.FULL_NAME }}'\" >> _data/repo_metadata.yml\necho \"description: '${{ env.DESCRIPTION }}'\" >> _data/repo_metadata.yml\necho \"---\" >> _data/repo_metadata.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "32585972_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32596511_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create and migrate the database if necessary\nbundle exec rake db:create\nbundle exec rake db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test  # or your preferred test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop # if you are using RuboCop for linting\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec brakeman --quiet  # if you are using Brakeman for security scanning\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3269133_1", "jobs": [{"name": "code-style", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your specific ignore directories here\nphpcs --ignore=vendor/*,tests/* -p .  # Adjust ignore paths as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32773056_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxheld83/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32859860_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build # Assuming you have a 'build' lane in your Fastfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane upload_to_app_store # Assuming you have a lane to upload to App Store Connect\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32963719_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\ncd ios && pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath $PWD/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $PWD/build/YourApp.xcarchive -exportPath $PWD/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload -u YOUR_APPLE_ID -i build/YourApp.ipa", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "32997975_0", "jobs": [{"name": "composer-install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33042181_0", "jobs": [{"name": "render", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "R -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"bookdown\"), repos = \"http://cran.rstudio.com/\")'  # Add any other packages you need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'rmarkdown::render_site()'  # Assuming you have an _site.yml file, change to rmarkdown::render(\"your_file.Rmd\") if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"GitHub Action\"\ngit config --local user.email \"action@github.com\"\ngit add .\ngit commit -m \"Render RMarkdown files\" || echo \"No changes to commit\"\ngit push origin main --force  # Change 'main' to your target branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33044517_0", "jobs": [{"name": "sync-to-azure-devops", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.29.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git clone https://dev.azure.com/${{ secrets.AZURE_ORG_NAME }}/${{ secrets.AZURE_PROJECT_NAME }}/_git/${{ secrets.AZURE_REPO_NAME }} azure-repo\ncd azure-repo\ngit config user.email \"github-actions@users.noreply.github.com\"\ngit config user.name \"GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -R ../* azure-repo/\ncd azure-repo\ngit add .\ngit commit -m \"Sync from GitHub: ${{ github.sha }}\"\ngit push origin master  # Change 'master' to your default branch if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33070186_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifact-from-server-1", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts/server1", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifact-from-server-2", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts/server2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p ./combined\ncp ./artifacts/server1/* ./combined/\ncp ./artifacts/server2/* ./combined/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ./combined\n# Create .nuspec file or use existing one if you have it:\necho \"<?xml version=\\\"1.0\\\"?>\n<package >\n    <metadata>\n        <id>YourPackageId</id>\n        <version>1.0.0</version> <!-- You may want to automate this as well -->\n        <authors>Your Name</authors>\n        <description>Your package description.</description>\n    </metadata>\n    <files>\n        <file src=\\\"*\\\" target=\\\"lib/netstandard2.0\\\" /> <!-- Adjust the target as needed -->\n    </files>\n</package>\" > YourPackageId.nuspec\n\n# Pack the NuGet package\ndotnet pack YourPackageId.nuspec -c Release -o .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "nuget/nuget-publish", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "nuget_api_key", "value": "${{ secrets.NUGET_API_KEY }}", "CIvars": [{"name": "NUGET_API_KEY", "expression": "secrets.NUGET_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "package_path", "value": "./combined/*.nupkg", "CIvars": []}]}]}]}
{"id": "33110549_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --verbose", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33148696_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-lian/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive\nxcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ./ExportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.appstoreconnect.apple.com/v1/builds\" \\\n-H \"Authorization: Bearer $APP_STORE_CONNECT_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"data\": {\n    \"type\": \"builds\",\n    \"attributes\": {\n      \"version\": \"1.0.0\",  # Provide the version number you are uploading\n      \"buildNumber\": \"1\",    # Provide the build number you are uploading\n      \"platform\": \"IOS\"\n    },\n    \"relationships\": {\n      \"app\": {\n        \"data\": {\n          \"type\": \"apps\",\n          \"id\": \"'${{ secrets.APP_STORE_CONNECT_IOS_APP_ID }}'\"  # Adjust the ID from stored secret\n        }\n      }\n    }\n  }\n}'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload --ipa ./build/YourApp.ipa --username ${{ secrets.APP_STORE_CONNECT_USERNAME }} --app_identifier ${{ secrets.APP_STORE_CONNECT_APP_ID }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33174972_1", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, gd, mysqli, soap, curl, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Starting deployment...\"\n# Here you would add your deployment commands\n# For example, using rsync to transfer files to your server\n# rsync -avz --delete ./ user@yourserver:/path/to/moodle/\necho \"Deployment complete\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3317633_0", "jobs": [{"name": "dump_database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mysql/setup-mysql", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "mysql-root-password", "value": "${{ secrets.MYSQL_ROOT_PASSWORD }}", "CIvars": [{"name": "MYSQL_ROOT_PASSWORD", "expression": "secrets.MYSQL_ROOT_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "mysqldump -u root -h localhost --databases your_database_name > dump.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add dump.sql\ngit commit -m \"Add MySQL dump $(date +'%Y-%m-%d %H:%M:%S')\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33191163_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -O https://releases.hashicorp.com/vagrant/2.2.19/vagrant_2.2.19_linux_amd64.zip\nunzip vagrant_2.2.19_linux_amd64.zip -d /usr/local/bin\nchmod +x /usr/local/bin/vagrant\nvagrant --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y virtualbox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant init\n# You might want to configure the Vagrantfile programmatically for CI\n# echo \"Vagrantfile configuration goes here\" > Vagrantfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up\nvagrant ssh -c \"cd /vagrant && <your_test_command_here>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33210709_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,os=15.0' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33289579_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "33343904_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivam010/php-setup", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\necho \"$HOME/.composer/vendor/bin\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-project-key", "value": "your-project-key", "CIvars": []}, {"type": "arg", "name": "sonar-project-name", "value": "your-project-name", "CIvars": []}, {"type": "arg", "name": "sonar-project-version", "value": "1.0", "CIvars": []}, {"type": "arg", "name": "sonar-host-url", "value": "https://sonarcloud.io", "CIvars": []}, {"type": "arg", "name": "sonar-login", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "if [[ \"${{ job.status }}\" == \"success\" ]]; then\n  echo \"Build succeeded!\"\nelse\n  echo \"Build failed!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33374193_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 14' -derivedDataPath build test -only-testing:YourAppTests/PushNotificationTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/Logs/Test/*.log", "CIvars": []}]}]}]}
{"id": "33438373_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your-Azure-App-Name>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "33475305_0", "jobs": [{"name": "invoke-remote-process", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-client", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "known-hosts", "value": "${{ secrets.REMOTE_HOST_KNOWN_HOSTS }}", "CIvars": [{"name": "REMOTE_HOST_KNOWN_HOSTS", "expression": "secrets.REMOTE_HOST_KNOWN_HOSTS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no user@remote-server 'bash -s' < ./script-to-run.sh\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33476484_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'YourProjectName' with the actual project names. You can add multiple publish commands for each project.\ndotnet publish YourProjectA/YourProjectA.csproj --configuration Release --output ./output/YourProjectA\ndotnet publish YourProjectB/YourProjectB.csproj --configuration Release --output ./output/YourProjectB\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output/YourProjectA", "CIvars": []}]}]}]}
{"id": "33576779_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppUITests -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty -c\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/test/results", "CIvars": []}]}]}]}
{"id": "33656922_0", "jobs": [{"name": "phpci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Adjust this as needed based on your testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33752472_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the custom build path\nCUSTOM_BUILD_PATH=\"./build\"\n\n# Create the directory for the build path\nmkdir -p \"${CUSTOM_BUILD_PATH}\"\n\n# Build the project using xcodebuild\nxcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourScheme \\\n           -configuration Release \\\n           -destination 'generic/platform=iOS' \\\n           -derivedDataPath \"${CUSTOM_BUILD_PATH}\" \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33765400_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "33770905_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build -d _site\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "destination_dir", "value": ".", "CIvars": []}]}]}]}
{"id": "33774497_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "theqtcompany/setup-qt", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "packages", "value": "qtbase, qtdeclarative, qttools", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..  # or qmake .. for .pro files\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable_name  # replace with the name of your test executable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable_name --gtest_output=xml:test_results.xml  # Generate xml output\ncat test_results.xml  # Output the test results in console\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/test_results.xml", "CIvars": []}]}]}]}
{"id": "33841535_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourProject.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourProject.sln --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish YourProject.sln --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "33865283_1", "jobs": [{"name": "run-php-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php application/scripts/execute_query.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "33871306_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, bcmath, gd", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "upload_max_filesize=100M\npost_max_size=100M\nmemory_limit=512M\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-scripts --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\nphp artisan key:generate\nphp artisan config:cache\nphp artisan migrate --env=testing\n./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start SSH agent and add the private key\neval \"$(ssh-agent -s)\"\necho \"$PRIVATE_KEY\" | tr -d '\\r' | ssh-add -\n\n# Optional: Update known hosts to avoid prompt\nmkdir -p ~/.ssh\nssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts\n\n# Deploy project to server\nssh $SERVER_USER@$SERVER_IP << 'EOF'\n  cd /path/to/your/laravel/app  # Specify the path on your server\n  git pull origin main  # Assuming you're using main as your deployment branch\n  composer install --no-dev --no-progress --prefer-dist\n  php artisan migrate --force  # Use --force for migrations in production\n  php artisan config:cache\n  php artisan route:cache\n  php artisan view:cache\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3405681_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34092337_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "${{ matrix.node-version }}", "CIvars": [{"name": "node-version", "expression": "matrix.node-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some/slack-notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "CI Build for `${{ github.event.head_commit.message }}` completed successfully!", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}]}]}]}]}
{"id": "3414667_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build your_gem.gemspec  # Replace 'your_gem.gemspec' with your gemspec file name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem push *.gem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34165806_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github actions/database.yml\nRAILS_ENV=test bundle exec rails db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec  # Use your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop  # Optional: Run a code linter like RuboCop\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/build/artifacts", "CIvars": []}]}]}]}
{"id": "34295981_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "34310830_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phdox generate\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "34330217_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore your-solution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build your-solution.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish Project1/Project1.csproj --configuration Release --output ./output/Project1", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish Project2/Project2.csproj --configuration Release --output ./output/Project2", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy-project1", "steps": [{"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-azure-web-app-name1", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE1 }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE1", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE1", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output/Project1", "CIvars": []}]}]}, {"name": "deploy-project2", "steps": [{"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-azure-web-app-name2", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE2 }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE2", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE2", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output/Project2", "CIvars": []}]}]}]}
{"id": "34360659_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example: You must ensure that the Ranorex Runtime installer is available\n# This can be an executable you can download or that you have in your repo\nstart /wait \"Ranorex Runtime\" \"path_to_ranorex_installer.exe\" /quiet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd path-to-your-ranorex-project\n\"C:\\Program Files\\Ranorex\\Ranorex Studio\\bin\\Ranorex.exe\" /run \"YourRanorexTestSuite.rxsuite\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/test-results", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "platform", "value": "Win", "CIvars": []}, {"type": "arg", "name": "test-results-files", "value": "**/*.trx", "CIvars": []}, {"type": "arg", "name": "project", "value": "Your VSO Project Name", "CIvars": []}, {"type": "arg", "name": "build-url", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "CIvars": [{"name": "server_url", "expression": "github.server_url", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "system-access-token", "value": "${{ secrets.VSO_SYSTEM_ACCESS_TOKEN }}", "CIvars": [{"name": "VSO_SYSTEM_ACCESS_TOKEN", "expression": "secrets.VSO_SYSTEM_ACCESS_TOKEN", "type": "secret"}]}]}]}]}
{"id": "34368328_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec middleman build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "34509310_0", "jobs": [{"name": "update_pods", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod repo update  # Ensure the repo is up to date\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod update --no-repo-update  # Update pods without updating the spec repo\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\nif ! git diff --quiet Podfile.lock; then\n  git add Podfile.lock\n  git commit -m \"Auto-update Podfile.lock\"\n  git push\nelse\n  echo \"No changes to Podfile.lock\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod deintegrate && pod install", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34564791_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "5.6", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, ctype, token_get_all, open_ssl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34572170_0", "jobs": [{"name": "reply", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/reply-to-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.issue.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thank you for your comment! If you have any further questions or anything else you want to discuss, feel free to ask!\n", "CIvars": []}]}]}]}
{"id": "34623978_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o published", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p output\n# Copy static files\ncp -R ./published/wwwroot/* ./output/\n# Copy binaries (dlls, etc.)\ncp -R ./published/*.dll ./output/\ncp -R ./published/*.exe ./output/  # Add any other specific binary types here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/scp-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.HOST }}", "CIvars": [{"name": "HOST", "expression": "secrets.HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.USERNAME }}", "CIvars": [{"name": "USERNAME", "expression": "secrets.USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.PASSWORD }}", "CIvars": [{"name": "PASSWORD", "expression": "secrets.PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "./output/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/your/remote/directory", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm -rf ./output", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34645523_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "34655381_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit tests -- --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ github.event_name }}\" == \"push\" ]; then\n  echo \"Deploying to production...\"\n  # Place your deployment commands here\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34795169_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEB_APP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEB_APP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEB_APP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "34839682_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build || exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a script to test your Jekyll site, replace `test_script.sh` accordingly\nif [ -f \"test_script.sh\" ]; then\n  bash test_script.sh\nelse\n  echo \"No test script found, skipping tests.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploy your site here - e.g., rsync, FTP, etc.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3491849_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/your-repository-name", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "GoogleCloudPlatform/github-actions/setup-gcloud", "version": "v0.2.0", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-gcp-project-id", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud components install app-engine-python # Use this for Python or adjust based on your runtime\ngcloud components install gsutil\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35062911_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text --strict\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -m", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "printenv", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35203890_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have tests, run them here\n# Example: \n# vstest.console.exe YourTests.dll\necho \"Run your unit tests here\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35317285_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods # if using CocoaPods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -runFirstLaunch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release clean build CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\" PROVISIONING_PROFILE=\"your-provisioning-profile\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath \"YourApp.xcarchive\" -exportPath \"./build\" -exportOptionsPlist \"ExportOptions.plist\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/app-store-upload-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "apple_id", "value": "your-apple-email@example.com", "CIvars": []}, {"type": "arg", "name": "app_specific_password", "value": "${{ secrets.APP_SPECIFIC_PASSWORD }}", "CIvars": [{"name": "APP_SPECIFIC_PASSWORD", "expression": "secrets.APP_SPECIFIC_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "itunes_connect_api_key", "value": "${{ secrets.APP_STORE_CONNECT_API_KEY }}", "CIvars": [{"name": "APP_STORE_CONNECT_API_KEY", "expression": "secrets.APP_STORE_CONNECT_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "ipa_path", "value": "./build/YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "skip_waiting_for_processing", "value": true, "CIvars": []}]}]}]}
{"id": "35317484_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "<your-aws-account-id>.dkr.ecr.<your-region>.amazonaws.com/<your-ecr-repo>:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecs-update-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "<your-cluster-name>", "CIvars": []}, {"type": "arg", "name": "service", "value": "<your-service-name>", "CIvars": []}, {"type": "arg", "name": "task-definition", "value": "<your-task-definition>", "CIvars": []}, {"type": "arg", "name": "container-name", "value": "<your-container-name>", "CIvars": []}, {"type": "arg", "name": "region", "value": "<your-region>", "CIvars": []}, {"type": "arg", "name": "image", "value": "<your-aws-account-id>.dkr.ecr.<your-region>.amazonaws.com/<your-ecr-repo>:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecs-describe-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "<your-cluster-name>", "CIvars": []}, {"type": "arg", "name": "service", "value": "<your-service-name>", "CIvars": []}, {"type": "arg", "name": "region", "value": "<your-region>", "CIvars": []}]}]}]}
{"id": "35367683_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-gcp-project-id", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n# Make sure to specify your own app.yaml configuration file.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35458369_0", "jobs": [{"name": "simulate-location", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\npod update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start the simulator\nxcrun simctl boot \"iPhone 14\"  # Change to your desired simulator\n# Wait for a short period to ensure the simulator is ready\nsleep 10\n# Load the GPX file to the simulator\nxcrun simctl location booted ./path/to/your/location.gpx  # Change path as necessary\n# Run your tests or app\nxcrun simctl launch booted com.your.bundle.id  # Change with your App ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl shutdown \"iPhone 14\"  # Make sure to shutdown your simulator after use\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35499859_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module Az -AllowClobber -Scope CurrentUser -Force\nImport-Module Az\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"\n$appId = $env:AZURE_APP_ID\n$password = $env:AZURE_PASSWORD\n$tenantId = $env:AZURE_TENANT_ID\nConnect-AzAccount -ServicePrincipal -TenantId $tenantId -ApplicationId $appId -Credential (ConvertTo-SecureString $password -AsPlainText -Force)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Your deployment script goes here.\n# For example, if you are running a script called Deploy.ps1:\n.\\Deploy.ps1\n# Additional deployment logic can be added here.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Command to clean up resources if necessary\nDisconnect-AzAccount\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35547936_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo $CERTIFICATE | base64 --decode > certificate.p12\nsecurity create-keychain -p 'actions' build.keychain\nsecurity import certificate.p12 -P 'your_certificate_password' -A\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p 'actions' build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k 'actions' build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo $PROVISIONING_PROFILE | base64 --decode > profile.mobileprovision\nmkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\nmv profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build # Make sure your Fastfile has a 'build' lane defined\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35551739_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if mysqladmin ping -h \"127.0.0.1\" --silent; then\n    echo \"MySQL is up!\"\n    break\n  fi\n  echo \"Waiting for MySQL...\"\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing\nphp artisan db:seed --env=testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35599011_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"MY_ENV_VAR=HelloWorld\" >> $GITHUB_ENV\necho \"ANOTHER_ENV_VAR=ExampleValue\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35605608_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Change to your iOS project directory if necessary\nxcodebuild -workspace YourApp.xcworkspace \\\n  -scheme YourScheme \\\n  -sdk iphoneos \\\n  -configuration Release \\\n  archive \\\n  -archivePath ./build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n  -archivePath ./build/YourApp.xcarchive \\\n  -exportOptionsPlist ./ios/exportOptions.plist \\\n  -exportPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"IPA Path: ./build/YourApp.ipa\"\necho \"IPA Path: ${{ github.workspace }}/build/YourApp.ipa\" # Print out the path for reference\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "35686138_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'your_script.rb' with the name of your Ruby script or command\nruby your_script.rb      \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35704794_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "repo-sync/github-sync", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "source_branch", "value": "main", "CIvars": []}, {"type": "arg", "name": "target_branch", "value": "main", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "target_repo", "value": "your-username/repo-b", "CIvars": []}]}]}]}
{"id": "35751042_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build your_gem_name.gemspec  # Replace with your gemspec file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install ./your_gem_name-*.gem  # Replace with your gem name\n# Optionally, run your tests if you have a test suite\n# e.g., rspec or minitest\nbundle exec rspec  # Uncomment if using RSpec\n# OR\n# bundle exec rake test  # Uncomment if using Rake for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem push ./your_gem_name-*.gem  # Replace with your gem name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35769047_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x gradlew", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-release", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "microsoft/appcenter-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "appName", "value": "<Your_App_Name>", "CIvars": []}, {"type": "arg", "name": "appPath", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}, {"type": "arg", "name": "distributionGroups", "value": "<Your_Distribution_Group>", "CIvars": []}, {"type": "arg", "name": "apiToken", "value": "${{ secrets.APP_CENTER_API_TOKEN }}", "CIvars": [{"name": "APP_CENTER_API_TOKEN", "expression": "secrets.APP_CENTER_API_TOKEN", "type": "secret"}]}]}]}]}
{"id": "35770346_0", "jobs": [{"name": "update-pr-title", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/repo-syncer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "title", "value": "Merged: ${{ github.event.pull_request.title }}", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Updated PR title: ${{ github.event.pull_request.title }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35772043_0", "jobs": [{"name": "list_repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, openssl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\nrequire 'vendor/autoload.php';\n$hybridauthConfig = [\n    'base_url' => 'http://your-hybridauth-endpoint',\n    'providers' => [\n        'GitHub' => [\n            'enabled' => true,\n            'keys' => [\n                'id' => getenv('GITHUB_CLIENT_ID'),\n                'secret' => getenv('GITHUB_CLIENT_SECRET')\n            ],\n            'scope' => 'repo'\n        ]\n    ]\n];\n\n$hybridauth = new Hybridauth\\Hybridauth($hybridauthConfig);\n$adapter = $hybridauth->getAdapter('GitHub');\n$adapter->authenticate();\n$userProfile = $adapter->getUserProfile();\n\n$apiUrl = 'https://api.github.com/users/' . $userProfile->identifier . '/repos';\n$response = file_get_contents($apiUrl, false, stream_context_create([\n    'http' => [\n        'header' => [\n            \"User-Agent: PHP-Script\",\n            \"Authorization: token \" . $adapter->getAccessToken()\n        ]\n    ]\n]));\n\n$repositories = json_decode($response);\nforeach ($repositories as $repo) {\n    echo $repo->full_name . PHP_EOL;\n}\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35782425_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35812163_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawrence/action-cmake", "version": "v1.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=${{ matrix.toolchain }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build build --config Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ctest --test-dir build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35912145_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to FTP server\"\napt-get update && apt-get install -y ftp\nlftp -u $FTP_USERNAME,$FTP_PASSWORD -e \"mirror -R . /path/on/server; quit\" $FTP_SERVER\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35919983_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build-report  # Replace with your command to create HTML report\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "html-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/report.html", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Monthly Report", "CIvars": []}, {"type": "arg", "name": "body", "value": "<h1>Your HTML Report</h1><a href='cid:report.html'>View Report</a>", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_FROM }}", "CIvars": [{"name": "EMAIL_FROM", "expression": "secrets.EMAIL_FROM", "type": "secret"}]}, {"type": "arg", "name": "attachments", "value": "path/to/report.html", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \\\n-d chat_id=$TELEGRAM_CHAT_ID \\\n-d text=\"Your report is ready! You can download it [here](https://url.to/your/report.html)\" \\\n-d parse_mode=\"HTML\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "35995990_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install --production", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-org-id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-project-id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-env", "value": "production", "CIvars": []}]}]}]}
{"id": "36129781_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports/", "CIvars": []}]}]}]}
{"id": "36243399_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your test command here, if you have tests for your site\n# Example: bundle exec htmlproofer ./_site\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your deployment commands here\necho \"Deploying the built site...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36270286_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "New Pull Request: ${{ github.event.pull_request.title }}", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}]}, {"type": "arg", "name": "body", "value": "A new pull request has been opened by ${{ github.event.pull_request.user.login }}.\nYou can view it here: ${{ github.event.pull_request.html_url }}\n\nPull Request Description:\n${{ github.event.pull_request.body }}\n", "CIvars": [{"name": "event.pull_request.user.login", "expression": "github.event.pull_request.user.login", "type": "context"}, {"name": "event.pull_request.html_url", "expression": "github.event.pull_request.html_url", "type": "context"}, {"name": "event.pull_request.body", "expression": "github.event.pull_request.body", "type": "context"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "36297802_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GOOGLE_PROJECT_ID }}", "CIvars": [{"name": "GOOGLE_PROJECT_ID", "expression": "secrets.GOOGLE_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}", "CIvars": [{"name": "GOOGLE_APPLICATION_CREDENTIALS", "expression": "secrets.GOOGLE_APPLICATION_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# If you're using Node.js, Python, etc., install your dependencies here\n# Example for Node.js:\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet  # Use your app.yaml name if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36402661_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36600042_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y devscripts debhelper\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-package-directory  # change directory to where your debian packages are defined\ndebuild -us -uc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ncipollo/release-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "files", "value": "your-package-directory/*.deb  # Adjust the pattern as necessary\n", "CIvars": []}, {"type": "arg", "name": "tag", "value": "${{ github.ref_name }}", "CIvars": [{"name": "ref_name", "expression": "github.ref_name", "type": "context"}]}]}]}]}
{"id": "36610184_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt  # Adjust according to your project needs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your compilation command here\n# e.g., if you were using a Java project, it might be `javac src/**/*.java`\necho \"Compiling the code...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your test command here\n# e.g., if you're using `pytest`, it could be `pytest`\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ansible/ansible-playbook-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "playbook", "value": "deploy.yml", "CIvars": []}, {"type": "arg", "name": "inventory", "value": "inventory.ini", "CIvars": []}]}]}]}
{"id": "36654260_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sql-server", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sqlserver-version", "value": "2019-latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace this with the path to your PowerShell script\npwsh ./export-ssis-diagram.ps1\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "SSIS-Diagram", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/exported/diagram/file.png", "CIvars": []}]}]}]}
{"id": "36778339_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAppName", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "36783786_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "fawick/setup-stack", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "stack-version", "value": "2.7.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "stack build --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "stack test --fast", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "stack build", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36814259_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-gcc", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcc", "value": "10", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36851900_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish --access public", "name": "", "version": "", "shell": "bash"}]}, {"name": "deployment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"\n# You can add your deployment scripts or commands here\n# e.g. calling external deployment tools\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "payload", "value": "{\"text\":\"Deployment completed successfully!\"}", "CIvars": []}, {"type": "arg", "name": "channel", "value": "#your-channel", "CIvars": []}, {"type": "arg", "name": "status", "value": "success", "CIvars": []}]}]}]}
{"id": "36893597_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/auto-merge", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "merge_method", "value": "merge", "CIvars": []}, {"type": "arg", "name": "merge_label", "value": "automerge", "CIvars": []}, {"type": "arg", "name": "commit_message", "value": "Auto-merged pull request", "CIvars": []}]}]}]}
{"id": "36897557_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your Azure App Service Name>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "3696629_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.composer/cache\nvendor\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/php-cs-fixer fix --dry-run --diff", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "36973589_0", "jobs": [{"name": "change-base", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "BASE_FORK=\"new-owner:new-repo\" # Replace with the new base fork (owner:repo format)\nPR_NUMBER=${{ github.event.pull_request.number }}\n\necho \"Changing base fork of PR #$PR_NUMBER to $BASE_FORK\"\n\n# Use GitHub CLI to change the base of the pull request\ngh pr edit $PR_NUMBER --base $BASE_FORK\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37140588_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Load the original environment JSON file\noriginal_file='environment.json'\nnew_file='updated_environment.json'\neval \"$(jq -r '. | to_entries | map(\"export \\(.key)=\\(.value)\") | .[]' $original_file)\"\n\n# Build a new property based on an existing one\necho \"Building new property from an existing one\"\nNEW_PROPERTY=$(echo $EXISTING_PROPERTY | tr 'a-z' 'A-Z') # Example transformation, change as needed\n\n# Update the JSON with the new property\njq --arg newProp \"$NEW_PROPERTY\" '. + {new_property: $newProp}' $original_file > $new_file\necho \"New JSON generated with updated property\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cat updated_environment.json\n# Optionally validate JSON structure\njq empty updated_environment.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "chef-client --local-mode --json-attributes updated_environment.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37200820_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"Build failed.\"\n  exit 1\nelse\n  echo \"Build succeeded.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"Build failed.\"\n  echo \"::set-output name=status::failure\"\nelse\n  echo \"Build succeeded.\"\n  echo \"::set-output name=status::success\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/${{ github.repository }}/statuses/${{ github.sha }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "status", "value": "${{ steps.create_status.outputs.status }}", "CIvars": [{"name": "create_status.outputs.status", "expression": "steps.create_status.outputs.status", "type": "steps"}]}, {"type": "arg", "name": "context", "value": "continuous-integration", "CIvars": []}, {"type": "arg", "name": "description", "value": "Build Status from GitHub Actions", "CIvars": []}]}]}]}
{"id": "37222684_2", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37244768_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "tar -czvf artifacts.tar.gz path/to/build/artifacts", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "artifacts.tar.gz", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/sftp-deploy", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.SFTP_SERVER }}", "CIvars": [{"name": "SFTP_SERVER", "expression": "secrets.SFTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SFTP_USERNAME }}", "CIvars": [{"name": "SFTP_USERNAME", "expression": "secrets.SFTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SFTP_PASSWORD }}", "CIvars": [{"name": "SFTP_PASSWORD", "expression": "secrets.SFTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "local-dir", "value": "./artifacts", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/path/to/remote/dir", "CIvars": []}]}]}]}
{"id": "3726888_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "37280954_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37421734_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AzurePublishProfile }}", "CIvars": [{"name": "AzurePublishProfile", "expression": "secrets.AzurePublishProfile", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az webapp webjob run --name <YOUR_WEBJOB_NAME> --resource-group <YOUR_RESOURCE_GROUP> --subscription <YOUR_SUBSCRIPTION_ID>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37447223_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Hosting-Github-Action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "projectId", "value": "${{ secrets.FIREBASE_PROJECT_ID }}", "CIvars": [{"name": "FIREBASE_PROJECT_ID", "expression": "secrets.FIREBASE_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "debug", "value": true, "CIvars": []}]}]}]}
{"id": "37524939_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-l/ios-simulator-run", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory  # Replace with your project's directory\n# Assuming you are using Cocoapods, add other dependency managers where needed\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release | tee build.log\n# Replace with your actual workspace file and scheme name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"Your Script Log Message\" build.log; then\n  echo \"Script executed successfully\"\nelse\n  echo \"Script did not execute\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37535065_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install haml-lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "haml-lint --fail-level warning", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37604291_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Ensure your changes are committed to a new branch\ngit checkout -b my-feature-branch\n# If you need to commit any changes, include your commands here\n# e.g., echo \"My change\" >> README.md && git add README.md && git commit -m \"My change\"\n\n# Push the new branch to the repository\ngit push origin my-feature-branch\n\n# Create a pull request using GitHub CLI\ngh pr create --base target-branch --head my-feature-branch --title \"My new feature\" --body \"This PR adds a new feature.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37634680_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "scp-action/scp-action", "version": "v0.7.3", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_HOST }}", "CIvars": [{"name": "SERVER_HOST", "expression": "secrets.SERVER_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "private_key", "value": "${{ secrets.SERVER_SSH_KEY }}", "CIvars": [{"name": "SERVER_SSH_KEY", "expression": "secrets.SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "local", "value": ".", "CIvars": []}, {"type": "arg", "name": "remote", "value": "/path/on/server", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/ssh-action", "version": "v0.1.9", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_HOST }}", "CIvars": [{"name": "SERVER_HOST", "expression": "secrets.SERVER_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.SERVER_SSH_KEY }}", "CIvars": [{"name": "SERVER_SSH_KEY", "expression": "secrets.SERVER_SSH_KEY", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "cd /path/on/server  # Change to the directory where your app is deployed\nnpm install --production  # Install any new dependencies\npm2 restart your-app-name || pm2 start your-app-name  # Restart your application\n", "CIvars": []}]}]}]}
{"id": "37638809_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking file versions...\"\nexpected_version=\"1.0.0\" # Change to your expected version\nactual_version=$(cat path/to/version_file.txt) # Path to your version file\n\nif [ \"$expected_version\" != \"$actual_version\" ]; then\n  echo \"Version mismatch: expected $expected_version but got $actual_version\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir output\ncp -r path/to/files_to_zip/* output/ # Adjust path accordingly\nzip -r output.zip output/*\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./output.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "output.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "37662267_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -d \"_site\" ]; then\n  echo \"Build failed: _site directory does not exist.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "37720268_0", "jobs": [{"name": "sonarQube", "steps": [{"type": "gh_action", "cmd": "", "name": "perp4/checkout-perforce", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "p4_user", "value": "${{ secrets.P4_USER }}", "CIvars": [{"name": "P4_USER", "expression": "secrets.P4_USER", "type": "secret"}]}, {"type": "arg", "name": "p4_password", "value": "${{ secrets.P4_PASSWORD }}", "CIvars": [{"name": "P4_PASSWORD", "expression": "secrets.P4_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "p4_server", "value": "${{ secrets.P4_SERVER }}", "CIvars": [{"name": "P4_SERVER", "expression": "secrets.P4_SERVER", "type": "secret"}]}, {"type": "arg", "name": "p4_client", "value": "your-client-name", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -L -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip\nunzip sonar-scanner-cli-4.6.2.2472-linux.zip\nsudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner\necho 'export PATH=$PATH:/opt/sonar-scanner/bin' >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sonar-scanner \\\n  -Dsonar.projectKey=your-project-key \\\n  -Dsonar.sources=. \\\n  -Dsonar.host.url=$SONAR_HOST_URL \\\n  -Dsonar.login=$SONAR_TOKEN\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "377629_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, mysqli, zip, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to server...\"\n# Add your deployment commands here\n# For example using rsync or scp to copy files to your server\n# rsync -avz ./your-drupal-folder/ user@your-server:/path/to/deploy/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "drush cr\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37851566_0", "jobs": [{"name": "update-xcode-settings", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install xcodeproj\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd <path_to_your_xcode_project>   # Change this to your xcodeproj directory\n# Example commands to modify the project settings\n# Replace <YourProjectName.xcodeproj> with your actual project name\n# Replace with your desired settings changes\n\n# Change Bundle Identifier\nxcodeproj change --bundle_identifier com.yourcompany.yourapp <YourProjectName>.xcodeproj\n\n# Example of changing deployment target\nxcodeproj update --deployment_target '14.0' <YourProjectName>.xcodeproj \n\n# Any other commands to modify your xcodeproj can be added here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git diff  # View changes made to the project settings\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.email \"action@github.com\"\ngit config --global user.name \"GitHub Action\"\ngit add .\ngit commit -m \"Update Xcode project settings via GitHub Actions\" || echo \"No changes to commit\"\ngit push origin main  # Be careful with the branch name here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37877835_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sql-server", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "sql-server-version", "value": "2019-latest", "CIvars": []}, {"type": "arg", "name": "sa-password", "value": "${{ secrets.SQL_SA_PASSWORD }}", "CIvars": [{"name": "SQL_SA_PASSWORD", "expression": "secrets.SQL_SA_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d master -i ./scripts/setup.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d YourDatabase -i ./scripts/schema_validation.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d YourDatabase -i ./scripts/install_tSQLt.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d YourDatabase -i ./scripts/run_tests.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P ${{ secrets.SQL_SA_PASSWORD }} -d master -Q \"DROP DATABASE YourDatabase;\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37892093_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "redis", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M, memory_limit=512M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -m | grep redis", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37928638_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails test # or 'bundle exec rspec' for RSpec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "nohup bundle exec rails server -b 0.0.0.0 -p 3000 &\nsleep 10 # Give the server time to start\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -f http://localhost:3000/ || echo \"Server is not reachable\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "37958241_0", "jobs": [{"name": "add_comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/{owner}/{repo}/issues/{issue_number}/comments", "CIvars": []}, {"type": "arg", "name": "owner", "value": "${{ github.repository_owner }}", "CIvars": [{"name": "repository_owner", "expression": "github.repository_owner", "type": "context"}]}, {"type": "arg", "name": "repo", "value": "${{ github.event.repository.name }}", "CIvars": [{"name": "event.repository.name", "expression": "github.event.repository.name", "type": "context"}]}, {"type": "arg", "name": "issue_number", "value": 1, "CIvars": []}, {"type": "arg", "name": "body", "value": "A new push has been made to the main branch! Check the latest changes.", "CIvars": []}]}]}]}
{"id": "37959631_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "wp core download --path=wordpress --allow-root\nwp config create --dbname=wordpress --dbuser=wordpress --dbpass=wordpress --path=wordpress --allow-root\nwp core install --url=http://localhost/wordpress --title=\"Test Site\" --admin_user=admin --admin_password=admin_password --admin_email=admin@example.com --path=wordpress --allow-root\nwp plugin install hello --activate --path=wordpress --allow-root\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38013127_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force # Assuming you're using Laravel; adjust if using another framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml # Adjust path if necessary\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "rsync -avz --delete ./ ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}\n\n# (Optional) Run post-deployment commands via SSH\nssh ${DEPLOY_USER}@${DEPLOY_HOST} \"cd ${DEPLOY_PATH} && php artisan migrate --force\" # Example for Laravel\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38018444_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "NVIDIA/setup-gpu", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cuda-version", "value": "11.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y libfftw3-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y cmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\n./your_test_executable  # Replace with your actual test executable name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38056382_0", "jobs": [{"name": "evaluate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r 'echo \"Hello, World!\\n\";' # Replace this line with your PHP code evaluation\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38085429_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38115378_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<your-app-name>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLIC_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLIC_PROFILE", "expression": "secrets.AZURE_PUBLIC_PROFILE", "type": "secret"}]}]}]}, {"name": "tfs-integration", "steps": [{"type": "shell_cmd", "cmd": "curl -u :$TFS_PAT $TFS_URL/_apis/wit/workitems?api-version=7.0\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X PATCH -H \"Content-Type: application/json\" -H \"Authorization: Basic $(echo -n \":$TFS_PAT\" | base64)\" \\\n-d '{\"fields\": {\"System.State\": \"Resolved\"}}' \\\n\"$TFS_URL/_apis/wit/workitems/$PULL_REQUEST_ID?api-version=7.0\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38116530_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -archivePath build/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportOptionsPlist ios/exportOptions.plist -exportPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nfastlane pilot upload YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38268119_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y packer vagrant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "packer validate packer-template.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "packer build packer-template.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant provision", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38269310_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/{owner}/{repo}/dispatches", "CIvars": []}, {"type": "arg", "name": "owner", "value": "<YOUR_ORG_OR_USERNAME>", "CIvars": []}, {"type": "arg", "name": "repo", "value": "<YOUR_MAIN_PROJECT>", "CIvars": []}, {"type": "arg", "name": "event_type", "value": "trigger-build", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{\"Authorization\": \"token ${{ secrets.GITHUB_TOKEN }}\"}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "38283074_0", "jobs": [{"name": "download_artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "request", "value": "{\n  \"owner\": \"OWNER_NAME\",  # Replace with repository owner\n  \"repo\": \"REPO_NAME\",    # Replace with repository name\n  \"per_page\": 1,\n  \"page\": 1\n}\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "latest_release_info=$(echo '${{ steps.latest_release.outputs.data }}' | jq -r '.[0]')\nasset_url=$(echo $latest_release_info | jq -r '.assets[] | select(.name == \"YOUR_ARTIFACT_NAME\") | .url')\necho \"Downloading artifact from: $asset_url\"\n\ncurl -L -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -H \"Accept: application/octet-stream\" -o YOUR_ARTIFACT_NAME $asset_url\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38294555_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "1.8", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r0adkll/upload-google-play", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcp-service-account-json", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_JSON", "expression": "secrets.GCP_SERVICE_ACCOUNT_JSON", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "mkdir -p $HOME/android-sdk\necho \"y\" | sdkmanager --sdk_root=$HOME/android-sdk \"platform-tools\" \"platforms;android-24\" \"build-tools;24.0.3\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"export ANDROID_HOME=$HOME/android-sdk\" >> $GITHUB_ENV\necho \"export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38297207_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extension", "value": "mbstring, xml, curl, gd", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, max_execution_time=300", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml --testdox", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\" # Add your deployment commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38312605_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' -resultBundlePath test-results\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -resultBundlePath test-results -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' -exportResults\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results", "CIvars": []}]}]}]}
{"id": "38337694_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing # Adjust this based on your framework or migration method\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testsuite=Unit # Ensure you are using PHPUnit for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint # Assuming you have a script defined in composer.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3834870_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit --testdox --coverage-html coverage --log-junit junit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "junit.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -X POST JENKINS_URL/job/YOUR_JOB_NAME/build?token=YOUR_TOKEN\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38447584_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/analyze", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "category", "value": "security", "CIvars": []}, {"type": "arg", "name": "languages", "value": "javascript", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git fetch origin master\ngit diff --name-only origin/master...$GITHUB_SHA > changed_files.txt\necho \"Files changed:\"\ncat changed_files.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "changed_files=$(cat changed_files.txt)\necho \"## Code Review Results\\n\\n### Files Changed:\\n$changed_files\" >> review_comment.md\ngh pr comment ${{ github.event.pull_request.number }} -F review_comment.md\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38461314_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run generate-report", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cucumber-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/cucumber/report.html", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Cucumber Report", "CIvars": []}, {"type": "arg", "name": "body", "value": "Please find the attached Cucumber report.", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "attachments", "value": "path/to/your/cucumber/report.html", "CIvars": []}]}]}]}
{"id": "3854847_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name \"PnP.PowerShell\" -Force -AllowClobber\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"\n$wspPath = \"${{ secrets.SOLUTION_PATH }}\"\n\n# Connect to SharePoint\nConnect-PnPOnline -Url $SP_SITE_URL -Credentials (New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $SP_USERNAME,(ConvertTo-SecureString $SP_PASSWORD -AsPlainText -Force))\n\n# Deploy WSP solution\nAdd-PnPSolution -Path $wspPath -Overwrite\nDeploy-PnPSolution -Identity $wspPath -Scope WebApplication -Async\nDisconnect-PnPOnline\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38552628_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme archive -archivePath ./build/YourProject.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ./build/YourProject.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourProject-IOS-Build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build/", "CIvars": []}]}]}]}
{"id": "38559218_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Adjust if you have a specific install command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint # Adjust if you have a specific lint command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "38567118_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace this with your build command, e.g., for Maven or Gradle\nmvn clean install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "redhat-actions/openshift-login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "openshift_url", "value": "${{ secrets.OPENSHIFT_URL }}", "CIvars": [{"name": "OPENSHIFT_URL", "expression": "secrets.OPENSHIFT_URL", "type": "secret"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.OPENSHIFT_TOKEN }}", "CIvars": [{"name": "OPENSHIFT_TOKEN", "expression": "secrets.OPENSHIFT_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "oc project my-project  # Replace with your OpenShift project name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace my-app with your app name and the registry with your OpenShift internal registry\nIMAGE=my-registry/my-project/my-app:latest\noc start-build my-app --from-dir=./target --follow  # Adjust as needed for your build setup\noc image tag my-registry/my-project/my-app:latest ${IMAGE}\noc treat-images-as my-app\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "oc rollout latest my-app  # Adjust according to your deployment strategy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38633008_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\n// Code to insert the array into the database\n\\$dataArray = json_decode(file_get_contents('php://input'), true); // Assuming the array is JSON encoded\n\n// Connect to the database\n\\$servername = getenv('DB_HOST');\n\\$username = getenv('DB_USER');\n\\$password = getenv('DB_PASS');\n\\$dbname = getenv('DB_NAME');\n\\$conn = new mysqli(\\$servername, \\$username, \\$password, \\$dbname);\n\n// Check connection\nif (\\$conn->connect_error) {\n    die('Connection failed: ' . \\$conn->connect_error);\n}\n\n// Insert each item from the array into the database\nforeach (\\$dataArray as \\$item) {\n    \\$sql = \\\"INSERT INTO your_table_name (column1, column2) VALUES ('\\\" . \\$item['key1'] . \\\"', '\\\" . \\$item['key2'] . \\\"')\\\";\n    if (\\$conn->query(\\$sql) !== TRUE) {\n        echo 'Error: ' . \\$sql . '\\\\n' . \\$conn->error;\n    }\n}\n\n\\$conn->close();\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38680366_1", "jobs": [{"name": "add-account", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./add_sql_account.ps1 -SqlServer $SQL_SERVER -SqlUsername $SQL_USERNAME -SqlPassword $SQL_PASSWORD -NewAccountName $NEW_ACCOUNT_NAME\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "3869307_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "tgns-io/test-results-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "test-results", "value": "**/TestResults/*.xml", "CIvars": []}, {"type": "arg", "name": "fail-on-error", "value": false, "CIvars": []}]}]}]}
{"id": "38728171_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y tk-dev   # Install Tk development library\ngem install bundler                # Install bundler if not already included\nbundle install                     # Install the project's dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38753538_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/pipelines", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "project", "value": "YOUR_AZURE_DEVOPS_PROJECT_NAME", "CIvars": []}, {"type": "arg", "name": "definition", "value": "YOUR_PIPELINE_DEFINITION_NAME", "CIvars": []}, {"type": "arg", "name": "sourceBranch", "value": "main", "CIvars": []}, {"type": "arg", "name": "artifact", "value": "path/to/your/artifact", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build failed!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38773233_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build -s . -d docs # Specify source and destination\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "38783657_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CI_ENVIRONMENT=production\" >> .env\necho \"SESSION_DRIVER=database\" >> .env\necho \"SESSION_COOKIE_NAME=ci_session\" >> .env\necho \"SESSION_SAVE_PATH=/path/to/shared/sessions\" >> .env\necho \"COOKIE_DOMAIN=.yourdomain.com\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd application1\n# Assuming you have a deployment script for application 1\n./deploy.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd application2\n# Assuming you have a deployment script for application 2\n./deploy.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'your-web-server' with the appropriate service then restart\nsudo service your-web-server restart\n# Optionally clear cache for both applications\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38797370_0", "jobs": [{"name": "create-review-app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhilmhdh/heroku-cli-action", "version": "v1.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "heroku auth:token < ${{ secrets.HEROKU_API_KEY }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku create $HEROKU_APP_NAME --remote heroku --team $HEROKU_TEAM\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/$HEROKU_APP_NAME.git\ngit push heroku `git rev-parse --verify HEAD`:refs/heads/master --force\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "destroy-review-app", "steps": [{"type": "gh_action", "cmd": "", "name": "akhilmhdh/heroku-cli-action", "version": "v1.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "heroku auth:token < ${{ secrets.HEROKU_API_KEY }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku apps:destroy --app $HEROKU_APP_NAME --confirm $HEROKU_APP_NAME\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38798121_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "chrislacy/setup-winrm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "winrm_host", "value": "${{ secrets.WINRM_HOST }}", "CIvars": [{"name": "WINRM_HOST", "expression": "secrets.WINRM_HOST", "type": "secret"}]}, {"type": "arg", "name": "winrm_user", "value": "${{ secrets.WINRM_USER }}", "CIvars": [{"name": "WINRM_USER", "expression": "secrets.WINRM_USER", "type": "secret"}]}, {"type": "arg", "name": "winrm_password", "value": "${{ secrets.WINRM_PASSWORD }}", "CIvars": [{"name": "WINRM_PASSWORD", "expression": "secrets.WINRM_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Copying files to the remote server...\"\nwinrm exec -host ${{ secrets.WINRM_HOST }} -u ${{ secrets.WINRM_USER }} -p ${{ secrets.WINRM_PASSWORD }} \"powershell -Command \\\"Copy-Item -Path '${{ github.workspace }}/${{ secrets.SOURCE_PATH }}/*' -Destination '${{ secrets.APPLICATION_PATH }}' -Recurse -Force\\\"\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Configuring IIS...\"\nwinrm exec -host ${{ secrets.WINRM_HOST }} -u ${{ secrets.WINRM_USER }} -p ${{ secrets.WINRM_PASSWORD }} \"powershell -Command \\\"Import-Module WebAdministration; Start-WebAppPool -Name 'YourAppPoolName';\\\"\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Restarting IIS...\"\nwinrm exec -host ${{ secrets.WINRM_HOST }} -u ${{ secrets.WINRM_USER }} -p ${{ secrets.WINRM_PASSWORD }} \"powershell -Command \\\"Restart-WebAppPool -Name 'YourAppPoolName';\\\"\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38848295_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install necessary dependencies, e.g., Maven, if using\n# If FitNesse is not in the repository, download and install FitNesse here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start FitNesse server and execute tests\n# The commands depend on your test setup and how you are running FitNesse\n./fitnesse-standalone.jar -r -p 8080 &  # Start backend\nsleep 10  # Wait for the server to start\ncurl \"http://localhost:8080?test&format=xml\" > results.xml  # Example to get results, adjust as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Parse results.xml to create a summary\nif grep -q '<failure>' results.xml; then\n  echo \"Tests failed\"\n  echo \"status=fail\" >> $GITHUB_ENV\nelse\n  echo \"Tests passed\"\n  echo \"status=success\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "FitNesse Slim Test Report: ${{ env.status }}", "CIvars": [{"name": "status", "expression": "env.status", "type": "env"}]}, {"type": "arg", "name": "body", "value": "The FitNesse Slim tests have completed with status: ${{ env.status }}.\nPlease check the results for more details.\nFind the results here: ${{ github.workspace }}/results.xml\n", "CIvars": [{"name": "status", "expression": "env.status", "type": "env"}, {"name": "workspace", "expression": "github.workspace", "type": "context"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "fitnesse-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "results.xml", "CIvars": []}]}]}]}
{"id": "38854335_0", "jobs": [{"name": "trigger-gocd", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Changed files:\"\ngit diff --name-only HEAD^ HEAD > changes.txt\ncat changes.txt\necho \"::set-output name=changes::$(cat changes.txt | tr '\\n' ',')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Changes: ${{ steps.get_changes.outputs.changes }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-script", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const { exec } = require('child_process');\nconst changes = '${{ steps.get_changes.outputs.changes }}';\nconst gocdUrl = 'https://your-gocd-server/go/api/pipelines/YOUR_PIPELINE_NAME/schedule'; // Update with your GoCD server and pipeline name\n\n// Make sure you have an API key or other auth method for GoCD if needed\nconst options = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/vnd.go.cd.v1+json',\n    'Authorization': 'Bearer YOUR_API_KEY', // Replace with your API Key or auth token\n  },\n  body: JSON.stringify({\n    materials: {\n      changes: changes // Pass changes to GoCD as needed\n    }\n  })\n};\n\nfetch(gocdUrl, options).then(response => {\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n}).then(data => {\n  console.log(data);\n}).catch(error => {\n  console.error('Error:', error);\n});\n", "CIvars": [{"name": "get_changes.outputs.changes", "expression": "steps.get_changes.outputs.changes", "type": "steps"}]}]}]}]}
{"id": "38873252_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --filter 'MyTestName' tests/MyTest.php", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "38965600_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "39033889_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PR_TITLE=\"${{ github.event.pull_request.title }}\"\nPR_NUMBER=\"${{ github.event.pull_request.number }}\"\nPR_URL=\"${{ github.event.pull_request.html_url }}\"\nISSUE_TITLE=\"Related Issue for PR #${PR_NUMBER}: ${PR_TITLE}\"\nISSUE_BODY=\"This issue is automatically created to track discussions or tasks related to the pull request.\\n\\n* Pull Request: [${PR_TITLE}](${PR_URL})\\n* Created at: $(date)\\n\\nPlease provide your comments or feedback.\"\n\ngh issue create --title \"$ISSUE_TITLE\" --body \"$ISSUE_BODY\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39039136_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "salesforcecli/setup", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Authenticate to Salesforce\"\nsfdx force:auth:jwt:grant --clientid ${{ secrets.SF_CLIENT_ID }} --jwtkeyfile ${{ secrets.SF_JWT_KEY }} --username ${{ secrets.SF_USERNAME }} --setdefaultdevhubusername\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Apex tests\"\nsfdx force:apex:test:run --resultformat human --codecoverage --testlevel RunLocalTests --wait 10\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "payload='{\"text\":\"Salesforce deployment completed successfully and tests passed!\"}'\ncurl -X POST -H 'Content-type: application/json' --data \"$payload\" $SLACK_WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Sending email notification\"\necho -e \"Subject: $EMAIL_SUBJECT\\n\\n$EMAIL_BODY\" | sendmail -t $EMAIL_TO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39065342_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "The-Compiler/qt-actions", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "5.15", "CIvars": []}, {"type": "arg", "name": "tag", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "components", "value": "core\ngui\nwidgets\nnetwork\n# Add any other components your project might need\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential\nsudo apt-get install -y qt5-default # installs Qt dev packages if needed\n# List any other dependencies your project might require\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "qmake\nmake -j$(nproc)  # Use all the available CPU cores for faster build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your tests are configured as Qt Tests\nmake test  # Adjust as necessary based on your test setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "qt-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/built/artifacts", "CIvars": []}]}]}]}
{"id": "39128998_0", "jobs": [{"name": "phpspec", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M, memory_limit=512M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpspec run", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39150240_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Compress-Archive -Path ./output/* -DestinationPath ./output/myapp-release.zip\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ github.event.release.upload_url }}", "CIvars": [{"name": "event.release.upload_url", "expression": "github.event.release.upload_url", "type": "context"}]}, {"type": "arg", "name": "asset-path", "value": "./output/myapp-release.zip", "CIvars": []}, {"type": "arg", "name": "asset-name", "value": "myapp-release.zip", "CIvars": []}, {"type": "arg", "name": "asset-content-type", "value": "application/zip", "CIvars": []}]}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "This is an automated release of version ${{ github.ref }}.\n", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset-path", "value": "./output/myapp-release.zip", "CIvars": []}, {"type": "arg", "name": "asset-name", "value": "myapp-release.zip", "CIvars": []}, {"type": "arg", "name": "asset-content-type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "39152724_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run package", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y curl\ncurl -sSL https://aka.ms/InstallAzureCLIDeb | sudo bash # Install Azure CLI\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-version", "value": "2.0.81", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Logging in to SharePoint\"\nsudo npm install -g gulp-cli # Install Gulp CLI if you need it\nnpm install -g gulp # Install Gulp globally\n# Log in using the SharePoint Online login credentials\n# Adjust the command as per your app's authentication method\ngulp login --username $SP_USER --password $SP_PASSWORD\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to SharePoint\"\ngulp deploy --site-url $SP_SITE_URL # Adjust the command according to your deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39229797_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "node_modules", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-node-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mathieudutour/github-tag-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "release_br", "value": "main", "CIvars": []}, {"type": "arg", "name": "tag_prefix", "value": "", "CIvars": []}]}]}, {"name": "notifications", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action ", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "Build failed! Check your logs.", "CIvars": []}]}]}]}
{"id": "39346102_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "39390674_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "17", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn package", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "plugin-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/*.jar", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peterjgrainger/action-status", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "message", "value": "Build and Tests Passed", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peterjgrainger/action-status", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "failure", "CIvars": []}, {"type": "arg", "name": "message", "value": "Build or Tests Failed", "CIvars": []}]}]}]}
{"id": "39434048_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "mohitk05/send-email", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "recipient", "value": "recipient1@example.com, recipient2@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "New Commit on Main Branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new commit has been pushed to the main branch of the repository. Check it out!", "CIvars": []}, {"type": "arg", "name": "smtp_server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}]}]}]}
{"id": "39442012_0", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config user.name \"github-actions[bot]\"\ngit config user.email \"github-actions[bot]@users.noreply.github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up unnecessary files...\"\n# Example cleanup commands: \n# Remove all .log files\nfind . -name \"*.log\" -type f -delete\n\n# Remove all temporary files\nfind . -name \"*~\" -type f -delete\n\n# Remove build artifacts from the 'build/' directory\nrm -rf build/*\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/", "CIvars": []}, {"type": "arg", "name": "upload", "value": false, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git add .\ngit commit -m \"Cleanup: remove unnecessary files and artifacts\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39482964_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll doctor\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll serve --host 0.0.0.0 --port 4000 &\nsleep 5\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39491626_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying Application to Server\"\n# Add your deployment script or command here, e.g., rsync or using a deploy tool.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39505124_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"typo3_active_framework_extensions=your_value_here\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment script/command here\n# Example for SCP to a remote server\n# scp -r ./path/to/your/files user@yourserver:/path/to/deploy\necho \"Deploying TYPO3 application...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleanup actions after deployment can be added here.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "3958892_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/installer", "version": "v0.2.0", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Install-Package -Name YourPackage -Source YourSource -Force\n", "name": "", "version": "", "shell": "pwsh"}, {"type": "shell_cmd", "cmd": "# Assume you have a build script (like build.ps1)\n.\\build.ps1\n", "name": "", "version": "", "shell": "pwsh"}, {"type": "shell_cmd", "cmd": "# Run tests if necessary\n.\\tests.ps1\n", "name": "", "version": "", "shell": "pwsh"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$hudsonUrl = 'http://your-hudson-server:8080/job/YOUR_JOB_NAME/build?token=YOUR_TOKEN_NAME'\nInvoke-WebRequest -Uri $hudsonUrl -Method POST\n", "name": "", "version": "", "shell": "pwsh"}, {"type": "shell_cmd", "cmd": "echo \"Deployment Successful!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39594781_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Custom Notification: New Push to Main", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nA new push has been made to the main branch.\n\nCommit details:\n- Commit message: ${{ github.event.head_commit.message }}\n- Pushed by: ${{ github.event.pusher.name }}\n\nBest regards,\nYour GitHub Actions Bot\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.pusher.name", "expression": "github.event.pusher.name", "type": "context"}]}]}]}]}
{"id": "39606292_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"VERSION=$(echo $GITHUB_REF | sed 's/refs\\/tags\\///')\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Building version: $VERSION\"\nsed -i \"s/<version-placeholder>/$VERSION/\" path/to/your/index.html  # Replace \u2018version-placeholder\u2019 in your HTML file\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./path/to/your/build/output", "CIvars": []}]}]}]}
{"id": "39636277_0", "jobs": [{"name": "setup-cloud-shell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud beta cloud-shell ssh \\\n--project=${{ secrets.GCP_PROJECT_ID }} \\\n--zone=${{ secrets.GCP_ZONE }} \\\n--command=\"echo 'Cloud Shell environment is ready!'\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources if necessary.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39636617_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"##vso[task.setvariable variable=SONAR_TOKEN;]${{ secrets.SONAR_TOKEN }}\"\necho \"Running TFS Build\"\n\n# Install Azure DevOps CLI if you need it\n# curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n# az extension add --name azure-devops\n\n# Example TFS build command\n# az pipelines run --name <pipeline-name> --project <project-name> --organization <organization-url>\n# Add your commands to trigger a TFS build here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-project-key", "value": "${{ secrets.SONAR_PROJECT_KEY }}", "CIvars": [{"name": "SONAR_PROJECT_KEY", "expression": "secrets.SONAR_PROJECT_KEY", "type": "secret"}]}, {"type": "arg", "name": "sonar-project-name", "value": "Your Project Name", "CIvars": []}, {"type": "arg", "name": "sonar-project-version", "value": "${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "sonar-scanner-options", "value": "-Dsonar.sources=. -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}", "CIvars": [{"name": "SONAR_HOST_URL", "expression": "secrets.SONAR_HOST_URL", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Build and analysis complete!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39714753_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "reactions/setup-android-sdk", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": 29, "CIvars": []}, {"type": "arg", "name": "target", "value": "android-29", "CIvars": []}, {"type": "arg", "name": "enable-android", "value": true, "CIvars": []}, {"type": "arg", "name": "emulator-options", "value": "-no-accel", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Creating multiple emulators\"\nsdkmanager \"system-images;android-29;default;x86_64\"\nemulator -avd test emu1 -no-audio -no-window -runnable\nemulator -avd test emu2 -no-audio -no-window -runnable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "emulator -avd emu1 -no-window -no-audio &\nemulator -avd emu2 -no-window -no-audio &\nadb wait-for-device\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.wipe=true\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "adb emu kill\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39717998_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite UnitTests", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "ssh user@your-server.com \"cd /path/to/your/codeigniter && git pull origin main && composer install\"\n# You can replace the above command with your deployment script if you have one\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to production was successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39741782_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39752360_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendgrid", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "example@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "This is a test email from GitHub Actions!", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello! This is a test email sent from GitHub Actions.", "CIvars": []}]}]}]}
{"id": "39752360_1", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendmail", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.gmail.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "example@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@gmail.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "This is a test email from GitHub Actions!", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello! This is a test email sent from GitHub Actions.", "CIvars": []}, {"type": "arg", "name": "secure", "value": true, "CIvars": []}]}]}]}
{"id": "39770603_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "39786492_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.sendgrid.net", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 465, "CIvars": []}, {"type": "arg", "name": "username", "value": "apikey", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "GitHub Action Failed: ${{ github.event.workflow_run.name }}", "CIvars": [{"name": "event.workflow_run.name", "expression": "github.event.workflow_run.name", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Workflow **${{ github.event.workflow_run.name }}** has failed.\nYou can check the details at: ${{ github.event.workflow_run.html_url }}.\n", "CIvars": [{"name": "event.workflow_run.name", "expression": "github.event.workflow_run.name", "type": "context"}, {"name": "event.workflow_run.html_url", "expression": "github.event.workflow_run.html_url", "type": "context"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SENDGRID_SENDER_EMAIL }}", "CIvars": [{"name": "SENDGRID_SENDER_EMAIL", "expression": "secrets.SENDGRID_SENDER_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ secrets.RECIPIENT_EMAIL }}", "CIvars": [{"name": "RECIPIENT_EMAIL", "expression": "secrets.RECIPIENT_EMAIL", "type": "secret"}]}]}]}]}
{"id": "39972105_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up existing simulators...\"\nxcrun simctl shutdown all\nxcrun simctl erase all\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGN_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGN_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphoneos -archivePath output/YourApp.xcarchive archive CODE_SIGN_IDENTITY=\"\" CODE_SIGN_REQUIRED=NO", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath output/YourApp.xcarchive -exportPath output -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4000005_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "haskell/actions/setup-ghc", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ghc-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "cabal-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y darcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal update && cabal install --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40042811_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd services/my-microservice  # Change to your microservice directory\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd services/my-microservice\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd services/my-microservice\ndocker build -t my-microservice:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker tag my-microservice:latest myacr.azurecr.io/my-microservice:latest\ndocker push myacr.azurecr.io/my-microservice:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "my-microservice-app", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to Azure completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40117538_0", "jobs": [{"name": "redeploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "harmon758/postgres-action", "version": "v2.1.0", "shell": "bash", "with": [{"type": "arg", "name": "postgresql version", "value": "13", "CIvars": []}, {"type": "arg", "name": "postgres db", "value": "mydatabase", "CIvars": []}, {"type": "arg", "name": "postgres user", "value": "myuser", "CIvars": []}, {"type": "arg", "name": "postgres password", "value": "mypassword", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Creating a backup of the current database...\"\nPGPASSWORD=${{ secrets.DB_PASSWORD }} pg_dump -U ${{ secrets.DB_USER }} -h ${{ secrets.DB_HOST }} -F c -b -v -f \"./backup/backup_$(date +%Y%m%d_%H%M%S).dump\" mydatabase\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Restoring the database to version ${{ github.event.inputs.version }}...\"\nPGPASSWORD=${{ secrets.DB_PASSWORD }} pg_restore -U ${{ secrets.DB_USER }} -h ${{ secrets.DB_HOST }} -d mydatabase --if-exists \"./versions/${{ github.event.inputs.version }}/database_dump.dump\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up old backups and temporary files...\"\nrm -rf ./backup/*\nrm -rf ./versions/*\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40122790_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-reports", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "marocchino/sticky-pull-request-comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "## Test Results\nThe build has completed. Here are the test results:\n```\n${{ steps.upload-artifact.outputs.files }}\n```\nFor detailed reports, check [JUnit Reports](http://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).\n", "CIvars": [{"name": "upload-artifact.outputs.files", "expression": "steps.upload-artifact.outputs.files", "type": "steps"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "40137384_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [ -file 'DESCRIPTION' ]; then\n  Rscript -e 'install.packages(\"remotes\")'\n  Rscript -e 'remotes::install_deps(dependencies=TRUE)'\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'library(devtools)'\nRscript -e 'devtools::test()'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40212598_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "xcpretty/xcpretty-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' CODE_COVERAGE_FOLDER=coverage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you are using slather or another tool to generate reports\nslather coverage --scheme YourScheme --output-directory coverage/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming Slather outputs a coverage file in lcov format\necho \"coverage=$(cat coverage/lcov.info | grep -e 'FNF:' | cut -d':' -f2)\" >> $GITHUB_ENV\necho \"coverage_percentage=$(cat coverage/lcov.info | grep -e 'LF:' | cut -d':' -f2)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace YOUR_URL with the endpoint you're sending the data to\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"coverage\": \"${{ env.coverage }}\", \"coverage_percentage\": \"${{ env.coverage_percentage }}\"}' YOUR_URL\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40231075_1", "jobs": [{"name": "calculate_ci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages(c(\"stats\"))\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript calculate_profile_likelihood.R\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40232787_0", "jobs": [{"name": "php-cs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$HOME/.composer/vendor/bin/phpcs --standard=PSR12 --extensions=php src/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"PHP CodeSniffer detected coding standard issues.\";\n  exit 1;\nelse\n  echo \"No coding standard issues detected.\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40237720_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh-with-scripts", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "# Optional: Install additional modules if necessary\n# Install-Module -Name <ModuleName> -Force -Scope CurrentUser\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pwsh -File ./path/to/your_script.ps1  # Replace with your script's path\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pwsh -Command \"Invoke-Pester -Path ./tests\"  # Adjust path if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./results/test-results.xml", "CIvars": []}]}]}]}
{"id": "40265786_0", "jobs": [{"name": "count-loc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cloc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cloc /path/to/your/project --by-file --json --out=loc.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Lines of code in the project:\"\ncat loc.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40272770_0", "jobs": [{"name": "build-node", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-python", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python -m unittest discover", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40294314_0", "jobs": [{"name": "versioning", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Get the tag version e.g., v1.0.0\nTAG=${GITHUB_REF#refs/tags/}\n\n# Parse the version number\nNEW_VERSION=$(echo \"$TAG\" | awk -F. -v OFS=. '{$NF++; print}')\n\n# Update Info.plist for the new version\n/usr/libexec/xcrun plutil -replace CFBundleShortVersionString -string \"$NEW_VERSION\" \"${{ github.workspace }}/YourProject/Info.plist\"\n/usr/libexec/xcrun plutil -replace CFBundleVersion -string \"$NEW_VERSION\" \"${{ github.workspace }}/YourProject/Info.plist\"\n\n# Output the new version\necho \"New version is $NEW_VERSION\"\necho \"::set-output name=new_version::$NEW_VERSION\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"Version Increment Bot\"\ngit commit -am \"Increment version to ${{ steps.increment_version.outputs.new_version }}\"\ngit tag \"v${{ steps.increment_version.outputs.new_version }}\"\ngit push origin HEAD --tags\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=15.5' test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v${{ steps.increment_version.outputs.new_version }}", "CIvars": [{"name": "increment_version.outputs.new_version", "expression": "steps.increment_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ steps.increment_version.outputs.new_version }}", "CIvars": [{"name": "increment_version.outputs.new_version", "expression": "steps.increment_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "body", "value": "Automatically generated release for version ${{ steps.increment_version.outputs.new_version }}", "CIvars": [{"name": "increment_version.outputs.new_version", "expression": "steps.increment_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}]}]}
{"id": "4031679_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:database:create --if-not-exists\nphp bin/console doctrine:schema:update --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console server:run &", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40377007_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mono/mono-build", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "mono-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y libgtk2.0-dev libgtk-3-dev  # or any additional dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xbuild /p:Configuration=Release /p:Platform=\"Any CPU\" MySolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xbuild /p:Configuration=Debug /p:Platform=\"Any CPU\" MySolution.Tests/MySolution.Tests.csproj", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40529895_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "ant build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build failed. Deleting the critical file...\"\nrm -f path/to/your/critical_file.txt # Specify the path you want to delete\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ ${{ steps.build.outcome }} == 'failure' ]]; then\n  echo \"Build failed. Please check the logs.\"\nelse\n  echo \"Build succeeded.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40581714_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://install.meteor.com/ | sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mongo/setup", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "mongo-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your-meteor-app # Navigate to your Meteor app's directory\nmeteor npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-meteor-app # Navigate to your Meteor app's directory\nmeteor test --driver-package meteortesting:mocha\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40586874_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "IMAGE_REPO_NAME=my-ecr-repo  # Change to your ECR repository name\nIMAGE_TAG=${{ github.sha }}\n\n# Build and push image\ndocker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\ndocker tag $IMAGE_REPO_NAME:$IMAGE_TAG ${{ steps.ecr-login.outputs.registry }}@$IMAGE_REPO_NAME:$IMAGE_TAG\ndocker push ${{ steps.ecr-login.outputs.registry }}@$IMAGE_REPO_NAME:$IMAGE_TAG\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/ecs-update-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "my-cluster", "CIvars": []}, {"type": "arg", "name": "service", "value": "my-service", "CIvars": []}, {"type": "arg", "name": "task-definition", "value": "my-task", "CIvars": []}, {"type": "arg", "name": "container-name", "value": "my-container", "CIvars": []}, {"type": "arg", "name": "image", "value": "${{ steps.ecr-login.outputs.registry }}@$IMAGE_REPO_NAME:$IMAGE_TAG", "CIvars": [{"name": "ecr-login.outputs.registry", "expression": "steps.ecr-login.outputs.registry", "type": "steps"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to ECS completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40631696_0", "jobs": [{"name": "commit_previous", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Get the last two commits hashes, assuming there are at least 2 commits\nprevious_commit=$(git rev-parse HEAD~1)\nlatest_commit=$(git rev-parse HEAD)\necho \"Previous commit: $previous_commit\"\necho \"Latest commit: $latest_commit\"\necho \"previous_commit=$previous_commit\" >> $GITHUB_ENV\necho \"latest_commit=$latest_commit\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git cherry-pick ${{ env.previous_commit }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\ngit commit -m \"Reapply previous commit before latest revisions\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main  # Ensure you're pushing to the correct branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40640795_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here, e.g. PHPUnit\nvendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$PRIVATE_KEY\" > private_key\nchmod 600 private_key\nscp -o StrictHostKeyChecking=no -i private_key -P $PORT -r ./* $USERNAME@$HOST:/path/to/deploy\nssh -o StrictHostKeyChecking=no -i private_key -p $PORT $USERNAME@$HOST 'cd /path/to/deploy && composer install --no-dev && php artisan migrate --force'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clear cache on the server after deployment\nssh -o StrictHostKeyChecking=no -i private_key -p $PORT $USERNAME@$HOST 'php artisan cache:clear'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40669149_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then \n  pod install \nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ~/Library/MobileDevice/Provisioning Profiles/my_provisioning_profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CERTIFICATE }}\" | base64 --decode > cert.p12\nsecurity create-keychain -p \"\" my_keychain\nsecurity import cert.p12 -k ~/Library/Keychains/my_keychain -P \"${{ secrets.CERTIFICATE_PASSWORD }}\" -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/my_keychain\nsecurity set-keychain-settings -t 3600 -l ~/Library/Keychains/my_keychain\nsecurity unlock-keychain -p \"\" ~/Library/Keychains/my_keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -configuration Release \\\n           -sdk iphoneos \\\n           CODE_SIGN_IDENTITY=\"iPhone Distribution\" \\\n           CODE_SIGN_PROVISIONING_PROFILE_SPECIFIER=\"my_provisioning_profile\" \\\n           CODE_SIGN_TEAM=\"${{ secrets.DEVELOPMENT_TEAM }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40710223_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40716124_0", "jobs": [{"name": "user1-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "user2-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r user2/requirements.txt", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest", "name": "", "version": "", "shell": "bash"}]}, {"name": "user3-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40773755_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install  # If using Bundler\n# Or install pods if necessary\ncd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane gym", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane scan", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "ios/build", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Something went wrong!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40794023_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to server...\"\n# Add your deploy script/commands here, such as rsync, scp, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40804183_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"VERSION=$(date +'%Y%m%d%H%M%S')\" >> $GITHUB_ENV\necho \"Creating release version $VERSION\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "assets/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v${{ env.VERSION }}", "CIvars": [{"name": "VERSION", "expression": "env.VERSION", "type": "env"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ env.VERSION }}", "CIvars": [{"name": "VERSION", "expression": "env.VERSION", "type": "env"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./dist/my-package.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "my-package-${{ env.VERSION }}.zip", "CIvars": [{"name": "VERSION", "expression": "env.VERSION", "type": "env"}]}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "40805429_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ./path/to/your/profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity set-keychain-settings -t 3600 -l build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.APP_STORE_CONNECT_API_KEY }}\" > ./path/to/your/fastlane_key.json\n# Similarly load certificates if needed, assuming they've been uploaded as secrets\n# and need to be decoded here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Change to your iOS project directory\nfastlane your_lane_name  # Specify the lane you want to run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40873282_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40930875_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SERVER_IP }}", "CIvars": [{"name": "SERVER_IP", "expression": "secrets.SERVER_IP", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SERVER_USER }}", "CIvars": [{"name": "SERVER_USER", "expression": "secrets.SERVER_USER", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SERVER_PASSWORD }}", "CIvars": [{"name": "SERVER_PASSWORD", "expression": "secrets.SERVER_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": 22, "CIvars": []}, {"type": "arg", "name": "source", "value": "./publish/*", "CIvars": []}, {"type": "arg", "name": "target", "value": "${{ secrets.DEPLOY_PATH }}", "CIvars": [{"name": "DEPLOY_PATH", "expression": "secrets.DEPLOY_PATH", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "pnp/pnp-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "Import-Module WebAdministration\nRestart-WebAppPool -Name \"${{ secrets.WEBAPP_NAME }}\"\n", "CIvars": [{"name": "WEBAPP_NAME", "expression": "secrets.WEBAPP_NAME", "type": "secret"}]}]}]}]}
{"id": "40952029_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('remotes')\nremotes::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'devtools::check()'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'devtools::test()'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "40965136_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, intl, curl, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/YOUR_HEROKU_APP_NAME.git  # Replace with your Heroku app name\ngit push heroku main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41087206_0", "jobs": [{"name": "assign_reviewers", "steps": [{"type": "gh_action", "cmd": "", "name": "tirozzi/assign-reviewers-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "user1,user2", "CIvars": []}, {"type": "arg", "name": "assignees", "value": "user3", "CIvars": []}]}]}, {"name": "add_labels", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const context = github.context;\nconst prNumber = context.payload.pull_request.number;\nconst octokit = github.getOctokit(process.env.GITHUB_TOKEN);\n\nawait octokit.issues.addLabels({\n  ...context.repo,\n  issue_number: prNumber,\n  labels: ['needs review']\n});\n", "CIvars": []}]}]}, {"name": "notify_team", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const context = github.context;\nconst prUrl = context.payload.pull_request.html_url;\nconst message = `A new pull request has been created: ${prUrl}. Please review.`;\nconst team = 'your-team-slug'; // Replace with actual team slug\n\nawait github.teams.createDiscussion({\n  team_slug: team,\n  title: 'New PR for Review',\n  body: message\n});\n", "CIvars": []}]}]}]}
{"id": "41100396_0", "jobs": [{"name": "generate-javadoc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install javadoc:javadoc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "target/site/apidocs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "41100396_1", "jobs": [{"name": "generate-javadoc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew clean build javadoc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "build/docs/javadoc", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "41176227_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ matrix.db }}\" == \"postgresql\" ]; then\n  echo \"Creating database for PostgreSQL...\"\n  cp config/database.yml.postgresql config/database.yml\nelse\n  echo \"Creating database for SQLite...\"\n  cp config/database.yml.sqlite3 config/database.yml\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or your test framework of choice, e.g., rails test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4125934_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/path/to/your/remote/directory", "CIvars": []}, {"type": "arg", "name": "git-ftp-args", "value": "--insecure", "CIvars": []}]}]}]}
{"id": "41301245_0", "jobs": [{"name": "phpci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, curl, bcmath, soap", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"PHP CI passed!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"PHP CI failed!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41405036_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build  # Adjust based on your project setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish ./YourWebJobProject.csproj -c Release -o ./publish  # Adjust for your web job project\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourWebAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "41408741_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-subscription", "value": "${{ secrets.AZURE_SUBSCRIPTION }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION", "expression": "secrets.AZURE_SUBSCRIPTION", "type": "secret"}]}, {"type": "arg", "name": "azure-tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az storage account check-name --name ${{ secrets.STORAGE_ACCOUNT_NAME }} --query 'nameAvailable' -o tsv > exists.txt\nif [ \"$(cat exists.txt)\" = \"true\" ]; then\n  echo \"Storage account does not exist.\"\n  echo \"storageAccountExists=false\" >> $GITHUB_ENV\nelse\n  echo \"Storage account already exists.\"\n  echo \"storageAccountExists=true\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az storage account create \\\n  --name ${{ secrets.STORAGE_ACCOUNT_NAME }} \\\n  --resource-group ${{ secrets.RESOURCE_GROUP }} \\\n  --location ${{ secrets.AZURE_LOCATION }} \\\n  --sku Standard_LRS\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az deployment group create \\\n  --resource-group ${{ secrets.RESOURCE_GROUP }} \\\n  --template-file path/to/your/template.json \\\n  --parameters path/to/your/parameters.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41423745_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore ./YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./YourSolution.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./YourSolution.sln --configuration Release --no-build --collect:\"XPlat Code Coverage\" --logger:xunit --results-directory ./TestResults", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./TestResults/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dorny/test-reporter", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xUnit", "CIvars": []}, {"type": "arg", "name": "path", "value": "./TestResults/*.xml", "CIvars": []}, {"type": "arg", "name": "reporter", "value": "xunit", "CIvars": []}]}]}]}
{"id": "41436189_0", "jobs": [{"name": "check-secrets", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "GitHubSuperFund/secret-check", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "files", "value": ".env\n.env.production\nconfig/*.json\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Secrets found in the codebase!\"\nexit 1\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "require-approval", "steps": [{"type": "shell_cmd", "cmd": "if [ \"${{ github.event.pull_request.review_comments }}\" -eq 0 ]; then\n  echo \"Pull request requires approval from at least one reviewer.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify-on-failure", "steps": [{"type": "shell_cmd", "cmd": "echo \"Sending notification to team regarding failure during security checks!\"\n# You could integrate a notification service here (like Slack, Discord, Email, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41447343_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ./ios/exportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "41564942_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "matlab-actions/setup-matlab", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "matlab-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "matlab -batch \"run('path/to/your_script.m')\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41568730_0", "jobs": [{"name": "sonarqube", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-project-key", "value": "YOUR_PROJECT_KEY", "CIvars": []}, {"type": "arg", "name": "sonar-project-name", "value": "YOUR_PROJECT_NAME", "CIvars": []}, {"type": "arg", "name": "sonar-host-url", "value": "https://sonarcloud.io", "CIvars": []}, {"type": "arg", "name": "sonar-login", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "COVERAGE=$(grep -oP '\\d+\\.\\d+(?=%)' coverage/lcov.info | awk '{sum += $1} END {print sum / NR}')\necho \"Coverage Percentage: $COVERAGE\"\n\nBASELINE_COVERAGE=80.0 # Set your baseline coverage percentage here\nif (( $(echo \"$COVERAGE < $BASELINE_COVERAGE\" | bc -l) )); then\n  echo \"Code coverage dropped below baseline of $BASELINE_COVERAGE%\"\n  exit 1\nelse\n  echo \"Code coverage is above baseline.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41721311_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sql-server", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sql-server-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "sa-password", "value": "${{ secrets.SA_PASSWORD }}", "CIvars": [{"name": "SA_PASSWORD", "expression": "secrets.SA_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "accept-terms", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Download SQL Source Control installer\nInstall-Package -Name \"SQL Source Control\" -Source \"Redgate\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a script that automates the source control process\n& \"C:\\Program Files\\RedGate\\SQL Source Control\\SQL Source Control.exe\" -project \"C:\\path\\to\\your\\project\" -server \"<your_sql_server>\" -database \"<your_database>\" -username \"<your_username>\" -password \"<your_password>\" -action \"commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name 'GitHub Action'\ngit config --global user.email 'action@github.com'\ngit add .\ngit commit -m \"Automated SQL Source Control commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41787320_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Azure DevOps...\"\n# Replace this with your deployment commands, for example with REST API or Azure CLI\naz devops login --organization https://dev.azure.com/YOUR_ORG --personal-access-token ${{ secrets.AZURE_PAT }}\naz pipelines run --name YOUR_PIPELINE_NAME --branch main\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41872386_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t my-app:${{ github.sha }} .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push my-app:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > k8s_config\nexport KUBECONFIG=k8s_config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/my-deployment my-app=my-app:${{ github.sha }} --record\nkubectl rollout status deployment/my-deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41889216_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2021.3.14f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "standalone-linux", "CIvars": []}, {"type": "arg", "name": "buildName", "value": "MyBuildName", "CIvars": []}, {"type": "arg", "name": "buildPath", "value": "build/", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": "./", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "unity-editor -batchmode -quit -projectPath $GITHUB_WORKSPACE -logFile -executeMethod BuildScript.PerformBuild\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "41916862_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install  # Assuming you have a Gemfile with necessary gems\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby sort_yaml.rb path/to/input.yaml path/to/output.yaml  # Update the paths as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build  # Builds your Jekyll site\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying site...\"\n# Add your deployment steps here.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42029224_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r0mmel/actions-android-sdk", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": "30", "CIvars": []}, {"type": "arg", "name": "sync", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew assembleFreeDebug testFreeDebugUnitTest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleFreeRelease testFreeReleaseUnitTest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assemblePaidDebug testPaidDebugUnitTest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assemblePaidRelease testPaidReleaseUnitTest", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42077887_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\ncp config/database.yml.github-actions config/database.yml # Adjust accordingly\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42122271_2", "jobs": [{"name": "update-description", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane -NV\nbundle install # If you are using bundler\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GOOGLE_PLAY_JSON }}\" > google_play.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane update_version_description\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42146401_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Change this command to fit your project's build system\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test # Change this command to fit your project's testing setup\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "merge", "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "42162763_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore MyWpfApp/MyWpfApp.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build MyWpfApp/MyWpfApp.csproj --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish MyWpfApp/MyWpfApp.csproj --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up temporary files...\"\n# Add any clean-up commands if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42335256_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "42407633_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --collect:\"XPlat Code Coverage\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_WEB_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "42462264_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhilmhdh/heroku-deploy", "version": "v2.1.1", "shell": "bash", "with": [{"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "42555005_0", "jobs": [{"name": "update-tfs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Call the PowerShell script to update TFS settings.\n# This script should handle TFS API calls to set the max concurrent builds.\n.\\scripts\\Update-TFSConcurrentBuilds.ps1 -MaxConcurrentBuilds 10\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Max concurrent builds updated successfully.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42562070_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42625727_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish --no-build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/publish-module", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_devops_token", "value": "${{ secrets.AZURE_DEVOPS_TOKEN }}", "CIvars": [{"name": "AZURE_DEVOPS_TOKEN", "expression": "secrets.AZURE_DEVOPS_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "service_connection", "value": "your-service-connection-name", "CIvars": []}, {"type": "arg", "name": "project", "value": "your-project-name", "CIvars": []}, {"type": "arg", "name": "definition", "value": "your-pipeline-definition-name", "CIvars": []}, {"type": "arg", "name": "artifact", "value": "./publish", "CIvars": []}]}]}]}
{"id": "42664863_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull_request_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "42691456_0", "jobs": [{"name": "setup-rstudio", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if ! git --version; then\n  echo \"Installing Git...\"\n  brew install git\nelse\n  echo \"Git is already installed\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'install.packages(c(\"ggplot2\", \"dplyr\"), repos=\"http://cran.rstudio.com\")'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R  # replace with your actual R script name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42738883_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --watchAll=false", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}, {"type": "arg", "name": "working-directory", "value": "./", "CIvars": []}]}]}]}
{"id": "42758355_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-hugo", "version": "v2.9.3", "shell": "bash", "with": [{"type": "arg", "name": "hugo-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "extended", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "hugo --minify", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "publish_repo", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "42815219_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "my-docker-username/my-app:latest\nmy-docker-username/my-app:$(echo $GITHUB_SHA | cut -c1-7)\n", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig\nexport KUBECONFIG=$(pwd)/kubeconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\nkubectl set image deployment/my-app my-app=my-docker-username/my-app:latest\nkubectl rollout status deployment/my-app\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42885896_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2021.1.6f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "Linux", "CIvars": []}, {"type": "arg", "name": "cache", "value": "true", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Navigate to the Unity project directory if needed\ncd Your/Unity/Project/Path\n\n# Run the Unity build command\n/opt/Unity/Editor/Unity \\\n  -quit \\\n  -batchmode \\\n  -nographics \\\n  -logFile \\\n  -projectPath . \\\n  -buildTarget Linux64 \\\n  -executeMethod BuildScript.PerformBuild \\\n  -buildPath ./Builds/Linux/ \\\n  -otherBuildOption \\\n  -quit \\\n  -errorOnExit\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "unity-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./Builds/Linux/*", "CIvars": []}]}]}]}
{"id": "42909661_0", "jobs": [{"name": "zip-release-files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Assuming your release files are in the 'release' directory\nmkdir -p release\n# Add any files you want to be zipped, for example:\ncp -r path/to/your/files/* release/\n\n# Create a zip file\nzip -r release-files.zip release/*\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ github.event.release.upload_url }}", "CIvars": [{"name": "event.release.upload_url", "expression": "github.event.release.upload_url", "type": "context"}]}, {"type": "arg", "name": "asset_path", "value": "release-files.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "release-files.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "42957099_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name SqlServer -Force -AllowClobber -Scope CurrentUser\n$securePassword = ConvertTo-SecureString $env:SQL_PASSWORD -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential($env:SQL_USERNAME, $securePassword)\n$connectionString = \"Server=$env:SQL_SERVER; Database=YourSSASDatabaseName; Integrated Security=False; User ID=$($credential.UserName); Password=$($credential.GetNetworkCredential().Password);\"\n\n# Ensure the module for AMO is loaded\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.AnalysisServices\")\n# Connect to SSAS\n$server = New-Object Microsoft.AnalysisServices.Server\n$server.Connect($connectionString)\n\n# Add your AMO SSAS deployment logic here\n# Example: Deploying an SSAS project from a .xmla or .bim file\n$projectPath = \"path/to/your/project.bim\"  # Update this path\n$deploymentScript = [System.IO.File]::ReadAllText($projectPath)\n$server.Execute($deploymentScript)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "42968489_0", "jobs": [{"name": "unserialize", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"\n\\$mysqli = new mysqli(getenv('DB_HOST'), getenv('DB_USER'), getenv('DB_PASS'), getenv('DB_NAME'));\nif (\\$mysqli->connect_error) {\n    die('Connect Error (' . \\$mysqli->connect_errno . ') ' . \\$mysqli->connect_error);\n}\n\n\\$query = 'SELECT serialized_column FROM your_table'; // Change your_table and serialized_column\n\\$result = \\$mysqli->query(\\$query);\n\nwhile (\\$row = \\$result->fetch_assoc()) {\n    \\$data = unserialize(\\$row['serialized_column']);\n    print_r(\\$data); // Process or store your unserialized data as needed\n}\n\n\\$mysqli->close();\n\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43075447_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mkdecker/sendmail", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "smtp-server", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "${{ secrets.SMTP_USER }}", "CIvars": [{"name": "SMTP_USER", "expression": "secrets.SMTP_USER", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Build Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build for commit `${{ github.sha }}` has been completed successfully! \n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}]}
{"id": "43076542_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Devever/clojure-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "lein_version", "value": "2.9.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "lein deps", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein uberjar", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43127293_0", "jobs": [{"name": "run-frameit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install frameit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example of running frameit with a custom color (you may need to adjust based on your requirements)\nMOVIE_TITLE=\"My Movie\"\nKEYWORD_COLOR=\"green\"  # specify the color you want to test\nCONTENT=\"The colors should reflect as specified.\"\n\n# FrameIt command - replace 'your_frameit_command' with actual command you want to run.\nframeit your_frameit_command --title \"$MOVIE_TITLE\" --color \"$KEYWORD_COLOR\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "output=$(frameit your_frameit_command --title \"$MOVIE_TITLE\" --color \"$KEYWORD_COLOR\")\necho \"$output\"\necho \"output=$output\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"FrameIt Output: ${{ env.output }}\"\nif echo \"${{ env.output }}\" | grep -q \"black\"; then\n  echo \"FrameIt is not applying the specified color. Please check the configuration.\";\n  exit 1;  # This will fail the job if the color is not applied correctly.\nelse\n  echo \"FrameIt is applying the colors correctly.\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4328831_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nbundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --tag integration\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43294937_0", "jobs": [{"name": "update_cart", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, pdo, phpunit", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -r \"require 'path/to/your/codeigniter/index.php';\"\n# Call your function to update cart here.\n# E.g., assuming your controller is in 'controllers/Cart.php' and the method is 'update'\nphp -r \"require 'path/to/your/codeigniter/framework/core/CodeIgniter.php';\"\n/* Assuming you can directly call this method or set it up in a way to \n   update the cart, replace 'updateCart' with your actual method. */ \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43322804_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x gradlew", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/upload-cloud-storage", "version": "v0", "shell": "bash", "with": [{"type": "arg", "name": "credentials_json", "value": "${{ secrets.GCP_CREDENTIALS }}", "CIvars": [{"name": "GCP_CREDENTIALS", "expression": "secrets.GCP_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "bucket", "value": "<YOUR_BUCKET_NAME>", "CIvars": []}, {"type": "arg", "name": "src", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}, {"type": "arg", "name": "dest", "value": "app-release.apk", "CIvars": []}]}]}]}
{"id": "43363358_1", "jobs": [{"name": "notify-on-success", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "chmod +x ./generate_output.sh\nOUTPUT=$(./generate_output.sh)\necho \"OUTPUT=$OUTPUT\" >> $GITHUB_ENV  # Store output in environment variable\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Deployment Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "${{ env.OUTPUT }}", "CIvars": [{"name": "OUTPUT", "expression": "env.OUTPUT", "type": "env"}]}, {"type": "arg", "name": "to", "value": "you@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}]}]}]}
{"id": "43366601_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"BrowserStack Username: ${{ secrets.BROWSERSTACK_USERNAME }}\"\necho \"BrowserStack Access Key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}\"\nsed -i \"s/username: '\\$BROWSERSTACK_USERNAME'/username: '${{ secrets.BROWSERSTACK_USERNAME }}'/g\" tests/acceptance.suite.yml\nsed -i \"s/accessKey: '\\$BROWSERSTACK_ACCESS_KEY'/accessKey: '${{ secrets.BROWSERSTACK_ACCESS_KEY }}'/g\" tests/acceptance.suite.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/codecept run acceptance", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43399038_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$APP_STORE_CONNECT_API_KEY\" > AppStoreConnectKey.p8\nchmod 600 AppStoreConnectKey.p8\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd path/to/your/fastlane\nfastlane deliver --skip_screenshots --skip_metadata\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43449036_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer config repositories.myrepo vcs https://github.com/${{ github.repository }}.git", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer config --global github-oauth.github.com $GITHUB_TOKEN\ncomposer config -g preferred-install dist\ncomposer publish --no-interaction\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43575754_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install\n# If you are using Carthage, replace the above with:\n# brew install carthage && carthage build --no-skip-current\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n  -scheme YourAppScheme \\\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  -derivedDataPath build \\\n  test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n  -scheme YourAppScheme \\\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  -derivedDataPath build \\\n  test | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43629463_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Adjust this command based on your build process\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --follow-symlinks --delete", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "cheusov/cloudfront-invalidate-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "distribution", "value": "YOUR_CLOUDFRONT_DISTRIBUTION_ID", "CIvars": []}, {"type": "arg", "name": "paths", "value": "/*", "CIvars": []}]}]}]}
{"id": "43632938_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "chmod +x ./gradlew", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-release", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/outputs/apk/release/app-release.apk", "CIvars": []}]}]}, {"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-release", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}\" | base64 --decode > google-play-key.json", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "r0adkll/upload-google-play", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "serviceAccountJson", "value": "google-play-key.json", "CIvars": []}, {"type": "arg", "name": "packageName", "value": "${{ secrets.PACKAGE_NAME }}", "CIvars": [{"name": "PACKAGE_NAME", "expression": "secrets.PACKAGE_NAME", "type": "secret"}]}, {"type": "arg", "name": "releaseFile", "value": "app-release.apk", "CIvars": []}, {"type": "arg", "name": "track", "value": "production", "CIvars": []}]}]}]}
{"id": "43660926_0", "jobs": [{"name": "send-output", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Replace this with your command\necho \"Running some command...\"\necho \"This is the output of the command\" # Simulating command output\necho \"All done.\" \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ steps.command.outputs.result }}\" >> command_output.txt", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Command Output from GitHub Action", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nHere is the output from the command executed:\n\n${{ steps.command.outputs.result }}\n\nBest Regards,\nGitHub Actions\n", "CIvars": [{"name": "command.outputs.result", "expression": "steps.command.outputs.result", "type": "steps"}]}, {"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}]}]}]}
{"id": "43661404_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --logger:\"console;verbosity=detailed\" --logger \"trx;logfilename=test_results.trx\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "andymc42/test-results-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "./test_results.trx", "CIvars": []}]}]}]}
{"id": "43693245_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Add your PowerShell script here or reference an external script (.ps1)\n\n# Example: inline PowerShell script that invokes GitHub App deployment\n# Replace the following with your actual deployment logic\n$githubAppId = 'your-github-app-id'  # Replace with your GitHub App ID\n$installationId = 'your-installation-id'  # Replace with your installation ID\n$appToken = 'your-app-token'  # Optional: could be generated/tokenized in advance\n\n# Here would be the logic to deploy your GitHub App, e.g., using GitHub REST API\n# Example using a simple Invoke-RestMethod to trigger a deployment\n$uri = \"https://api.github.com/app/installations/$installationId/access_tokens\"\n$headers = @{\n    Authorization = \"Bearer $GITHUB_TOKEN\"\n    Accept = \"application/vnd.github.v3+json\"\n}\n\n# Make the API call\ntry {\n    $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers\n    Write-Output \"Deployment successful! Token: $($response.token)\"\n} catch {\n    Write-Error \"Error deploying GitHub App: $_\"\n    exit 1\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can send a notification, e.g., to Slack or email, upon successful deployment.\nWrite-Output \"Deployment completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43715224_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, ctype, json, bcmath, tokenizer, sqlite3, fileinfo", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M, memory_limit=512M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test --env=testing", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43790980_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp.xcarchive", "CIvars": []}]}]}]}
{"id": "4379572_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler   # Install Bundler if you're using it\nbundle install        # Install the required gems for your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test     # Adjust this line if you're using a different testing framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43920409_0", "jobs": [{"name": "update-build-variable", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$ErrorActionPreference = \"Stop\"\n\n$buildId = $env:BULID_ID\n$orgUrl = $env:TFS_ORG_URL\n$project = $env:TFS_PROJECT\n$patToken = $env:PAT_TOKEN\n$newVariableValue = $env:NEW_VARIABLE_VALUE\n\n# Create the authorization header for the PAT\n$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(\":$patToken\"))\n\n# Fetch the current build\n$buildUrl = \"$orgUrl/$project/_apis/build/builds/$buildId?api-version=6.0\"\n$buildResponse = Invoke-RestMethod -Uri $buildUrl -Method Get -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)}\n\n# Update variable value in the build\n$buildResponse.variables[\"YourVariableName\"].value = $newVariableValue\n\n# Push the updated build back to TFS\n$updateUrl = \"$orgUrl/$project/_apis/build/builds/$buildId?api-version=6.0\"\nInvoke-RestMethod -Uri $updateUrl -Method Put -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo); 'Content-Type'='application/json'} -Body ($buildResponse | ConvertTo-Json -Depth 10)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "43945511_0", "jobs": [{"name": "inject-variables", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Loading environment variables from variables.env\"\nif [ -f variables.env ]; then\n  export $(cat variables.env | xargs)\n  echo \"Environment variables loaded.\"\nelse\n  echo \"No variables.env file found.\"\nfi\n\n# Optionally, you can echo the variables for debugging purposes\n# Please be careful with sensitive information\n# echo \"VAR1=$VAR1\" >> $GITHUB_ENV\n# echo \"VAR2=$VAR2\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Github-Users/github-inject-variables", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "variables_file", "value": "variables.env", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Running your script...\"\n# This is where you would use the injected variables\n# For example, run a script using these variables\n# ./your-script.sh  # This command should use the injected environment variables\n\n# Example: Accessing the variables\n# echo \"Injected Variable: $YOUR_VARIABLE_NAME\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44032502_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/Library/Caches/CocoaPods\n~/Library/Developer/Xcode/DerivedData\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pod-cache-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourAppScheme \\\n           -sdk iphonesimulator \\\n           -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourAppScheme \\\n           -sdk iphonesimulator \\\n           -destination 'platform=iOS Simulator,name=iPhone 12,OS=latest' \\\n           test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44095775_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda-incubator/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}, {"type": "arg", "name": "activate-environment", "value": "myenv", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda install --yes conda-build anaconda-client  # Add other dependencies as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda build .  # This command builds the conda package in the current directory (should contain meta.yaml)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "anaconda upload /path/to/your/package.tar.bz2 --label main --user YOUR_ANACONDA_USERNAME\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44108837_1", "jobs": [{"name": "call-reusable", "steps": []}]}
{"id": "44185414_0", "jobs": [{"name": "phpcs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$HOME/.composer/vendor/bin/phpcs --standard=PSR2 ./path/to/your/php/files\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$HOME/.composer/vendor/bin/phpcbf --standard=PSR2 ./path/to/your/php/files\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "phpcs-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/your/report", "CIvars": []}]}]}]}
{"id": "44249609_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gradle-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Distribution-Github-Action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "appId", "value": "${{ secrets.FIREBASE_APP_ID }}", "CIvars": [{"name": "FIREBASE_APP_ID", "expression": "secrets.FIREBASE_APP_ID", "type": "secret"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.FIREBASE_TOKEN }}", "CIvars": [{"name": "FIREBASE_TOKEN", "expression": "secrets.FIREBASE_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "groups", "value": "testers", "CIvars": []}, {"type": "arg", "name": "file", "value": "app/build/outputs/apk/debug/app-debug.apk", "CIvars": []}, {"type": "arg", "name": "releaseNotes", "value": "Automated build", "CIvars": []}]}]}, {"name": "run-emulator", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "yes | sdkmanager --licenses\nsdkmanager \"platform-tools\" \"platforms;android-30\" \"build-tools;30.0.3\" \"emulator\" \"system-images;android-30;google_apis;x86\" # Adjust API level\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"no\" | avdmanager create avd -n test -k \"system-images;android-30;google_apis;x86\" --force\nnohup emulator -avd test -no-snapshot -no-boot-anim -no-window &\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if adb shell getprop sys.boot_completed | grep -m 1 '1'; then\n    echo \"Emulator started.\"\n    break\n  fi\n  echo \"Waiting for emulator to start...\"\n  sleep 5\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew connectedDebugAndroidTest", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44279703_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory # Change to your project directory\npod install # or your preferred dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace \\\n           -scheme YourScheme \\\n           -archivePath build/YourAppName.xcarchive \\\n           archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n           -archivePath build/YourAppName.xcarchive \\\n           -exportOptionsPlist ExportOptions.plist \\\n           -exportPath build/YourAppName.ipa\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourAppName.ipa", "CIvars": []}]}]}]}
{"id": "44288283_0", "jobs": [{"name": "tfs-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Your command to trigger TFS build goes here\n# This is a placeholder. Replace with the actual command/API call.\n# Ensure you have the appropriate permissions/token set up.\necho \"Triggering TFS build...\"\n# Use curl or any available CLI tool.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Command to get the list of changesets from TFS here.\n# This is a placeholder. Replace it with actual command.\n# Ensure you have the proper tools/CLI for TFS.\necho \"Collecting changesets...\"\n# Example output; replace with actual command output.\necho \"::set-output name=changesets::`tfs-cli get-changesets`\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "TFS Build Alert: Changesets for Build #${{ steps.trigger_build.outputs.build_id }}", "CIvars": [{"name": "trigger_build.outputs.build_id", "expression": "steps.trigger_build.outputs.build_id", "type": "steps"}]}, {"type": "arg", "name": "body", "value": "A new TFS build has been triggered!\n\nChangesets included in the build:\n${{ steps.get_changesets.outputs.changesets }}\n\nPlease review the changesets.\n", "CIvars": [{"name": "get_changesets.outputs.changesets", "expression": "steps.get_changesets.outputs.changesets", "type": "steps"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build failed, check the logs.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44308299_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "some-action/example", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "inputVariable", "value": "${{ env.MY_ENV_VAR }}", "CIvars": [{"name": "MY_ENV_VAR", "expression": "env.MY_ENV_VAR", "type": "env"}]}]}]}]}
{"id": "44389545_0", "jobs": [{"name": "create_branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the PR title\nPR_TITLE=\"${{ github.event.pull_request.title }}\"\n# Cleanup the title to create a valid branch name (replace spaces, special characters)\nBRANCH_NAME=\"$(echo \"$PR_TITLE\" | tr -d '[:punct:]' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')\"\n# Create a new branch\ngit checkout -b \"pr-${BRANCH_NAME}\"\n# Push the new branch to the repository\ngit push origin \"pr-${BRANCH_NAME}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unsplash/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "issue_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "A new branch named `pr-${{ github.event.pull_request.title | downcase | slugify }}` has been created.", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title | downcase | slugify", "type": "context"}, {"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}]}]}]}]}
{"id": "44429485_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.PUBLISH_PROFILE }}", "CIvars": [{"name": "PUBLISH_PROFILE", "expression": "secrets.PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44525347_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore ./YourMvcProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./YourMvcProject.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./YourMvcProject.Tests/YourMvcProject.Tests.csproj --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourMvcProject  # Change directory to your project where the service fabric project is located\ndotnet publish -c Release -o ./output\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourMvcProject\n# Create a Service Fabric package if not already created\nnuget pack YourServiceFabricProject.csproj -OutputDirectory ./output\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azureSubscription", "value": "your-azure-subscription-name", "CIvars": []}, {"type": "arg", "name": "serviceFabricConnection", "value": "your-service-fabric-cluster-url", "CIvars": []}, {"type": "arg", "name": "mainAppPackage", "value": "./output/YourServiceFabricProject.sfpkg", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az sf application provision --resource-group YourResourceGroup --cluster-name YourClusterName --application-id YourApplicationId --package-path ./output/YourServiceFabricProject.sfpkg \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44528371_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-gcc", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcc-version", "value": "9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "compiled-binaries", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/your_project_executable", "CIvars": []}]}]}]}
{"id": "4452951_1", "jobs": [{"name": "rake", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44561199_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This is optional but can help to ensure consistency\n# You can check if the lockfile is up-to-date by running `bundle check`\nbundle check || bundle install\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44568883_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs -v", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44572032_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "bazel-version", "value": "5.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set the java.io.tmpdir property to a custom directory\nexport TMP_DIR=\"$(pwd)/tmp\"\nmkdir -p \"$TMP_DIR\"\nbazel test //... --test_output=streamed --java_test_tmpdir=\"$TMP_DIR\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clean up the temporary directory after tests\nrm -rf \"$TMP_DIR\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44674018_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Logging into Azure...\"\necho \"${{ secrets.AZURE_CLIENT_SECRET }}\" | az login --service-principal -u \"${{ secrets.AZURE_CLIENT_ID }}\" -p --tenant \"${{ secrets.AZURE_TENANT_ID }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking Service Fabric cluster health...\"\naz sf cluster health show --resource-group <YOUR_RESOURCE_GROUP> --cluster-name <YOUR_CLUSTER_NAME> --query \"overallHealth\" -o tsv\nif [[ \"$(az sf cluster health show --resource-group <YOUR_RESOURCE_GROUP> --cluster-name <YOUR_CLUSTER_NAME> --query \"overallHealth\" -o tsv)\" != \"OK\" ]]; then\n    echo \"Cluster is not healthy. Exiting.\"\n    exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying Service Fabric application...\"\ntimeout 300 az sf application upload --resource-group <YOUR_RESOURCE_GROUP> --cluster-name <YOUR_CLUSTER_NAME> --app-name <YOUR_APP_NAME> --path . --force\ntimeout 300 az sf application provision --resource-group <YOUR_RESOURCE_GROUP> --cluster-name <YOUR_CLUSTER_NAME> --app-name <YOUR_APP_NAME>\ntimeout 300 az sf application update --resource-group <YOUR_RESOURCE_GROUP> --cluster-name <YOUR_CLUSTER_NAME> --app-name <YOUR_APP_NAME> --params <YOUR_PARAMS>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking deployment status...\"\nDEPLOYMENT_STATUS=$(az sf application show --resource-group <YOUR_RESOURCE_GROUP> --cluster-name <YOUR_CLUSTER_NAME> --app-name <YOUR_APP_NAME> --query \"healthState\" -o tsv)\nif [[ \"$DEPLOYMENT_STATUS\" != \"Healthy\" ]]; then\n    echo \"Deployment failed or application not healthy. Exiting.\"\n    exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44688054_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://cli-assets.heroku.com/install.sh | sh", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.HEROKU_API_KEY }}\" | heroku auth:token\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku git:remote -a ${{ secrets.HEROKU_APP_NAME }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git pull heroku main", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"your-github-username\"  # Update with your GitHub username\ngit config --global user.email \"you@example.com\"  # Update with your GitHub email\ngit add .\ngit commit -m \"Deploy from Heroku\"\ngit push origin main  # Change 'main' to your default branch if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44718720_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "${{ matrix.ruby }}", "CIvars": [{"name": "ruby", "expression": "matrix.ruby", "type": "matrix"}]}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rspec:${{ matrix.rspec }} # Install the specified RSpec version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes your RSpec tests are located in the 'spec' directory.\n# Adjust the command if your structure is different.\nbundle exec rspec --profile --format documentation --fail-fast --pattern 'spec/**/*_spec.rb'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44860685_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, json, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add any build steps you may need, e.g.:\n# npm install || yarn install\n# npm run build\necho \"Build step can be added here if needed.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key\nchmod 600 private_key\nrsync -avz --delete --exclude='/.git' --exclude='node_modules' -e \"ssh -o StrictHostKeyChecking=no -i private_key\" . $SERVER_USERNAME@$SERVER_IP:$WEB_ROOT\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USERNAME@$SERVER_IP \"cd $WEB_ROOT && drush cache-rebuild\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "44980525_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p test-results\ncp -r ./coverage test-results/\ncp jest-report.json test-results/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "webhookUrl", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "channel", "value": "ci-notifications", "CIvars": []}]}]}]}
{"id": "4499125_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Wisewiz/setup-wix", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "wix_version", "value": "3.11.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "candle.exe -out mymodule.wxi mymodule.wxs\nlight.exe -o mymodule.msm mymodule.wxi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with the command to run your unit tests\n# For example: Run your tests with a testing framework\ndotnet test mytests.csproj\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45010601_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building the project\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "shared-actions/trigger-workflow", "version": "v1.0.1", "shell": "bash", "with": [{"type": "arg", "name": "workflow", "value": "trigger-another-pipeline.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}]}]}
{"id": "45021186_0", "jobs": [{"name": "provision-vm", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Logging in to Azure...\"\naz login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Provisioning VM...\"\n# Replace with your own command to create the VM\n# Example:\naz vm create --resource-group myResourceGroup --name myVM --image UbuntuLTS --admin-username azureuser --generate-ssh-keys --public-ip-address \"\" --custom-data cloud-init.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "VM_IP=$(az vm show --resource-group myResourceGroup --name myVM --query \"privateIps\" -o tsv)\necho \"VM Private IP: $VM_IP\"\necho \"::set-output name=ip::$VM_IP\"\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "setup-azure-devops-agent", "steps": [{"type": "shell_cmd", "cmd": "echo \"Waiting for VM initialization...\"\nsleep 120  # Adjust as needed for your VM's startup time\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "SSH_COMMAND=\"ssh azureuser@${{ needs.provision-vm.outputs.ip }} 'bash -s'\"\necho \"Setting up Azure DevOps agent on VM...\"\n# Replace with the commands to install and configure the Azure DevOps agent\n$SSH_COMMAND <<-'EOF'\n  # Commands to install dependencies\n  sudo apt-get update\n  sudo apt-get install -y curl\n  \n  # Download and install Azure DevOps Agent\n  curl -O https://vstsagentpackage.azureedge.net/agent/2.193.0/vsts-agent-linux-x64-2.193.0.tar.gz\n  mkdir myagent && cd myagent\n  tar zxvf ../vsts-agent-linux-x64-2.193.0.tar.gz\n  ./config.sh --unattended --url https://dev.azure.com/{organization} --auth pat --token $AZURE_DEVOPS_PAT --pool Default --agent $(hostname)\n  sudo ./svc.sh install\n  sudo ./svc.sh start\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45054594_0", "jobs": [{"name": "overwrite-file", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# You can adapt the following PowerShell script to your needs\n# Save script as a .ps1 file in your repository, for example: overwrite-file.ps1\n$filePath = \"${{ env.FILE_PATH }}\"\n$newContent = \"${{ env.NEW_CONTENT }}\"\n\n# Check if the file exists\nif (Test-Path $filePath) {\n    # Overwrite the existing file\n    Set-Content -Path $filePath -Value $newContent -Force\n    Write-Host \"File at '$filePath' has been overwritten.\"\n} else {\n    Write-Host \"File at '$filePath' does not exist.\"\n    # Optionally: Create the file\n    Set-Content -Path $filePath -Value $newContent -Force\n    Write-Host \"File created at '$filePath'.\"\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"github-actions\"\ngit config --local user.email \"action@github.com\"\ngit add ./path/to/your/file.txt\ngit commit -m \"Overwrite file on branch creation\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45065875_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$CERTIFICATE\" | base64 --decode > certificate.p12\necho \"$PROVISIONING_PROFILE\" | base64 --decode > profile.mobileprovision\nsecurity set-keychain-settings -l login.keychain\nsecurity import certificate.p12 -k ~/Library/Keychains/login.keychain -P \"$CERTIFICATE_PASSWORD\" -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/login.keychain\nsecurity unlock-keychain -p \"$CERTIFICATE_PASSWORD\" ~/Library/Keychains/login.keychain\nsecurity set-identity-preference -s \"iPhone Distribution: Your Name (Your Team ID)\" -k ~/Library/Keychains/login.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourAppScheme \\\n           -configuration Release \\\n           CODE_SIGN_IDENTITY=\"iPhone Distribution: Your Name (Your Team ID)\" \\\n           CODE_SIGN_STYLE=\"Manual\" \\\n           PROVISIONING_PROFILE_SPECIFIER=\"Your Provisioning Profile Name\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n           -archivePath YourApp.xcarchive \\\n           -exportPath ./output \\\n           -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45113410_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if mysqladmin ping -h\"127.0.0.1\" -u\"laravel\" -p\"secret\" --silent; then\n    break\n  fi\n  echo \"Waiting for database connection...\"\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan config:cache", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Add your deployment commands here, e.g., SSH into server and deploy\n# Example: ssh user@your-server 'cd /path/to/app && git pull && php artisan migrate --force'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45122461_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install required packages for Vagrant\nsudo apt-get update\nsudo apt-get install -y virtualbox\nwget https://releases.hashicorp.com/vagrant/2.2.19/vagrant_2.2.19_x86_64.deb\nsudo dpkg -i vagrant_2.2.19_x86_64.deb\nsudo apt-get install -f\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace the following command with the command used to run your tests inside the Vagrant box\nvagrant ssh -c \"cd /vagrant && bundle exec rspec\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45213498_0", "jobs": [{"name": "syntax-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "find . -name '*.php' -print0 | xargs -0 -n1 php -l\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45216762_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"REPLICAS=${{ secrets.REPLICA_COUNT }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\nkubectl rollout status deployment/my-app\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment succeeded!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45220373_0", "jobs": [{"name": "check-conflicts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git fetch origin ${{ github.event.pull_request.base.ref }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout ${{ github.head_ref }}\ngit merge --no-commit --no-ff origin/${{ github.event.pull_request.base.ref }} || (echo \"Merge conflict detected. Please resolve conflicts before merging.\" && exit 1)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \\\n  -d '{\"body\": \"\ud83e\udd16 Merge conflict detected. Please resolve the conflicts before merging.\"}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45228119_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet tool restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet cake build.cake", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_WEBAPP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./artifacts", "CIvars": []}]}]}]}
{"id": "45442512_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# This is where you could run your deployment script or command\necho \"Running deployment script...\"\n# Example: ./deploy.sh \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed successfully!\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-call", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "owner/repo", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "another-workflow.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "45500034_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache", "value": "bundler", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build  # Make sure you have a lane called `build` in your Fastfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane test  # Optional: If you have a lane for testing in your Fastfile\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45518810_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your Podspec is in the root directory\npod repo add myRepo https://github.com/<your-username>/<your-repo-name>.git || true\npod repo push myRepo <your-pod-name>.podspec --allow-warnings --skip-import-validation --verbose\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45543583_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "4.1.5", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "folder", "value": "build", "CIvars": []}, {"type": "arg", "name": "cname", "value": "${{ secrets.CNAME }}", "CIvars": [{"name": "CNAME", "expression": "secrets.CNAME", "type": "secret"}]}]}]}]}
{"id": "45544358_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r0adkll/upload-google-play", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "serviceAccountJson", "value": "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}", "CIvars": [{"name": "GOOGLE_PLAY_SERVICE_ACCOUNT", "expression": "secrets.GOOGLE_PLAY_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "packageName", "value": "com.example.yourapp", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"y\" | sdkmanager --install \"platform-tools\" \"platforms;android-30\" \"system-images;android-30;google_apis;x86\" \"emulator\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sdkmanager --verbose --install \"system-images;android-30;google_apis;x86\"\necho no | avdmanager create avd -n testAVD -k \"system-images;android-30;google_apis;x86\" --device \"pixel\"\n# Start the emulator and wait for it to boot\n$ANDROID_HOME/emulator/emulator -avd testAVD -no-window -no-audio &\n\n# Wait for the emulator to boot\ntimeout 120 sh -c 'while [[ \"`adb get-state`\" != \"device\" ]]; do sleep 5; done'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Use this step to run your tests or commands that require AVD\nadb shell input keyevent 82 # this is for unlocking the emulator, adjust as needed\n./gradlew connectedAndroidTest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "adb -s emulator-5554 emu kill\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45590288_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane increment_build_number", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add .\ngit commit -m \"Increment build number\" || echo \"No changes to commit\"\ngit push origin HEAD:main  # Adjust as needed based on branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45591520_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild clean build \\\n  -workspace YourApp.xcworkspace \\\n  -scheme YourAppScheme \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  ONLY_ACTIVE_ARCH=NO | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test \\\n  -workspace YourApp.xcworkspace \\\n  -scheme YourAppScheme \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  ONLY_ACTIVE_ARCH=NO | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive \\\n  -workspace YourApp.xcworkspace \\\n  -scheme YourAppScheme \\\n  -archivePath ${{ github.workspace }}/YourApp.xcarchive \\\n  -sdk iphoneos \\\n  SKIP_INSTALL=NO \\\n  BUILD_LIBRARIES_FOR_DISTRIBUTION=YES\n  \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n  -archivePath ${{ github.workspace }}/YourApp.xcarchive \\\n  -exportPath ${{ github.workspace }}/YourApp.ipa \\\n  -exportOptionsPlist exportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourApp.ipa", "CIvars": []}]}]}]}
{"id": "45612758_0", "jobs": [{"name": "sonarqube", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-maven-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean verify sonar:sonar -Dsonar.projectKey=<Your_SonarCloud_Project_Key> -Dsonar.organization=<Your_Organization_Key> -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn sonar:sonar", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "projectKey", "value": "<Your_SonarCloud_Project_Key>", "CIvars": []}]}]}]}
{"id": "45613744_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az webapp update --name <YourAppServiceName> --resource-group <YourResourceGroupName> --set state=disabled\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az webapp deployment source config-zip --resource-group <YourResourceGroupName> --name <YourAppServiceName> --src app.zip\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az webapp update --name <YourAppServiceName> --resource-group <YourResourceGroupName> --set state=enabled\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45677221_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Or any test framework you\u2019re using, e.g., rake test or minitest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add any build commands here if necessary\necho \"Building artifacts...\"\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl -L https://omnitruck.chef.io/install.sh | sudo bash\ngem install chef\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a Chef cookbook and a knife configuration\nknife upload ./cookbooks --chef-server-url $CHEF_SERVER_URL --client-name $CHEF_CLIENT_NAME --key $CHEF_CLIENT_KEY\n# Other deployment commands if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45716106_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "bazel-version", "value": "5.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bazel build //...", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bazel test //...", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Define any post-build commands or scripts here.\necho \"Processing build artifacts...\"\n# For example, you can copy artifacts, send notifications, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "bazel-bin/**", "CIvars": []}]}]}]}
{"id": "45719046_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit # Ensure you have phpunit configured in your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying the application...\"\n# Your deployment commands go here\n# e.g., rsync, scp, or any preferred deployment method\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45730257_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# This block should define how to trigger tests on the Test Agent\n# Here you can use curl, az CLI, or any other means to trigger tests\n# Example CLI command to trigger tests can be added here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45735029_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add _site\ngit commit -m \"Rebuild site $(date -u)\"\ngit push origin gh-pages --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45780263_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "gcc-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "g++-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y \\\n  libboost-system-dev \\\n  libboost-thread-dev \\\n  libboost-regex-dev \\\n  libboost-filesystem-dev \\\n  libssl-dev \\\n  cmake \\\n  pkg-config \\\n  build-essential\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45827810_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run phpcs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"memory_limit = 512M\" >> ~/.ini\necho \"post_max_size = 20M\" >> ~/.ini\necho \"upload_max_filesize = 20M\" >> ~/.ini\necho \"display_errors = On\" >> ~/.ini\necho \"error_reporting = E_ALL\" >> ~/.ini\necho \"log_errors = On\" >> ~/.ini\necho \"error_log = /var/log/php_errors.log\" >> ~/.ini\nsudo cp ~/.ini /etc/php/8.0/cli/conf.d/custom.ini  # Adjust according to your PHP version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} \"cd /var/www/myapp && git pull origin main\"  # Adjust directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "channel", "value": "#deployments", "CIvars": []}, {"type": "arg", "name": "text", "value": "Deployment to production was successful!", "CIvars": []}]}]}]}
{"id": "45886584_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mcr.microsoft.com/mssql/server:2019-latest", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "/opt/mssql/bin/sqlservr", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "for i in {30..0}; do\n  if sqlcmd -S localhost -U SA -P 'yourStrong(!)Password' -Q 'SELECT 1'; then\n    break\n  fi\n  echo \"Waiting for SQL Server...\"\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourProject.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourProject.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sqlcmd -S localhost -U SA -P 'yourStrong(!)Password' -d master -i path/to/your/deployment/script.sql\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "45888107_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace \\\n           -scheme YourScheme \\\n           -sdk iphonesimulator \\\n           -destination 'platform=iOS Simulator,name=iPhone 13' \\\n           test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/test/results", "CIvars": []}]}]}]}
{"id": "45944048_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda-incubator/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}, {"type": "arg", "name": "activate-environment", "value": "myenv", "CIvars": []}, {"type": "arg", "name": "python-version", "value": 3.8, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install git+https://${GIT_TOKEN}@github.com/username/private-repo.git\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46047177_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust according to your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "credentials", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_FUNCTION_APP_NAME }}", "CIvars": [{"name": "AZURE_FUNCTION_APP_NAME", "expression": "secrets.AZURE_FUNCTION_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Any necessary cleanup commands\necho \"Deployment completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46121821_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "1.8", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gradle-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew connectedAndroidTest", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-actions", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "channel", "value": "#your-channel", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.SLACK_BOT_TOKEN }}", "CIvars": [{"name": "SLACK_BOT_TOKEN", "expression": "secrets.SLACK_BOT_TOKEN", "type": "secret"}]}]}]}]}
{"id": "46131568_0", "jobs": [{"name": "detect-language", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install linguist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "linguist --breakdown --json . > languages.json\necho \"Detected languages:\"\ncat languages.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46135579_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/create-or-update-issue", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Contributor Update", "CIvars": []}, {"type": "arg", "name": "body", "value": "A contributor has been added or removed.", "CIvars": []}, {"type": "arg", "name": "labels", "value": "notification", "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "46152582_0", "jobs": [{"name": "upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jfrog/setup-jfrog-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "jfrog rt c --url=${{ secrets.JFROG_URL }} \\\n            --user=${{ secrets.JFROG_USER }} \\\n            --password=${{ secrets.JFROG_API_KEY }} \\\n            --interactive=false \\\n            my-artifactory\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example command to build your artifact\necho \"Building the artifact...\"\nmkdir -p build\necho \"This is my artifact\" > build/my-artifact.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "jfrog rt u \"build/my-artifact.txt\" \"my-repo/path/to/upload/\" \\\n--fail-no-op=true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46176669_0", "jobs": [{"name": "coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test -- --coverage --coverageThreshold='{\"global\":{\"branches\":80,\"lines\":80,\"functions\":80,\"statements\":80}}'", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jest-community/jest-junit", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "testResultsPath", "value": "test-results/jest-junit.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "./coverage/lcov.info", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.CODECOV_TOKEN }}", "CIvars": [{"name": "CODECOV_TOKEN", "expression": "secrets.CODECOV_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Parse the coverage results\ncoverage=$(grep -E 'All files' coverage/lcov.info | awk -F' ' '{print $3}' | sed 's/%//')\nthreshold=80\nif [ $(echo \"$coverage < $threshold\" | bc) -eq 1 ]; then\n  echo \"Code coverage ($coverage%) is below the required threshold ($threshold%).\"\n  exit 1\nelse \n  echo \"Code coverage ($coverage%) meets the required threshold ($threshold%).\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46212570_1", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendgrid", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Subject of the Email", "CIvars": []}, {"type": "arg", "name": "body", "value": "This is the body of the email.", "CIvars": []}]}]}]}
{"id": "46214660_0", "jobs": [{"name": "create_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "persist-credentials", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Example command that modifies files in the repository\necho \"This is a new line\" >> newfile.txt\n# You can run any command that modifies the files here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"github-actions@github.com\"\ngit add newfile.txt\ngit commit -m \"Add newfile.txt with a new line\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "pullreminders/actions/create-pull-request", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Automated PR: Add newfile.txt", "CIvars": []}, {"type": "arg", "name": "body", "value": "This PR was created automatically by GitHub Actions.", "CIvars": []}, {"type": "arg", "name": "base", "value": "main", "CIvars": []}, {"type": "arg", "name": "head", "value": "automated-pr/branch-creation", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Create a new branch for the changes\ngit checkout -b automated-pr/branch-creation\n# Push the changes to GitHub\ngit push --set-upstream origin automated-pr/branch-creation\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4621913_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Set up environment variables for Jenkins\nJENKINS_URL=\"http://your-jenkins-url\"\nJOB_NAME=\"your-job-name\"\nBUILD_NUMBER=$(curl -s \"$JENKINS_URL/job/$JOB_NAME/lastBuild/buildNumber\")\nCHANGE_LOG=$(curl -s \"$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/changes\")\n\n# Echoing the changelog for debugging\necho \"Change Log: $CHANGE_LOG\"\n\n# Saving changelog to a file\necho \"$CHANGE_LOG\" > changelog.txt\n\n# Check if there are changes; we can skip sending email if empty\nif [ -z \"$CHANGE_LOG\" ]; then\n  echo \"No changes to report.\"\n  exit 0\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Recent Changes in Jenkins Build", "CIvars": []}, {"type": "arg", "name": "body", "value": "Here are the recent changes in the Jenkins build:\n\n${{ steps.get_changes.outputs.changelog }}\n", "CIvars": [{"name": "get_changes.outputs.changelog", "expression": "steps.get_changes.outputs.changelog", "type": "steps"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}, {"type": "arg", "name": "content_type", "value": "text/plain", "CIvars": []}]}]}]}
{"id": "46308469_0", "jobs": [{"name": "security-checks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx eslint . && npx stylelint '**/*.css'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx npm audit && npx snyk test  # use `snyk` for additional security scanning\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/autobuild", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "languages", "value": "javascript", "CIvars": []}, {"type": "arg", "name": "build-command", "value": "npm install", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/analyze", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "category", "value": "security-and-quality", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46350216_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-application", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output", "CIvars": []}]}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-application", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "46383301_0", "jobs": [{"name": "generate-line-pointer-urls", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PR_FILES=$(jq -r '.[].filename' < $GITHUB_EVENT_PATH)\nBASE_URL=\"https://github.com/${{ github.repository }}/blob/${{ github.event.pull_request.head.sha }}/\"\nLINE_POINTER_URLS=()\n\nfor FILE in $PR_FILES; do\n  if [ -f \"$FILE\" ]; then\n    LINES=$(wc -l < \"$FILE\")\n    first_line=1\n    last_line=$LINES\n\n    # Generate line pointer URLs for the entire file\n    LINE_POINTER_URLS+=(\"- [View File](${BASE_URL}${FILE})\")\n    LINE_POINTER_URLS+=(\"- [Lines 1 to $LINES](${BASE_URL}${FILE}#L${first_line}-L${last_line})\")\n    LINE_POINTER_URLS+=(\"\")\n  fi\ndone\n\nif [ ${#LINE_POINTER_URLS[@]} -ne 0 ]; then\n  echo \"urls<<EOF\" >> $GITHUB_ENV\n  for URL in \"${LINE_POINTER_URLS[@]}\"; do\n    echo \"$URL\" >> $GITHUB_ENV\n  done\n  echo \"EOF\" >> $GITHUB_ENV\nelse\n  echo \"No files found.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slash-commands-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "### Line Pointer URLs\n${{ env.urls }}\n", "CIvars": [{"name": "urls", "expression": "env.urls", "type": "env"}]}]}]}]}
{"id": "46391802_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build -- --prod --output-path=dist", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "v4.1.3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "clean", "value": true, "CIvars": []}]}]}]}
{"id": "46396051_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git\ngit push heroku main  # Adjust if you are deploying to a different branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X PATCH https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/dynos \\\n-H \"Authorization: Bearer $HEROKU_API_KEY\" \\\n-H \"Accept: application/vnd.heroku.v3+json\" \\\n-d '{\n  \"command\": \"ruby path/to/your_script.rb\",\n  \"type\": \"worker\",\n  \"size\": \"standard-1x\"  # Choose the right size for your worker\n}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46451236_0", "jobs": [{"name": "close-old-prs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/close-pull-requests", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "state", "value": "open", "CIvars": []}, {"type": "arg", "name": "base", "value": "main", "CIvars": []}, {"type": "arg", "name": "message", "value": "This pull request has been closed due to the restructuring of the repository. Relevant code has been moved to a new repository.", "CIvars": []}]}]}]}
{"id": "46460557_1", "jobs": [{"name": "python", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd python-project\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd python-project\n# Assuming you have some tests to run, e.g. using pytest\npytest  \n", "name": "", "version": "", "shell": "bash"}]}, {"name": "node", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd node-project\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd node-project\nnpm test  # Assuming you have tests defined in package.json\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ruby-project\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ruby-project\nrspec  # Assuming you have RSpec tests for Ruby\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46485763_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "OctopusDeploy/octopus-cli-action", "version": "v1.7.0", "shell": "bash", "with": [{"type": "arg", "name": "octopus_server", "value": "${{ secrets.OCTOPUS_URL }}", "CIvars": [{"name": "OCTOPUS_URL", "expression": "secrets.OCTOPUS_URL", "type": "secret"}]}, {"type": "arg", "name": "api_key", "value": "${{ secrets.OCTOPUS_API_KEY }}", "CIvars": [{"name": "OCTOPUS_API_KEY", "expression": "secrets.OCTOPUS_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "project", "value": "YourProjectName", "CIvars": []}, {"type": "arg", "name": "package_version", "value": "1.0.${{ github.run_number }}", "CIvars": [{"name": "run_number", "expression": "github.run_number", "type": "context"}]}, {"type": "arg", "name": "package_id", "value": "YourPackageID", "CIvars": []}, {"type": "arg", "name": "files", "value": "**/*.zip", "CIvars": []}, {"type": "arg", "name": "feed", "value": "YourFeedId", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "octo create-release --project=\"YourProjectName\" --version=\"1.0.${{ github.run_number }}\" --server=\"${{ secrets.OCTOPUS_URL }}\" --apiKey=\"${{ secrets.OCTOPUS_API_KEY }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46488882_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd, mysqli, json", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y mysql-client\nmysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD -e \"CREATE DATABASE IF NOT EXISTS $DB_NAME;\"\n# Run migrations or setup additional database configurations here if needed.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46509883_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "2.2.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g @angular/cli", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build --prod", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -R ./ClientApp/dist/* ./output/wwwroot/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "46533679_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy # Your deployment command here\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "Build failed for ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}]}]}
{"id": "46614349_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "gradle-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "project1/build/libs/**\nproject2/build/libs/**\n", "CIvars": []}]}]}, {"name": "trigger-pipeline", "steps": [{"type": "gh_action", "cmd": "", "name": "aws-actions/aws-codepipeline-trigger", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws_region", "value": "us-west-2", "CIvars": []}, {"type": "arg", "name": "pipeline_name", "value": "YourPipelineName", "CIvars": []}, {"type": "arg", "name": "aws_access_key_id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws_secret_access_key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}]}]}]}
{"id": "46688176_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild clean build test \\\n  -workspace YourProject.xcworkspace \\\n  -scheme YourScheme \\\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild analyze \\\n  -workspace YourProject.xcworkspace \\\n  -scheme YourScheme \\\n  CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46736345_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.5, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\nyarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nRAILS_ENV=test bundle exec rails db:create db:schema:load --trace\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake\nbundle exec rspec # if you use RSpec, otherwise adjust this line accordingly.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rails webpacker:compile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your integration test command here if needed\necho \"Integration tests would run here.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46832387_0", "jobs": [{"name": "eslint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "reviewdog/reviewdog", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "eslint", "CIvars": []}, {"type": "arg", "name": "level", "value": "error", "CIvars": []}, {"type": "arg", "name": "reporter", "value": "github-pr-check", "CIvars": []}, {"type": "arg", "name": "filter_mode", "value": "added", "CIvars": []}, {"type": "arg", "name": "eslint_flags", "value": "--ext .js,.jsx,.ts,.tsx", "CIvars": []}, {"type": "arg", "name": "working_directory", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "reviewdog -f=eslint -reporter=github-pr-review -level=error -name=eslint -filter-mode=added -working-directory=.", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46848539_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install kitchen\ngem install kitchen-ansible # Modify this line based on your driver\ngem install kitchen-docker   # If you're using Docker driver\ngem install kitchen-vagrant  # If you're using Vagrant driver\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kitchen test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46905113_0", "jobs": [{"name": "build_and_deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"FASTLANE_USER=${{ secrets.FASTLANE_USER }}\" >> $GITHUB_ENV\necho \"FASTLANE_PASSWORD=${{ secrets.FASTLANE_PASSWORD }}\" >> $GITHUB_ENV\necho \"FASTLANE_SESSION=${{ secrets.FASTLANE_SESSION }}\" >> $GITHUB_ENV\necho \"XCODE_SERVER_URL=${{ secrets.XCODE_SERVER_URL }}\" >> $GITHUB_ENV\necho \"XCODE_PROJECT_PATH=YourProjectName.xcodeproj\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane your_lane_name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46938692_0", "jobs": [{"name": "fxcop_analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Ensure FxCop is installed. If using a specific version, adjust accordingly\nfxCopPath=\"C:\\Program Files (x86)\\Microsoft Code Analysis Tool\\FxCop 10.0\\FxCop.exe\"\nif (Test-Path $fxCopPath) {\n  & $fxCopPath /project \"path\\to\\your\\project.fxcop\" /output \"path\\to\\output\\results.xml\"\n} else {\n  Write-Host \"FxCop installation not found. Please install it or specify correct path.\"\n  exit 1\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/upload-sarif", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sarif_file", "value": "path/to/output/results.xml", "CIvars": []}]}]}]}
{"id": "46944606_0", "jobs": [{"name": "check_migrations", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:migrate:status RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "MIGRATION_COUNT=$(bundle exec rails db:migrate:status RAILS_ENV=test | grep -c 'down')\nif [ \"$MIGRATION_COUNT\" -ne 0 ]; then\n  echo \"There are pending migrations. Please migrate the database before merging.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if git diff --name-only HEAD^ | grep -q \"db/migrate/\"; then\n  echo \"Migration files have been added or modified. Please ensure there are no conflicting migrations.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46957272_1", "jobs": [{"name": "call_existing_job", "steps": []}]}
{"id": "46959091_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install the required WinRM module\nInstall-Package -Name PSWinRMLib\nImport-Module PSWinRMLib\n\n# Enable WinRM\nwinrm quickconfig -force\n\n# Create a new WinRM session\n$session = New-WinRMSession -ComputerName $env:WINRM_HOST -Credential (New-Object System.Management.Automation.PSCredential($env:WINRM_USER, (ConvertTo-SecureString $env:WINRM_PASSWORD -AsPlainText -Force)))\n\n# Ensure the SQL script executes remotely\nInvoke-Command -Session $session -ScriptBlock {\n    param($sqlScriptPath)\n\n    # Start SQLCMD to execute the SQL script\n    sqlcmd -S YOUR_SQL_SERVER_INSTANCE -U SQL_USER -P SQL_PASSWORD -d YOUR_DATABASE -i $sqlScriptPath\n} -ArgumentList $env:SQL_SCRIPT_PATH\n\n# Clean up sessions\nRemove-WinRMSession -Session $session\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "46975781_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t your-dockerhub-username/your-image-name:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker push your-dockerhub-username/your-image-name:latest", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-aks", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "resource-group", "value": "your-resource-group", "CIvars": []}, {"type": "arg", "name": "cluster-name", "value": "your-cluster-name", "CIvars": []}, {"type": "arg", "name": "service-principal-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "service-principal-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47003084_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t myapp:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run -d --name myapp-container -p 8080:80 myapp:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment steps go here. For example, you could copy files to a server or notify a service.\"\n# You can use curl commands to notify a service or deploy to a server here.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47038221_0", "jobs": [{"name": "upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios # Change to the directory where your Fastlane setup is\nfastlane match appstore --readonly # Sync your provisioning profiles\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios # Change to the directory where your Fastlane Fastfile is\nfastlane ios deploy # You should define this lane in your Fastfile to upload the app\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47047729_0", "jobs": [{"name": "label", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "review-needed", "CIvars": []}]}]}, {"name": "auto-close", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/stale", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "days-before-close", "value": 7, "CIvars": []}, {"type": "arg", "name": "stale-pr-message", "value": "This pull request has been automatically closed because it was inactive for more than 7 days.", "CIvars": []}]}]}]}
{"id": "47049510_0", "jobs": [{"name": "backup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install # If you're using composer for dependencies\n# Or you can add commands to install other dependencies if needed.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php backup.php # Assuming backup.php is your script that creates the backup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"github-actions\"\ngit config --local user.email \"github-actions@github.com\"\ngit add . # Make sure to add the correct path to your backup files if they are not in the root of the repo\ngit commit -m \"Weekly backup of the site\" || echo \"No changes to commit\" \ngit push ${PUSH_URL}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47052687_0", "jobs": [{"name": "check_files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "FILES_WITH_ISSUES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\\.(log|tmp|bak)$' || true)\necho \"files_with_issues<<EOF\" >> $GITHUB_ENV\necho \"$FILES_WITH_ISSUES\" >> $GITHUB_ENV\necho \"EOF\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "**Attention:** Some file types in this PR are not typically included in PRs, including:\n```\n${{ env.files_with_issues }}\n```\nPlease make sure to review and possibly remove these files before merging. Thank you!\n", "CIvars": [{"name": "files_with_issues", "expression": "env.files_with_issues", "type": "env"}]}]}]}]}
{"id": "47087751_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "1.1.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_SERVICE_NAME }}", "CIvars": [{"name": "AZURE_APP_SERVICE_NAME", "expression": "secrets.AZURE_APP_SERVICE_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEB_APP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEB_APP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEB_APP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "47231332_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # Change this line according to your package manager requirements\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test # Adjust this if you are using a different testing command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Adjust according to your build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint # Change this if you have a different linting command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "The CI for this pull request was successful! \ud83d\ude80\n- All tests passed.\n- Linting and build succeeded.\n", "CIvars": []}]}]}]}
{"id": "47290996_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cookstyle\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cookstyle\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47318302_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "${{ secrets.SMTP_SERVER }}", "CIvars": [{"name": "SMTP_SERVER", "expression": "secrets.SMTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Successful Build Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build has completed successfully!", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}]}]}]}
{"id": "47374187_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release -sdk iphoneos -archivePath ${{ github.workspace }}/build/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ${{ github.workspace }}/build/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -F \"file=@${{ github.workspace }}/build/YourApp.ipa\" $SERVER_URL --header \"Authorization: Bearer $API_KEY\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -rf ${{ github.workspace }}/build/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47394990_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g vercel\nvercel --prod --confirm --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "url=$(vercel list --project $VERCEL_PROJECT_ID --scope $VERCEL_ORG_ID --json | jq -r '.[0].url')\necho \"::set-output name=url::https://$url\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "gr2m/github-action-comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "\ud83c\udf89 Deployed successfully! You can view the deployment [here](${{ steps.get-url.outputs.url }})", "CIvars": [{"name": "get-url.outputs.url", "expression": "steps.get-url.outputs.url", "type": "steps"}]}]}]}]}
{"id": "47423167_0", "jobs": [{"name": "security-checks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g git-secrets\ngit secrets --install\ngit secrets --register-aws\ngit secrets --scan\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notify-action", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "A security check has failed. Please review the changes.", "CIvars": []}]}]}]}
{"id": "47441697_0", "jobs": [{"name": "request-reviews", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/request-review", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "user1,user2", "CIvars": []}, {"type": "arg", "name": "team_reviews", "value": "team-name", "CIvars": []}, {"type": "arg", "name": "message", "value": "Please review this pull request for any changes made.", "CIvars": []}]}]}]}
{"id": "47469392_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "{\"clientId\":\"${{ secrets.AZURE_CLIENT_ID }}\",\"clientSecret\":\"${{ secrets.AZURE_CLIENT_SECRET }}\",\"tenantId\":\"${{ secrets.AZURE_TENANT_ID }}\"}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}, {"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}, {"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to Azure App Service successful!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47495785_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "helm-version", "value": "v3.7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBECONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm repo add my-helm-repo https://my-helm-repo-url\nhelm repo update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-release my-helm-repo/my-chart \\\n  --namespace my-namespace \\\n  --set image.tag=${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/my-release -n my-namespace\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47513798_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "47515697_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # This runs your tests locally; modify based on your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.test.outcome }}\" == \"success\" ]; then\n  echo \"Tests passed!\";\n  echo \"Tests passed!\" >> $GITHUB_ENV;\nelse\n  echo \"Tests failed!\";\n  echo \"Tests failed!\" >> $GITHUB_ENV;\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-status", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": "Test Results", "CIvars": []}, {"type": "arg", "name": "state", "value": "${{ steps.test.outcome == 'success' && 'success' || 'failure' }}", "CIvars": [{"name": "test.outcome", "expression": "steps.test.outcome == 'success' && 'success' || 'failure'", "type": "steps"}, {"name": "test.outcome", "expression": "steps.test.outcome", "type": "steps"}]}, {"type": "arg", "name": "description", "value": "${{ env.TEST_RESULT || 'No tests run' }}", "CIvars": [{"name": "TEST_RESULT", "expression": "env.TEST_RESULT || 'No tests run'", "type": "env"}, {"name": "TEST_RESULT", "expression": "env.TEST_RESULT", "type": "env"}]}, {"type": "arg", "name": "target_url", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "CIvars": [{"name": "server_url", "expression": "github.server_url", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "47521768_0", "jobs": [{"name": "check_changes", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Changed files in this pull request:\"\ngit diff --name-only origin/main...HEAD > changed_files.txt\ncat changed_files.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "## Changed files in this PR:\n```\n$(cat changed_files.txt)\n```\n", "CIvars": []}]}]}]}
{"id": "47553828_0", "jobs": [{"name": "sync-settings", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clone the settings repo\ngit clone https://YOUR_USERNAME:${{ secrets.PHPSTORM_TOKEN }}@github.com/YOUR_USERNAME/your-phpstorm-settings-repo.git settings_repo\n\n# Copy settings from the cloned repo to your project (customize this path)\ncp -r settings_repo/.idea ./\n\n# Optionally commit the changes (if you want to push any local changes)\ngit config --global user.name 'Your Name'\ngit config --global user.email 'youremail@example.com'\n\n# Check for changes and commit\ngit add .idea\ngit commit -m \"Update PHPStorm settings\" || echo \"No changes to commit\"\n\n# Push changes back to the settings repo\ngit push origin main  # Change to the correct branch if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47578215_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane -NV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$P12_CERTIFICATE\" | base64 --decode > certificate.p12\nsecurity create-keychain -p \"\" build.keychain\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity import certificate.p12 -P \"$CERTIFICATE_PASSWORD\" -A\nsecurity set-identity-preference -p \"iPhone Developer\" \"iPhone Distribution\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath path/to/your/archive.xcarchive -exportPath output/path -exportOptionsPlist ExportOptions.plist\n# Ensure `ExportOptions.plist` is properly configured for your app.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install xcpretty", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47659503_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, soap, intl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47663315_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "ionCube Loader", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47690281_0", "jobs": [{"name": "determine-branches", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Get the pull request number and repository context\nPR_NUMBER=${{ github.event.number }}\nREPO=${{ github.repository }}\n\n# Use GitHub CLI to get the pull request details\nPR_INFO=$(gh pr view $PR_NUMBER --json base,head --jq '.base.ref + \" -> \" + .head.ref')\n\necho \"PR_INFO=$PR_INFO\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Branches involved in the merge: $PR_INFO\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47724375_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f \".github/minitest_seed\" ]; then\n  SEED=$(cat .github/minitest_seed)\n  echo \"Using previously recorded seed: $SEED\"\nelse\n  SEED=$RANDOM\n  echo \"No previous seed found. Using random seed: $SEED\"\nfi\n\n# Run the tests with the seed\nif bundle exec rake test TESTOPTS=\"--seed=$SEED\"; then\n  echo $SEED > .github/minitest_seed\nelse\n  echo \"Tests failed.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optionally you can remove seed file depending on your needs\n# rm .github/minitest_seed\necho \"CI completed successfully.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47798470_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/bundle", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gems-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"MATCH_PASSWORD=${{ secrets.MATCH_PASSWORD }}\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane <lane_name>", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "47827457_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.1, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:migrate RAILS_ENV=test\nbundle exec rake test # Adjust accordingly if using RSpec or other test frameworks\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=production bundle exec rake assets:precompile\n# Add more build steps as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "tar -czf app.tar.gz -C public/assets .\ntar -czf app.tar.gz -C . .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-credentials", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Upload the application version to S3\naws s3 cp app.tar.gz s3://$S3_BUCKET/\n\n# Create a new application version\nVERSION_LABEL=$(date +%Y%m%d%H%M%S)\naws elasticbeanstalk create-application-version \\\n  --application $APP_NAME \\\n  --version-label $VERSION_LABEL \\\n  --source-bundle S3Bucket=$S3_BUCKET,S3Key=app.tar.gz\n\n# Update the environment to use the new version\naws elasticbeanstalk update-environment \\\n  --environment-name $ENV_NAME \\\n  --version-label $VERSION_LABEL\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48023476_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "gameci/unity-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2020.3.15f2", "CIvars": []}, {"type": "arg", "name": "licenseEmail", "value": "${{ secrets.UNITY_EMAIL }}", "CIvars": [{"name": "UNITY_EMAIL", "expression": "secrets.UNITY_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "licensePassword", "value": "${{ secrets.UNITY_PASSWORD }}", "CIvars": [{"name": "UNITY_PASSWORD", "expression": "secrets.UNITY_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "unity -batchmode -nographics -quit -projectPath . -executeMethod BuildScript.PerformBuild -buildTarget ${{ secrets.BUILD_TARGET }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "UnityBuild", "CIvars": []}, {"type": "arg", "name": "path", "value": "Build/", "CIvars": []}]}]}]}
{"id": "48049943_0", "jobs": [{"name": "serialize-builds", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.30.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az devops project configure --name YourProjectName\naz pipelines run --name YourPipelineName --branch ${{ github.ref }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48075803_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/actions-setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, intl, pdo, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=${{ secrets.DATABASE_URL }}\" >> .env\necho \"API_KEY=${{ secrets.API_KEY }}\" >> .env # Add other environment variables as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm .env", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48096814_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane test  # Adjust to your testing lane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta  # Adjust to your TestFlight deployment lane\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48149375_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "fivetanley/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  export LANG=en_US.UTF-8\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme ${{ matrix.target }} \\\n           -sdk iphoneos \\\n           -configuration Release \\\n           -derivedDataPath build \\\n           CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme ${{ matrix.target }} \\\n           -sdk iphoneos \\\n           -configuration Release \\\n           -archivePath build/${{ matrix.target }}.xcarchive \\\n           archive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "${{ matrix.target }}-build", "CIvars": [{"name": "target", "expression": "matrix.target", "type": "matrix"}]}, {"type": "arg", "name": "path", "value": "build/${{ matrix.target }}.xcarchive", "CIvars": [{"name": "target", "expression": "matrix.target", "type": "matrix"}]}]}]}]}
{"id": "48174570_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gem install capistrano\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cap production deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48181249_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, xml, curl, zip, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -O https://wordpress.org/latest.tar.gz\ntar -xzf latest.tar.gz\nrm latest.tar.gz\nmv wordpress/* /tmp/wordpress/ || true\nrm -rf /tmp/wordpress/wp-content/plugins/\ncp -r . /tmp/wordpress/wp-content/plugins/your-plugin-name/\ncd /tmp/wordpress/wp-content/plugins/your-plugin-name/\nComposer install --no-dev\nbash bin/install-wp-tests.sh wordpress_test user password localhost $DB_NAME\n./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script phpcs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48247131_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "workflow-cli/action-pr-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "Thank you for your contribution! We will review it shortly.", "CIvars": []}]}]}]}
{"id": "4826013_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dart-lang/setup-dart", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart pub global activate stagehand", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart analyze", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart run build_runner build --delete-conflicting-outputs", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48320858_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec kitchen test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48322247_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "cd part1  # Example for part1, add other parts appropriately\nnpm run build\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Here you can add your deployment commands, e.g., using rsync, scp, or specific deployment tools\necho \"Deploying ${{ github.ref_name }} to production server\"\n# Example command could look like:\n# rsync -avz ./part1/dist/ user@server:/path/to/deploy/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48337826_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install carthage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "carthage bootstrap --platform iOS\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme archive -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourProject.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $GITHUB_WORKSPACE/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourProject-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "$GITHUB_WORKSPACE/build/*", "CIvars": []}]}]}]}
{"id": "4844471_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test:integration # modify to your actual command to run integration tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rake test # replace with your actual Rails test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48467464_0", "jobs": [{"name": "add-folders", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "matlab-actions/setup-matlab", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "matlab-version", "value": "R2023a", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Define the folders to add\nFOLDERS_TO_ADD=(\"folder1\" \"folder2\" \"folder3\")  # Change these to your specified folders\n\n# Add each folder to Git\nfor folder in \"${FOLDERS_TO_ADD[@]}\"; do\n  if [ -d \"$folder\" ]; then  # Check if the directory exists\n    git add \"$folder\"\n    echo \"Added $folder to Git\"\n  else\n    echo \"Directory $folder does not exist, skipping.\"\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"example@example.com\"  # Use your email\ngit config --local user.name \"GitHub Action\"          # Use a relevant name\ngit commit -m \"Add specified MATLAB folders\" || echo \"No changes to commit\"\ngit push origin main  # Change to your target branch name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48541646_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./mvnw clean package # Adjust based on your build system\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p deployment\ncp target/myapp-*.jar deployment/ # Adjust filename based on your output JAR\ncp appspec.yml deployment/\ncp -R scripts/ deployment/ # If you have deployment scripts\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd deployment\nzip -r ../deployment.zip . \ncd ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/s3-sync", "version": "v0.0.8", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "aws-actions/aws-cli-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "deploy create-deployment --application-name my-application --deployment-group-name my-deployment-group --s3-location bucket=your-s3-bucket-name,key=deployment.zip,bundleType=zip", "CIvars": []}]}]}]}
{"id": "48609885_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy-site-a", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm run build --prefix ./site-a", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourSiteAAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE_SITE_A }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE_SITE_A", "expression": "secrets.AZURE_PUBLISH_PROFILE_SITE_A", "type": "secret"}]}]}]}, {"name": "deploy-site-b", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm run build --prefix ./site-b", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourSiteBAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE_SITE_B }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE_SITE_B", "expression": "secrets.AZURE_PUBLISH_PROFILE_SITE_B", "type": "secret"}]}]}]}]}
{"id": "48612676_0", "jobs": [{"name": "clone-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Rscript -e \"install.packages('git2r')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"library(git2r); \n            repo <- clone('https://github.com/username/source_repo.git', local_path = 'source_repo')\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48703263_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore YourAspNetCoreProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourAspNetCoreProject.sln --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourAspNetCoreProject.sln --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourAngularProjectFolder\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourAngularProjectFolder\nnpm run build --prod\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish YourAspNetCoreProject/YourAspNetCoreProject.csproj -c Release -o ./output\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -r YourAngularProjectFolder/dist/YourAngularProjectName/* ./output/\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAzureAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "48757402_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST https://packagist.org/api/update-package?username=yourusername \\\n-d \"{\\\"repository\\\": \\\"https://github.com/${{ github.repository }}\\\"}\" \\\n-H \"X-Accept: application/vnd.packagist+json\" \\\n-H \"Authorization: Bearer $PACKAGIST_API_TOKEN\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Publishing to GitHub Packages...\"\ncomposer config --global github-oauth.github.com ${{ secrets.GITHUB_TOKEN }}\ncomposer publish --no-interaction\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48803245_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-build", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.15f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneLinux64", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Library", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-unity-${{ hashFiles('**/*.csproj', '**/packages-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-unity-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "/opt/unity/Editor/Unity -quit -batchmode -nographics -logFile -projectPath ${{ github.workspace }} -buildTarget StandaloneLinux64 -executeMethod BuildScript.PerformBuild -buildPath ${{ github.workspace }}/Build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "/opt/unity/Editor/Unity -quit -batchmode -nographics -logFile -projectPath ${{ github.workspace }} -executeMethod YourTestRunnerNamespace.YourTestRunnerClass.RunAllTests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "UnityBuild", "CIvars": []}, {"type": "arg", "name": "path", "value": "Build/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"The build was successful! Your build is available in the artifacts. \ud83c\udf89\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48844221_0", "jobs": [{"name": "persist-notebook", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-clients", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Install required tools\nsudo apt-get install -y curl jq\n\n# Define HDInsight REST API endpoint\nBASE_URL=\"https://${HDINSIGHT_CLUSTER_NAME}.azurehdinsight.net\"\n\n# Get the access token\nTOKEN=$(az account get-access-token --resource=https://azurehdinsight.net --query accessToken -o tsv)\n\n# Upload notebooks\nfor notebook in ${NOTEBOOK_PATH}/*.ipynb; do\n  FILE_NAME=$(basename \"$notebook\")\n  echo \"Uploading $FILE_NAME to HDInsight...\"\n\n  curl -X PUT \"$BASE_URL/spark/jobs/notebook/containers/default/notebooks/$FILE_NAME\" \\\n    -H \"Authorization: Bearer $TOKEN\" \\\n    -H \"Content-Type: application/json\" \\\n    --data-binary @\"$notebook\"\n\n  echo \"$FILE_NAME uploaded successfully.\"\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48879294_0", "jobs": [{"name": "upload_to_testflight", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your build command here if you want to build the .ipa within the workflow.\n# Example: Fastlane build command\nfastlane build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload -u \"${{ secrets.APP_STORE_CONNECT_API_KEY }}\" -i ${{ secrets.APP_FILE_PATH }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48882426_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcc-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y g++ make  # Install necessary tools if not present\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "make test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48897758_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r codeigniter.zip .  # Archive the entire project\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "appleboy/scp-action", "version": "v0.1.7", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SFTP_HOST }}", "CIvars": [{"name": "SFTP_HOST", "expression": "secrets.SFTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SFTP_USERNAME }}", "CIvars": [{"name": "SFTP_USERNAME", "expression": "secrets.SFTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SFTP_PASSWORD }}", "CIvars": [{"name": "SFTP_PASSWORD", "expression": "secrets.SFTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.SFTP_PORT }}", "CIvars": [{"name": "SFTP_PORT", "expression": "secrets.SFTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "source", "value": "codeigniter.zip", "CIvars": []}, {"type": "arg", "name": "target", "value": "/path/to/deployment/folder/codeigniter.zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sshpass -p ${{ secrets.SFTP_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }} \"unzip /path/to/deployment/folder/codeigniter.zip -d /path/to/deployment/folder/\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sshpass -p ${{ secrets.SFTP_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }} \"rm /path/to/deployment/folder/codeigniter.zip\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48898884_0", "jobs": [{"name": "update-run-list", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife node run_list add $NODE_NAME $RUN_LIST\nknife node show $NODE_NAME  # Optional: Verify the run list has been updated\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "48968335_0", "jobs": [{"name": "coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# You can download dotCover from JetBrains or use a specific version\n# Adjust the version based on your needs\nwget https://download.jetbrains.com/resharper/dotCover/dotCover-2023.1.1.exe -O dotCover.exe\nstart /wait dotCover.exe /S\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotCover.exe cover \\\n  \"dotnet test ./path/to/your/test/project1.csproj --configuration Release --no-build --collect:\"XPlat Code Coverage\"\" \\\n  --output=\"coverage1.dcvr\" \\\n  --ProjectName=\"TestProject1\"\n\ndotCover.exe cover \\\n  \"dotnet test ./path/to/your/test/project2.csproj --configuration Release --no-build --collect:\"XPlat Code Coverage\"\" \\\n  --output=\"coverage2.dcvr\" \\\n  --ProjectName=\"TestProject2\"\n\n# Add more test projects as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotCover.exe report \\\n  --input=\"coverage1.dcvr\" \\\n  --output=\"combinedReport.html\" \\\n  --outputFormat=\"HTML\"\n\ndotCover.exe report \\\n  --input=\"coverage2.dcvr\" \\\n  --output=\"combinedReport.html\" \\\n  --outputFormat=\"HTML\" \\\n  --merge=\"true\"\n\n# Adjust the paths and variables according to your projects\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "dotCover Coverage Report", "CIvars": []}, {"type": "arg", "name": "path", "value": "combinedReport.html", "CIvars": []}]}]}]}
{"id": "49041231_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift package resolve\nif [ -f \"Podfile\" ]; then\n  sudo gem install cocoapods\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49081876_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"  # Replace with your deployment script/commands\n# e.g. scp, rsync, etc.\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "pull_request_checks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running additional checks for pull requests...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49232224_0", "jobs": [{"name": "process-tags", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the current tag\n$currentTag = $(git describe --tags --abbrev=0)\nWrite-Host \"Current Git Tag: $currentTag\"\n\n# You can add more logic here to handle the tag\n# For example, you can create a release or run specific scripts based on the tag\nif ($currentTag -eq 'v1.0.0') {\n  Write-Host \"Deploying version 1.0.0...\"\n  # Add deploy commands here\n} elseif ($currentTag -eq 'v1.1.0') {\n  Write-Host \"Deploying version 1.1.0...\"\n  # Add different deploy commands here\n} else {\n  Write-Host \"No deployment actions for tag: $currentTag\"\n}\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "49262370_0", "jobs": [{"name": "check-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$KUBE_CONFIG\" | base64 --decode > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Validate the Kubernetes manifests\nkubectl apply --dry-run=client -f k8s-manifests/  # Adjust the path to your manifests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Store current deployment state\nkubectl get deployments -o yaml > current_deployment.yaml\n\n# Store desired state (what's being applied)\nkubectl apply --dry-run=client -f k8s-manifests/ -o yaml > desired_deployment.yaml\n\n# Compare current and desired states\n# Check if there are changes\nif ! diff <(cat current_deployment.yaml | grep -v 'resourceVersion:' | grep -v 'creationTimestamp:') <(cat desired_deployment.yaml | grep -v 'resourceVersion:' | grep -v 'creationTimestamp:'); then\n  echo \"Changes detected\"\n  echo \"::set-output name=changes::true\"\nelse\n  echo \"No changes detected\"\n  echo \"::set-output name=changes::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Apply the changes to the cluster\nkubectl apply -f k8s-manifests/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49286193_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --bootstrap vendor/autoload.php tests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Commands to deploy your application\necho \"Deploying application...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49344402_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, zip, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"APP_KEY=${{ secrets.APP_KEY }}\" >> .env\necho \"DB_CONNECTION=${{ secrets.DB_CONNECTION }}\" >> .env\necho \"DB_HOST=${{ secrets.DB_HOST }}\" >> .env\necho \"DB_PORT=${{ secrets.DB_PORT }}\" >> .env\necho \"DB_DATABASE=${{ secrets.DB_DATABASE }}\" >> .env\necho \"DB_USERNAME=${{ secrets.DB_USERNAME }}\" >> .env\necho \"DB_PASSWORD=${{ secrets.DB_PASSWORD }}\" >> .env\n\n# Add your GitHub OAuth tokens\necho \"GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}\" >> .env\necho \"GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan db:seed --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan config:cache", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan route:cache", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49374616_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t myapp:staging -f Dockerfile.staging .\ndocker push myapp:staging\ndocker build -t myapp:production -f Dockerfile.production .\ndocker push myapp:production\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy-staging", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 --decode > kubeconfig\nexport KUBECONFIG=$(pwd)/kubeconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/myapp myapp=myapp:staging\nkubectl rollout status deployment/myapp\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy-production", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 --decode > kubeconfig\nexport KUBECONFIG=$(pwd)/kubeconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/myapp myapp=myapp:production\nkubectl rollout status deployment/myapp\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49396697_0", "jobs": [{"name": "build_and_sign", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Use Homebrew or your package manager to install dependencies\nbrew install cocoapods # Example, adjust as needed\npod install # If using CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -configuration Release CODE_SIGN_IDENTITY=\"iPhone Distribution: Your Certificate Name\" CODE_SIGNING_REQUIRED=YES CODE_SIGN_STYLE=Automatic CODE_SIGN_ENTITLEMENTS=YourApp/YourApp.entitlements\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify your application and extension here\nAPP_PATH=\"build/YourApp.app\"\nEXTENSION_PATH=\"build/YourApp.app/Contents/PlugIns/YourExtension.appex\"\n\n# Ensure that both the app and extension are signed\ncodesign --deep --force --verify --verbose --sign \"iPhone Distribution: Your Certificate Name\" \"$APP_PATH\"\ncodesign --force --verify --verbose --sign \"iPhone Distribution: Your Certificate Name\" \"$EXTENSION_PATH\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "codesign --verify --deep --strict --verbose=2 \"$APP_PATH\"\ncodesign --verify --deep --strict --verbose=2 \"$EXTENSION_PATH\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "productbuild --component \"$APP_PATH\" /Applications \"YourApp.pkg\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.pkg", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourApp.pkg", "CIvars": []}]}]}]}
{"id": "49470279_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-hugo", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "hugo-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y apache2-utils  # Install htpasswd utility\necho \"${{ secrets.PASSWORD }}\" | htpasswd -iBc ./public/.htpasswd ${{ secrets.USERNAME }}  # Create htpasswd file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "hugo --baseURL=${{ github.pages_url }} --destination=public\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp ./public/.htpasswd ./public/.htaccess\necho \"AuthType Basic\" >> ./public/.htaccess\necho \"AuthName \\\"Restricted Content\\\"\" >> ./public/.htaccess\necho \"AuthUserFile /path/to/your/.htpasswd\" >> ./public/.htaccess\necho \"Require valid-user\" >> ./public/.htaccess\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}]}]}]}
{"id": "49588674_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Some tests failed.\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": ":warning: Some checks failed. Please fix the issues before merging.\n", "CIvars": []}]}]}]}
{"id": "49596220_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.your-email-provider.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "GitHub Notification - Action Triggered", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nThere has been a new update in the repository.\n\n- Event: ${{ github.event_name }}\n- Repository: ${{ github.repository }}\n- Commit: ${{ github.sha }}\n\nBest regards,\nGitHub Actions\n", "CIvars": [{"name": "event_name", "expression": "github.event_name", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient-email@example.com", "CIvars": []}]}]}]}
{"id": "49645574_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the variables for the packaging process\n$scriptName = \"YourPowerShellScript.ps1\"\n$moduleName = \"YourModule\"\n$outputDir = \"output\"\n$zipFileName = \"$moduleName.zip\"\n\n# Ensure the output directory exists\nNew-Item -ItemType Directory -Force -Path $outputDir\n\n# Copy the script to the output directory\nCopy-Item -Path $scriptName -Destination \"$outputDir\\$scriptName\"\n\n# Optionally create a module manifest for PowerShell modules\n$moduleManifestPath = \"$outputDir\\$moduleName.psd1\"\nNew-ModuleManifest -Path $moduleManifestPath -RootModule \"$scriptName\" -Author \"Your Name\" -CompanyName \"Your Company\" -Description \"Your Module Description\"\n\n# Compress the output directory\nRemove-Item \"$outputDir\\$zipFileName\" -ErrorAction SilentlyContinue  # Remove existing zip if present\nCompress-Archive -Path \"$outputDir\\*\" -DestinationPath \"$outputDir\\$zipFileName\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "PowerShell Package", "CIvars": []}, {"type": "arg", "name": "path", "value": "output/YourModule.zip", "CIvars": []}]}]}]}
{"id": "49733441_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/Library/Caches/CocoaPods\nPods/\nPodfile.lock\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pod-cache-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pod-cache-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install --repo-update", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Debug CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO -destination platform=iOS Simulator,name=iPhone 13,OS=latest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourApp -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49771303_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}, {"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic ${{ secrets.ADO_CREDENTIALS }}\" \\\n  -d '{\n    \"text\": \"Deploy successful for commit ${{ github.sha }}. Check it out at ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\"\n  }' \\\n  https://dev.azure.com/{organization}/{project}/_apis/chat/threads?api-version=6.0\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4988238_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev # Assuming you are using Composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start the SSH agent and add your private key\neval \"$(ssh-agent -s)\"\necho \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\n# Copy files to the remote server using rsync\nrsync -r --delete --exclude='.git*' --exclude='vendor/' ./ \"${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_PATH }}\"\n# SSH into the server to run any additional commands (e.g. migration)\nssh -o StrictHostKeyChecking=no \"${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}\" \"cd ${REMOTE_PATH} && php artisan migrate --force\" # Example for Laravel\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "eval \"$(ssh-agent -k)\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "4988971_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml  # Set up database config for CI\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rails db:create RAILS_ENV=test\nbundle exec rails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Adjust this if you are using a different testing framework (e.g. Minitest)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm config/database.yml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "49892102_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/devops-cli-action", "version": "v0.1.0", "shell": "bash", "with": [{"type": "arg", "name": "azdevops-project-url", "value": "${{ secrets.AZURE_DEVOPS_PROJECT_URL }}", "CIvars": [{"name": "AZURE_DEVOPS_PROJECT_URL", "expression": "secrets.AZURE_DEVOPS_PROJECT_URL", "type": "secret"}]}, {"type": "arg", "name": "azdevops-personal-access-token", "value": "${{ secrets.AZURE_DEVOPS_PAT }}", "CIvars": [{"name": "AZURE_DEVOPS_PAT", "expression": "secrets.AZURE_DEVOPS_PAT", "type": "secret"}]}, {"type": "arg", "name": "command", "value": "az pipelines run --name <your-pipeline-name>", "CIvars": []}]}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/comments", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Deployment to Azure DevOps completed successfully! \ud83d\ude80\nIf you have any questions, feel free to reach out to external collaborators.\n", "CIvars": []}]}]}]}
{"id": "50050808_0", "jobs": [{"name": "migrations-and-seeds", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, gd, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sed -i \"s/DB_CONNECTION=mysql/DB_CONNECTION=mysql/g\" .env\nsed -i \"s/DB_DATABASE=laravel/DB_DATABASE=your_database_name/g\" .env \nsed -i \"s/DB_USERNAME=root/DB_USERNAME=root/g\" .env\nsed -i \"s/DB_PASSWORD=/DB_PASSWORD=root/g\" .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {30..0}; do\n  if mysql -h 127.0.0.1 -u root -proot -e 'select 1'; then\n    break\n  fi\n  echo 'Waiting for MySQL...'\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan db:seed", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan make:migration create_example_table", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan make:seeder ExampleSeeder", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add database/migrations/* database/seeders/*\ngit commit -m \"Add new migration and seed files\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50062839_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, mysqli, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Testing database connection...\"\nphp -r \"require 'path/to/CodeIgniter.php'; \\$db = \\Config\\Database::connect(getenv('DB_CONNECTION_GROUP'));\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50128549_0", "jobs": [{"name": "phpcs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=files::$(git diff --name-only HEAD^ HEAD | grep '\\.php$' | tr '\\n' ' ')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -n \"${{ steps.changed-files.outputs.files }}\" ]; then\n  vendor/bin/phpcs --standard=PSR2 ${{ steps.changed-files.outputs.files }}\nelse\n  echo \"No PHP files changed.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50216116_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake || { echo 'Rake failed'; exit 1; }\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50227342_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # or yarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # or your specific build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "4.1.2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GH_TOKEN }}", "CIvars": [{"name": "GH_TOKEN", "expression": "secrets.GH_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "50260610_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shufo/ssh-publish-action", "version": "v0.3.0", "shell": "bash", "with": [{"type": "arg", "name": "ssh-server", "value": "${{ secrets.SSH_SERVER }}", "CIvars": [{"name": "SSH_SERVER", "expression": "secrets.SSH_SERVER", "type": "secret"}]}, {"type": "arg", "name": "ssh-user", "value": "${{ secrets.SSH_USER }}", "CIvars": [{"name": "SSH_USER", "expression": "secrets.SSH_USER", "type": "secret"}]}, {"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "local-path", "value": "./dist/", "CIvars": []}, {"type": "arg", "name": "remote-path", "value": "/var/www/html", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} \"cd /var/www/html && rm -rf ./*\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50395749_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_credentials", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ORGANIZATION=\"your-org\"\nPROJECT=\"your-project\"\nRELEASE_ID=\"your-release-id\" # You can pass this as an input parameter\n\n# Use the Azure DevOps REST API to fetch the release variables\nRESPONSE=$(az devops release variable list --release-id $RELEASE_ID --project $PROJECT --org https://dev.azure.com/$ORGANIZATION --output json)\n\n# Parse the response to get the variables in a usable format\necho \"::set-output name=variables::$RESPONSE\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying your app...\"  # Add your deployment commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50482997_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const context = github.context;\nconst status = '${{ steps.run-tests.outcome }}' === 'success' ? 'success' : 'failure';\nconst params = {\n  ...context.repo,\n  state: status,\n  description: status === 'success' ? 'All tests passed!' : 'Some tests failed.',\n  context: 'CI'\n};\nawait github.repos.createCommitStatus(params);\n", "CIvars": [{"name": "run-tests.outcome", "expression": "steps.run-tests.outcome", "type": "steps"}]}]}]}]}
{"id": "50497126_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2022.2.1f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneLinux64", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": "./YourProjectName", "CIvars": []}, {"type": "arg", "name": "artifactsPath", "value": "./builds", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build complete, artifacts located in ${{ github.workspace }}/builds\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Unity-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./builds", "CIvars": []}]}]}]}
{"id": "50549519_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/php-cs-fixer fix --dry-run --diff\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50645634_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd path/to/web-project-1\nnpm install\nnpm run build # Adjust if using a specific build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name-1", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.PUBLISH_PROFILE1 }}", "CIvars": [{"name": "PUBLISH_PROFILE1", "expression": "secrets.PUBLISH_PROFILE1", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "path/to/web-project-1/build", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd path/to/web-project-2\nnpm install\nnpm run build # Adjust if using a specific build command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name-2", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.PUBLISH_PROFILE2 }}", "CIvars": [{"name": "PUBLISH_PROFILE2", "expression": "secrets.PUBLISH_PROFILE2", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "path/to/web-project-2/build", "CIvars": []}]}]}]}
{"id": "50729735_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "persist-credentials", "value": false, "CIvars": []}, {"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "r", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('remotes')\nremotes::install_github('your_org/your_private_package', auth_token = '${{ secrets.GITHUB_PAT }}')\n# Install other necessary packages\ninstall.packages(c('shiny', 'shinydashboard', 'your_other_packages'))\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "install.packages('rsconnect')\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name = Sys.getenv(\"SHINYAPPS_USERNAME\"), \n                          token = Sys.getenv(\"SHINYAPPS_TOKEN\"), \n                          secret = Sys.getenv(\"SHINYAPPS_SECRET\"))\nrsconnect::deployApp(appDir = 'path/to/your/app',  # Replace with the path to your app\n                     appName = 'your_app_name',  # Replace with your app name\n                     server = 'shinyapps.io')\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50734520_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -L https://omnitruck.chef.io/install.sh | sudo bash\nsource /opt/chefdk/bin/chef shell-init bash\nchef gem install knife-solo\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.chef\necho \"node_name 'YOUR_NODE_NAME'\" > ~/.chef/knife.rb\necho \"chef_server_url 'https://YOUR_CHEF_SERVER_URL/organizations/YOUR_ORG_NAME'\" >> ~/.chef/knife.rb\necho \"client_key '/path/to/your/client.pem'\" >> ~/.chef/knife.rb\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for WORKSTATION in workstation1 workstation2 workstation3; do\n  echo \"Deploying to $WORKSTATION\"\n  knife solo cook $WORKSTATION\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50749095_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "registry", "value": "<YOUR_ACR_NAME>.azurecr.io", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.ACR_USERNAME }}", "CIvars": [{"name": "ACR_USERNAME", "expression": "secrets.ACR_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.ACR_PASSWORD }}", "CIvars": [{"name": "ACR_PASSWORD", "expression": "secrets.ACR_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "<YOUR_ACR_NAME>.azurecr.io/<YOUR_IMAGE_NAME>:${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "kubeconfig", "value": "${{ secrets.KUBECONFIG }}", "CIvars": [{"name": "KUBECONFIG", "expression": "secrets.KUBECONFIG", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/<YOUR_DEPLOYMENT_NAME> <YOUR_CONTAINER_NAME>=<YOUR_ACR_NAME>.azurecr.io/<YOUR_IMAGE_NAME>:${{ github.sha }}\nkubectl rollout status deployment/<YOUR_DEPLOYMENT_NAME>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50755777_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-cli-action", "version": "v1.1.1", "shell": "bash", "with": [{"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "options", "value": "--version", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Define your environment variables here\nheroku config:set ENV_VAR_NAME1=value1 --app your-heroku-app-name\nheroku config:set ENV_VAR_NAME2=value2 --app your-heroku-app-name\n# Add more as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/your-heroku-app-name.git\ngit commit --allow-empty -m \"Trigger Heroku deployment\"\ngit push heroku main --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50768300_0", "jobs": [{"name": "generate_report", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g release-it\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "release-it --ci --dry-run --no-npm --no-github --no-verify --no-publish --verbose | tee release-readiness-report.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "release-readiness-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "release-readiness-report.txt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "Release readiness report generated successfully.", "CIvars": []}]}]}]}
{"id": "50781553_0", "jobs": [{"name": "take_ownership", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "hmarr/auto-assign", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "reviewers", "value": "username1\nusername2\n", "CIvars": []}]}]}]}
{"id": "50847081_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "user/secondary-repo", "CIvars": []}, {"type": "arg", "name": "path", "value": "secondaryRepo", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd secondaryRepo\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/YourProject.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourProject-Artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourProject.xcarchive", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"CI Process Completed Successfully\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "50868292_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest tests/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "from", "value": "your_email@example.com", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "CI Pipeline Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The pipeline has completed.\n\nGlobal Variable Value: ${{ env.GLOBAL_VARIABLE }}\n\nCheck the [Actions workflow](https://github.com/your_username/your_repository/actions) for more details.\n", "CIvars": [{"name": "GLOBAL_VARIABLE", "expression": "env.GLOBAL_VARIABLE", "type": "env"}]}]}]}]}
{"id": "50991584_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Reviewing the changes...\"\n# You can add other review-related commands or scripts here, or just echo\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unsplash/rate-limit-action", "version": "v1.0.2", "shell": "bash", "with": [{"type": "arg", "name": "GITHUB_TOKEN", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "review_commit", "value": true, "CIvars": []}, {"type": "arg", "name": "message", "value": "Linting and Tests passed, ready for review!", "CIvars": []}, {"type": "arg", "name": "add_comment", "value": true, "CIvars": []}]}]}]}
{"id": "51020085_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n# Install any other dependencies your project might have\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.SSH_PRIVATE_KEY }}\" > private_key\nchmod 600 private_key\necho \"Host jump-server\" >> ~/.ssh/config\necho \"  HostName ${{ secrets.JUMP_SERVER_HOST }}\" >> ~/.ssh/config\necho \"  User ${{ secrets.JUMP_SERVER_USER }}\" >> ~/.ssh/config\necho \"  IdentityFile ~/private_key\" >> ~/.ssh/config\necho \"Host target-server\" >> ~/.ssh/config\necho \"  HostName ${{ secrets.TARGET_SERVER_HOST }}\" >> ~/.ssh/config\necho \"  User ${{ secrets.TARGET_SERVER_USER }}\" >> ~/.ssh/config\necho \"  ProxyJump jump-server\" >> ~/.ssh/config\necho \"  IdentityFile ~/private_key\" >> ~/.ssh/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cap production deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51022459_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "ftp-server", "value": "ftp://<your-ftp-server>", "CIvars": []}, {"type": "arg", "name": "ftp-username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "ftp-password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": ".", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/website/", "CIvars": []}]}]}]}
{"id": "51037239_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd, zip, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "enable_dl=Off", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer validate --no-check-lock", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -R web ../drupal\ncd ../drupal\ncomposer install --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo service mariadb start\nsudo mysql -e \"CREATE DATABASE $DB_NAME;\"\nsudo mysql -e \"CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';\"\nsudo mysql -e \"GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';\"\nsudo mysql -e \"FLUSH PRIVILEGES;\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ../drupal\nvendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"\n~/.composer/vendor/bin/phpcs --standard=PSR2 -a web/modules src/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51054464_0", "jobs": [{"name": "update-package", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "PACKAGE_NAME=\"vendor/package-name\" # Replace with the actual package name\nNEW_VERSION=\"1.2.3\" # Replace with the new version you want\n\n# Use jq to update the version in composer.json\njq --arg pkg \"$PACKAGE_NAME\" --arg ver \"$NEW_VERSION\" \\\n  '.require[$pkg] = $ver' composer.json > tmp.json && mv tmp.json composer.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit diff composer.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git add composer.json\ngit commit -m \"Update $PACKAGE_NAME to version $NEW_VERSION\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51077628_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azureCredentials", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "cat <<EOF > pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dynamic-pod-${{ github.run_id }}\n  labels:\n    app: dynamic-app\nspec:\n  containers:\n  - name: app-container\n    image: your-docker-image:latest\n    ports:\n    - containerPort: 80\nEOF\necho \"::set-output name=pod_yaml::$(cat pod.yaml)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ steps.pod-yaml.outputs.pod_yaml }}\" | kubectl apply -f -\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl delete pod dynamic-pod-${{ github.run_id }} || true\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51082826_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "azure-web-app-name", "value": "your-web-app-name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "51084717_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CREDENTIALS }}\" > azure_creds.json\naz login --service-principal --username $(jq -r .clientId azure_creds.json) --password $(jq -r .clientSecret azure_creds.json) --tenant $(jq -r .tenantId azure_creds.json)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "DATA_FACTORY_NAME=\"<YourDataFactoryName>\"\nRESOURCE_GROUP=\"<YourResourceGroupName>\"\nLOCATION=\"<YourLocation>\"\n# Ensure these variables are set in your GitHub Secrets\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Deploy your Data Factory resources\naz datafactory pipeline create --resource-group $RESOURCE_GROUP --factory-name $DATA_FACTORY_NAME --name \"<PipelineName>\" --properties @\"<path-to-your-json-file>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51253425_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"COMMIT_AUTHOR_NAME=$(git log -1 --pretty=format:'%an')\" >> $GITHUB_ENV\necho \"COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')\" >> $GITHUB_ENV\necho \"COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-sendgrid", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "New Commit to Dev Branch", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ env.COMMIT_AUTHOR_EMAIL }}", "CIvars": [{"name": "COMMIT_AUTHOR_EMAIL", "expression": "env.COMMIT_AUTHOR_EMAIL", "type": "env"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.SENDGRID_SENDER_EMAIL }}", "CIvars": [{"name": "SENDGRID_SENDER_EMAIL", "expression": "secrets.SENDGRID_SENDER_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Hello ${{ env.COMMIT_AUTHOR_NAME }},\n\nA new commit has been pushed to the dev branch. Here are the details:\n\n- **Commit Message**: ${{ env.COMMIT_MESSAGE }}\n- **Author**: ${{ env.COMMIT_AUTHOR_NAME }}\n- **Email**: ${{ env.COMMIT_AUTHOR_EMAIL }}\n\nThank you!\n", "CIvars": [{"name": "COMMIT_AUTHOR_NAME", "expression": "env.COMMIT_AUTHOR_NAME", "type": "env"}, {"name": "COMMIT_MESSAGE", "expression": "env.COMMIT_MESSAGE", "type": "env"}, {"name": "COMMIT_AUTHOR_EMAIL", "expression": "env.COMMIT_AUTHOR_EMAIL", "type": "env"}]}]}]}]}
{"id": "51315351_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51322612_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlef/setup-elixir", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "elixir-version", "value": "1.14", "CIvars": []}, {"type": "arg", "name": "otp-version", "value": "24.3", "CIvars": []}, {"type": "arg", "name": "recommended", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "_build/deps", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-elixir-deps-${{ hashFiles('mix.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-elixir-deps-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.mix/hex", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-hex-${{ hashFiles('mix.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-hex-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mix local.hex --force && mix local.rebar --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix deps.get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix compile", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51356032_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "param(\n  [string]$arg1,\n  [string]$arg2\n)\n\n# Replace with the path to your PowerShell script\n$scriptPath = \"./path/to/your_script.ps1\"\n\n# Call the PowerShell script with arguments\n& $scriptPath -ArgumentList $arg1, $arg2\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51376062_1", "jobs": [{"name": "use-reusable-workflow", "steps": []}]}
{"id": "51376062_3", "jobs": [{"name": "use-reusable-workflow", "steps": []}]}
{"id": "5137905_0", "jobs": [{"name": "phpcs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install  # Ensure you have a composer.json in the root\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require \"squizlabs/php_codesniffer=*\"\ncomposer global require \"phpcsutils/formatter-checkstyle:*\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpcs --standard=PSR2 --report=checkstyle --report-file=checkstyle.xml .  # Adjust the standard and path as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "checkstyle-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "checkstyle.xml", "CIvars": []}]}]}]}
{"id": "51401023_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.1, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Change this command according to your test suite\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51410455_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, pdo, mysql, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Building the PHP-FPM application...\"\n# Add commands to build your application if necessary\n# For example: docker build -t your-image-name .\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51419606_0", "jobs": [{"name": "run-hspec-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-haskell", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ghc-version", "value": "8.10.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cabal update && cabal install --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run Hspec with two formatters: standard terminal output and JSON output\ncabal test --test-options=\"--reporter=progress --reporter=json:test-results.json\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Display standard output in the logs\ncat test-results.json\n# You might also want to process the JSON output for better readability or further actions\njq '.' test-results.json || echo \"jq is not installed or failed to parse JSON.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "hspec-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results.json", "CIvars": []}]}]}]}
{"id": "51434903_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install chef", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a Chef repository structure\necho \"Setting up Knife configuration\"\nmkdir -p ~/.chef\n\ncat <<EOF > ~/.chef/knife.rb\nchef_server_url    'https://your-chef-server-url/organizations/your_org'\nvalidation_client_name 'your_org-validator'\nnode_name 'your_node_name'\nEOF\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife cookbook upload your_cookbook --all # Replace with your cookbook name or paths\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife bootstrap your_node_ip --ssh-user deploy --sudo --bootstrap-template /path/to/your/template.rb\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife exec \"your_cookbook::your_recipe\" -E your_environment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51441880_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-rust", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "rust-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"[registries]\" >> ~/.cargo/config\necho \"my-registry = { index = \\\"https://github.com/login/oauth\\\" }\" >> ~/.cargo/config\necho \"[source.my-dependency]\" >> ~/.cargo/config\necho \"git = \\\"https://github.com/username/my-private-repo.git\\\"\" >> ~/.cargo/config\necho \"branch = \\\"main\\\"\" >> ~/.cargo/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global url.\"https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/\".insteadOf \"https://github.com/\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cargo build --verbose", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cargo test --verbose", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51530821_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with your actual deployment commands to Gemfury\ngem push my_gem-*.gem --host https://gem.fury.io/your_username/ --key $GEMFURY_TOKEN\n\n# Optionally: Add a command to verify the push was successful\necho \"Deployment done!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5158912_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5158942_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/certs\necho \"${{ secrets.CERTIFICATE_BASE64 }}\" | base64 --decode > ~/certs/certificate.p12\necho \"${{ secrets.PROVISIONING_PROFILE_DEVELOPER_BASE64 }}\" | base64 --decode > ~/certs/developer.mobileprovision\necho \"${{ secrets.PROVISIONING_PROFILE_ENTERPRISE_BASE64 }}\" | base64 --decode > ~/certs/enterprise.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity import ~/certs/certificate.p12 -k ~/Library/Keychains/build.keychain -P \"${{ secrets.CERTIFICATE_PASSWORD }}\" -T /usr/bin/codesign\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" ~/Library/Keychains/build.keychain\nsecurity list-keychains -s ~/Library/Keychains/build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release -archivePath $PWD/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"iPhone Distribution: Your Developer\" PROVISIONING_PROFILE_SPECIFIER=\"Your Developer Provisioning Profile\" clean archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $PWD/build/YourApp.xcarchive -exportOptionsPlist exportOptions.plist -exportPath $PWD/build/DeveloperApp\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security import ~/certs/certificate.p12 -k ~/Library/Keychains/build.keychain -P \"${{ secrets.ENTERPRISE_CERTIFICATE_PASSWORD }}\" -T /usr/bin/codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release -archivePath $PWD/build/YourAppEnterprise.xcarchive CODE_SIGN_IDENTITY=\"iPhone Distribution: Your Enterprise\" PROVISIONING_PROFILE_SPECIFIER=\"Your Enterprise Provisioning Profile\" clean archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $PWD/build/YourAppEnterprise.xcarchive -exportOptionsPlist exportOptionsEnterprise.plist -exportPath $PWD/build/EnterpriseApp\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Developer Build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/DeveloperApp", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Enterprise Build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/EnterpriseApp", "CIvars": []}]}]}]}
{"id": "51632522_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest .\necho \"image=${{ secrets.DOCKER_USERNAME }}/your-image-name:latest\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 --decode > k8s-config\nexport KUBECONFIG=${PWD}/k8s-config\nkubectl config get-contexts  # Test if kubectl is configured correctly\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment-name your-container-name=${{ env.image }}\nkubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51660944_0", "jobs": [{"name": "review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# A simple review criteria based on tests\nif [ $? -ne 0 ]; then\n  review_body=\"\ud83d\udeab Tests failed. Please fix the tests before merging.\"\n  review_state=\"COMMENTED\"\nelse\n  review_body=\"\u2705 All checks passed, great job!\"\n  review_state=\"COMMENTED\"\nfi\n\npull_request_number=$(echo \"${{ github.event.pull_request.number }}\")\nrepo=\"${{ github.event.repository.full_name }}\"\n\n# Comment on the PR\ncurl -X POST -H \"Authorization: token $GITHUB_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"body\\\": \\\"$review_body\\\"}\" \\\n  \"https://api.github.com/repos/$repo/issues/$pull_request_number/comments\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51778295_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, sqlite3, bc, gd, intl, pdo, pdo_mysql, zip, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"APP_ENV=github\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"\n# Example deployment commands (you should customize this section)\n# For example, you might use Deployer, Capistrano, or a simple SSH upload\n\n# ssh user@server \"cd /path/to/your/app && git pull origin main && composer install && php bin/console doctrine:migrations:migrate --no-interaction\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "node_modules", "CIvars": []}, {"type": "arg", "name": "key", "value": "node-${{ hashFiles('**/package-lock.json') }}", "CIvars": []}, {"type": "arg", "name": "restore-keys", "value": "node-\n", "CIvars": []}]}]}]}
{"id": "51781446_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourSolution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourSolution.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourInstallerProject.vdproj /p:Configuration=Release  # Replace with your .vdproj file\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "installer-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "path\\to\\output\\folder\\*.exe  # Change to your output exe path\npath\\to\\output\\folder\\*.msi  # Change to your output msi path\n", "CIvars": []}]}]}]}
{"id": "51791262_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "azure-tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}-${{ github.ref == 'refs/heads/development' && 'dev' || github.ref == 'refs/heads/staging' && 'staging' || 'prod' }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}, {"name": "ref", "expression": "github.ref == 'refs/heads/development' && 'dev' || github.ref == 'refs/heads/staging' && 'staging' || 'prod'", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "51814226_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This command generates links for each markdown file in the _posts directory\necho \"Generated Links to Markdown Posts:\"\nfor file in _posts/*.md; do\n  filename=$(basename \"$file\")\n  echo \"Link to ${filename}: https://github.com/${{ github.repository }}/blob/main/${file#./}\"\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "51950698_0", "jobs": [{"name": "xcuitest", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourAppScheme -workspace YourApp.xcworkspace -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail\nxcodebuild test \\\n  -scheme YourAppScheme \\\n  -workspace YourApp.xcworkspace \\\n  -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \\\n  | tee xctest.log | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mv xctest.log logs/\necho \"Logs are saved in logs/xctest.log\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start video recording\nxcrun simctl io booted recordVideo video.mov &\n\n# Run your tests as before but send to background\nxcodebuild test \\\n  -scheme YourAppScheme \\\n  -workspace YourApp.xcworkspace \\\n  -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' \\\n  | tee xctest.log | xcpretty\n\n# Stop video recording\nkill $(pgrep -f 'xcrun simctl io booted recordVideo')\necho \"Video recorded as video.mov\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "logs-and-video", "CIvars": []}, {"type": "arg", "name": "path", "value": "logs/xctest.log\nvideo.mov\n", "CIvars": []}]}]}]}
{"id": "52010730_0", "jobs": [{"name": "update-test-plan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming a requirements.txt for Python\npip install -r requirements.txt\n# Or if using Node.js\n# npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Execute your script that updates the test plan\npython update_test_plan.py\n# Or if you're using Node.js\n# node update-test_plan.js\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add test_plan.md  # Adjust the file name if necessary\ngit commit -m \"Update test plan from automation\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "52038034_0", "jobs": [{"name": "update-conda-env", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "msys2/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "conda-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda env create -f environment.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Activate environment.\"\nsource activate my-env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda env export --no-builds > environment.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add environment.yml\ngit commit -m \"Update environment.yml\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda env remove --name my-env --yes\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52075809_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore ./YourAspNetMvcProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g @angular/cli", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ./YourAngularProjectDirectory\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ./YourAngularProjectDirectory\nnpm run build -- --prod\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build ./YourAspNetMvcProject.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test ./YourAspNetMvcProject.sln", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish ./YourAspNetMvcProject.sln --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAzureWebAppName", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AzureWebAppPublishProfile }}", "CIvars": [{"name": "AzureWebAppPublishProfile", "expression": "secrets.AzureWebAppPublishProfile", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "52090890_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew clean build # or your preferred build tool\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test # Run tests using your preferred testing tool\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p report\ncp build/test-results/test/ report/ # Adjust according to your test results location\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "report/", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "himdel/junit-report-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "report-path", "value": "report/**/TEST-*.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo 'All steps completed.'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5213488_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "52140242_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Change this command as per your build setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build-output/*", "CIvars": []}]}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-artifact", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.29.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CREDENTIALS }}\" > az_creds.json\naz login --service-principal --username $(jq -r .clientId az_creds.json) --password $(jq -r .clientSecret az_creds.json) --tenant $(jq -r .tenantId az_creds.json)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your actual organization, project, and artifact details\naz artifacts universal publish --organization \"https://dev.azure.com/YOUR_ORG\" \\\n--project \"YOUR_PROJECT\" \\\n--scope \"project\" \\\n--feed \"YOUR_FEED\" \\\n--name \"MY_ARTIFACT_NAME\" \\\n--version \"1.0.0\" \\\n--description \"My Release Artifact\" \\\n--path ./path-to-artifact\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52186228_0", "jobs": [{"name": "fetch-artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.27.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -u {username}:{personal_access_token} \\\n-o artifact.zip \\\nhttps://dev.azure.com/{organization}/{project}/_apis/build/builds/{build_id}/artifacts?artifactName=drop&api-version=6.0&$format=zip\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "unzip artifact.zip -d ./artifact", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Replace with actual deployment command for Website 1\necho \"Deploying to Website 1...\"\n# For example, use rsync or scp to copy files to the server\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with actual deployment command for Website 2\necho \"Deploying to Website 2...\"\n# For example, use rsync or scp to copy files to the server\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with actual deployment command for Website 3\necho \"Deploying to Website 3...\"\n# For example, use rsync or scp to copy files to the server\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52252757_0", "jobs": [{"name": "create-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "${{ github.event.inputs.source_repo }}", "CIvars": [{"name": "event.inputs.source_repo", "expression": "github.event.inputs.source_repo", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "octokit/create-applied-repository", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository-name", "value": "${{ github.event.inputs.new_repo_name }}", "CIvars": [{"name": "event.inputs.new_repo_name", "expression": "github.event.inputs.new_repo_name", "type": "context"}]}, {"type": "arg", "name": "private", "value": false, "CIvars": []}]}]}]}
{"id": "52291935_2", "jobs": [{"name": "call", "steps": []}]}
{"id": "52345536_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.0f1", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": ".", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneWindows", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Command to build your game\nHeroku\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52389328_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "brew install mono\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore Path/To/Your/Project.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build Path/To/Your/Project.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test Path/To/Your/TestProject.csproj --configuration Release --logger trx", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mikebye/test-results", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "testresults", "value": "**/*.trx", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd Path/To/Your/Project\nappcenter test run uitest --app $APP_OWNER/$APP_NAME --devices <device_set_name> --app-path <path_to_your_app> --test-series master --test-targets iPhoneSimulator --locale en-US --config-file appcenter.yml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52456719_1", "jobs": [{"name": "call_reusable", "steps": []}]}
{"id": "52456719_2", "jobs": [{"name": "call_reusable", "steps": []}]}
{"id": "52551507_0", "jobs": [{"name": "create-build-definition", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"##vso[task.setvariable variable=AZURE_DEVOPS_EXT_PAT]${{ secrets.AZURE_DEVOPS_PAT }}\"\naz devops login --token $AZURE_DEVOPS_EXT_PAT\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "organization=\"YOUR_ORGANIZATION\" # Replace with your Azure DevOps organization name\nproject=\"YOUR_PROJECT\" # Replace with your Azure DevOps project name\nbuild_definition_name=\"MyCustomBuildDefinition\" # Replace with your desired build definition name\n\n# Define the JSON for the build pipeline\nbuild_definition_json=$(cat <<EOF\n{\n    \"name\": \"$build_definition_name\",\n    \"process\": {\n        \"type\": 1,\n        \"phases\": [\n            {\n                \"name\": \"Build\",\n                \"steps\": [\n                    {\n                        \"task\": {\n                            \"id\": \"YOUR_TASK_ID\", # Replace with the task ID you want to use\n                            \"versionSpec\": \"1.*\"\n                        },\n                        \"inputs\": {\n                            \"command\": \"build\",\n                            \"project\": \"$(Build.SourcesDirectory)/YOUR_PROJECT_FILE.sln\" # Adjust as necessary\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"repository\": {\n        \"id\": \"YOUR_REPO_ID\", // Replace with your repository ID or name\n        \"type\": \"git\"\n    },\n    \"queue\": {\n        \"pool\": {\n            \"name\": \"Default\" // replace with the pool you want to use\n        }\n    }\n}\nEOF\n)\n\n# Create the build definition\naz pipelines create --name \"$build_definition_name\" --project \"$project\" --yaml-path \"$(Build.SourcesDirectory)/.github/workflows/azure-pipelines.yml\" --organization \"https://dev.azure.com/$organization\" --description \"Created via GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52583183_1", "jobs": [{"name": "R-CMD-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rocker/r-ver:4.2", "version": null, "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('remotes')\nremotes::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check --as-cran .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'if (requireNamespace(\"devtools\", quietly = TRUE)) devtools::test()'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5260130_0", "jobs": [{"name": "ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails test  # Replace with your actual test command if different\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "dotnet", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet format --check", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52621914_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build  # Replace 'build' with your actual lane name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane test  # Replace 'test' with your actual lane name\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/build/artifact", "CIvars": []}]}]}]}
{"id": "52640000_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('shiny')\n# List other necessary packages here\ninstall.packages(c('dplyr', 'ggplot2', 'shinycss'))  # Example packages\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"shiny::runApp('your_app_directory', port=1234, host='0.0.0.0')\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52708084_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o ./output --no-restore", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEB_APP_NAME }}", "CIvars": [{"name": "AZURE_WEB_APP_NAME", "expression": "secrets.AZURE_WEB_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_CONNECTION_STRING=${{ secrets.DATABASE_CONNECTION_STRING }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52774577_0", "jobs": [{"name": "supply", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${SUPPLY_JSON_KEY}\" > service_account.json\nsupply init --track internal --json_key service_account.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${SUPPLY_JSON_KEY}\" > service_account.json\n\n# Run the supply command\nfastlane supply init --json_key service_account.json \\\n  --package_name $PACKAGE_NAME \\\n  --email $SUPPLY_EMAIL  # Add the email parameter to fix the missing_email issue\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm service_account.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5277796_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}, {"name": "metrics", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonar-scanner-github-action", "version": "v1.2.0", "shell": "bash", "with": [{"type": "arg", "name": "sonar_host_url", "value": "https://your-sonarqube-server", "CIvars": []}, {"type": "arg", "name": "sonar_login", "value": "${{ secrets.SONARQUBE_TOKEN }}", "CIvars": [{"name": "SONARQUBE_TOKEN", "expression": "secrets.SONARQUBE_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "sonar-scanner", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "echo \"Code metrics analysis completed!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52860468_2", "jobs": [{"name": "call-common-job", "steps": []}]}
{"id": "52873453_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --format documentation\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -e 'rspec_error.log' ]; then\n  echo \"RSpec errors found, check the log for details.\"\n  cat rspec_error.log\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52914312_0", "jobs": [{"name": "install-opam", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ocaml/setup-ocaml", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ocaml-version", "value": "4.14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y opam\nopam init --auto-setup --disable-sandboxing\neval $(opam env)\nopam update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "opam --version\nopam switch list\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52932450_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('devtools')\ninstall.packages('testthat')\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript function.R\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"library(testthat); test_dir('tests')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"devtools::check()\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"devtools::install()\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52945289_2", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, zip, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52957778_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build  # Replace 'build' with your lane name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "52970918_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.sendgrid.net", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "apikey", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "CI Notification - Build ${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "to", "value": "${{ secrets.NOTIFICATION_EMAIL }}", "CIvars": [{"name": "NOTIFICATION_EMAIL", "expression": "secrets.NOTIFICATION_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "body", "value": "The build has finished with status: ${{ job.status }}.\nCheck the details at: ${{ github.run_url }}.\n", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}, {"name": "run_url", "expression": "github.run_url", "type": "context"}]}]}]}]}
{"id": "52994662_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda/conda", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "conda-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda create --name test_env python=3.8 -y\nconda activate test_env\nconda install --yes pytest\n# Add any additional dependencies your project requires\n# conda install --yes numpy pandas  # Example\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "source activate test_env\npytest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53049913_0", "jobs": [{"name": "upload_dsyms", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes you are using Xcode build commands. Adjust according to your setup.\nxcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release archive -archivePath ./build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Ensure the .xcarchive folder contains the dSYMs\nmkdir -p ./dsym_output\ncp -R ./build/YourApp.xcarchive/Products/Applications/YourApp.app.dSYM ./dsym_output/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ./dsym_output\nbundle exec fastlane upload_dsyms\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53335489_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl boot \"iPhone 14\" # or your desired simulator\nxcrun simctl wait booted\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nfastlane test  # Replace 'test' with the lane you want to run\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl shutdown all\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53337731_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt  # Adjust based on your project's package manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if ! pytest; then\n  echo \"Tests failed!\" >> $GITHUB_ENV\n  exit 1\nfi\necho \"Tests passed!\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidjalon/SendMail", "version": "v1.0", "shell": "bash", "with": [{"type": "arg", "name": "smtp_server", "value": "${{ secrets.SMTP_SERVER }}", "CIvars": [{"name": "SMTP_SERVER", "expression": "secrets.SMTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "smtp_port", "value": "${{ secrets.SMTP_PORT }}", "CIvars": [{"name": "SMTP_PORT", "expression": "secrets.SMTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "smtp_user", "value": "${{ secrets.SMTP_USER }}", "CIvars": [{"name": "SMTP_USER", "expression": "secrets.SMTP_USER", "type": "secret"}]}, {"type": "arg", "name": "smtp_pass", "value": "${{ secrets.SMTP_PASS }}", "CIvars": [{"name": "SMTP_PASS", "expression": "secrets.SMTP_PASS", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_FROM }}", "CIvars": [{"name": "EMAIL_FROM", "expression": "secrets.EMAIL_FROM", "type": "secret"}]}, {"type": "arg", "name": "to", "value": "${{ secrets.EMAIL_TO }}", "CIvars": [{"name": "EMAIL_TO", "expression": "secrets.EMAIL_TO", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Test Alert: 100% Test Cases Failed", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello,\n\nThis is a notification that all test cases have failed in the recent run.\n\nPlease check the logs for more details.\n\nBest,\nGitHub Actions\n", "CIvars": []}]}]}]}
{"id": "53371576_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$KUBECONFIG\" > $HOME/.kube/config\nls $HOME/.kube  # Check if kubeconfig is properly set\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Waiting for Ingress External IP...\"\nMAX_RETRIES=30\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n  EXTERNAL_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  if [ -n \"$EXTERNAL_IP\" ]; then\n    echo \"External IP is: $EXTERNAL_IP\"\n    echo \"external_ip=$EXTERNAL_IP\" >> $GITHUB_ENV\n    break\n  else\n    echo \"Still waiting for External IP... Attempt $i/$MAX_RETRIES\"\n    sleep $RETRY_INTERVAL\n  fi\ndone\nif [ -z \"$EXTERNAL_IP\" ]; then\n  echo \"Failed to get External IP after $MAX_RETRIES attempts.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The Ingress External IP is: ${{ env.external_ip }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53424444_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-Pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-Pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release -archivePath ${{ github.workspace }}/build/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ios/exportOptions.plist -exportPath ${{ github.workspace }}/build/YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "53497790_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "failure", "CIvars": []}, {"type": "arg", "name": "fields", "value": "author_name=GitHub Actions\nauthor_link=https://github.com/${{ github.repository }}\nauthor_icon=https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "channel-id", "value": "YOUR_SLACK_CHANNEL_ID", "CIvars": []}, {"type": "arg", "name": "slack-token", "value": "${{ secrets.SLACK_TOKEN }}", "CIvars": [{"name": "SLACK_TOKEN", "expression": "secrets.SLACK_TOKEN", "type": "secret"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"\n# Add your deployment script/commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53534734_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "brew install carthage # Or any other dependency manager you use.\nbundle install         # If you are using Bundler for Ruby dependencies.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace \\\n-scheme YourScheme \\\n-sdk iphoneos \\\n-configuration Release \\\nclean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourAppName.ipa", "CIvars": []}]}]}]}
{"id": "53554269_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev behat/behat", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add any build or preparation commands here\necho \"Building the application...\" # replace this with your actual commands\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat --format pretty", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "behat-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "reports/", "CIvars": []}]}]}]}
{"id": "53566063_0", "jobs": [{"name": "sort-pulls", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Fetch merged pull requests\nprs=$(gh pr list --state merged --json number,mergedAt,title --jq '.[] | { number: .number, mergedAt: .mergedAt, title: .title }')\necho \"$prs\" > prs.json\necho \"::set-output name=prs::$(cat prs.json)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Read the JSON data\nsorted_prs=$(jq -r 'sort_by(.mergedAt) | reverse | .[] | \"\\(.mergedAt) - \\(.title) (#\\(.number))\"' prs.json)\necho \"$sorted_prs\" > sorted_prs.txt\ncat sorted_prs.txt\necho \"::set-output name=sorted_prs::$(cat sorted_prs.txt)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Sorted Merged Pull Requests:\"\necho \"${{ steps.sort_prs.outputs.sorted_prs }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53573745_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "53577985_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "53614067_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\nbundle install  # If you're using a Gemfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GOOGLE_PLAY_JSON_KEY }}\" > google-play-key.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane deploy  # Make sure you have a lane named `deploy` in your Fastlane setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm google-play-key.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5368327_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nrails db:create db:migrate db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\nbundle exec rake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec brakeman -o brakeman-output.json\ncat brakeman-output.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\nbundle exec simplecov\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53684723_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53692264_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-lobanov/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Package.swift ]; then\n  swift package resolve\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -project YourProject.xcodeproj -scheme YourScheme -destination 'platform=iOS Simulator,name=iPhone 14'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53713123_1", "jobs": [{"name": "build", "steps": []}]}
{"id": "53713123_2", "jobs": [{"name": "build", "steps": []}]}
{"id": "53727819_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "your_email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Heroku Access Revocation Required", "CIvars": []}, {"type": "arg", "name": "body", "value": "The GitHub access to Heroku needs to be revoked manually.\nPlease visit your Heroku Dashboard at https://dashboard.heroku.com\nand remove GitHub's access from the Account Settings > Applications.\n", "CIvars": []}, {"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "your_smtp_user", "CIvars": []}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "noreply@example.com", "CIvars": []}]}]}]}
{"id": "5378178_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Change directory to your Xcode project location if needed\ncd MyXcodeProject  # Replace with your Xcode project folder\n\n# Use xcodebuild to build the project\nxcodebuild -scheme MyScheme -sdk iphoneos -configuration Release  # Replace \"MyScheme\" with your project's scheme\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53807_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your build commands here\necho \"Running build scripts...\"\n# Example: php build.php\n# Example if using a build script located at scripts/build.php\nphp scripts/build.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/artifacts", "CIvars": []}]}]}]}
{"id": "53915170_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you are using RSpec for testing; adjust as needed\nbundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "53928827_0", "jobs": [{"name": "performance", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a performance testing script in your package.json\nnpm run performance-test > performance_report.txt || true\n# Ensure it doesn't break the build if tests fail. Handle the output for reporting.\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "performance-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "performance_report.txt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "mich-aziz/action-complete-workflow", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Performance test results for commit `${{ github.sha }}`:\n\n\\`\\`\\`\n$(< performance_report.txt)\n\\`\\`\\`\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}]}
{"id": "54008227_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, gd, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "phpunit-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "tests/_output/*.xml", "CIvars": []}]}]}]}
{"id": "54023038_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jekyll/jekyll-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "jekyll_src", "value": "./", "CIvars": []}, {"type": "arg", "name": "jekyll_dest", "value": "./_site", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "54061820_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t ${{ secrets.DOCKER_REPO }}:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker save -o image.tar ${{ secrets.DOCKER_REPO }}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "hashicorp/setup-vagrant", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vagrant-version", "value": "2.2.19", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Vagrantfile content goes here\" > Vagrantfile\nvagrant up\nvagrant ssh -c 'docker load -i /path/to/image.tar; docker run --rm ${{ secrets.DOCKER_REPO }}:latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54135807_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install\nelif [ -f Package.swift ]; then\n  swift package resolve\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath ${{ github.workspace }}/build/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/*.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "54155967_0", "jobs": [{"name": "phpstan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.3", "CIvars": []}, {"type": "arg", "name": "tools", "value": {"composer": "2.x"}, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54180017_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Change directory to your project\ncd YourProjectDirectory\n\n# Specify the desired output name\nOUTPUT_NAME=\"YourDesiredOutputName.xctestrun\"\n\n# Run the xcodebuild command and change the output filename\nxcodebuild -scheme YourSchemeName -sdk iphoneos -archivePath build/MyApp.xcarchive test -resultBundlePath build/results -exportOptionsPlist YourExportOptionsPlist.plist\n\n# Move the generated .xctestrun file to the desired name\nmv build/results/YourOriginalOutputName.xctestrun build/results/$OUTPUT_NAME\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xctestrun-file", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/results/YourDesiredOutputName.xctestrun", "CIvars": []}]}]}]}
{"id": "54194620_0", "jobs": [{"name": "rename", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "PATCH /repos/${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "repository", "value": "your-new-repo-name", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "54212561_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PR_NUMBER=${{ github.event.pull_request.number }}\nMERGEABLE=$(gh pr view $PR_NUMBER --json mergeable --jq '.mergeable')\necho \"mergeable=${MERGEABLE}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "merge", "CIvars": []}, {"type": "arg", "name": "commit-message", "value": "Automatically merged by GitHub Actions", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Pull Request #${{ github.event.pull_request.number }} has been merged.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54300414_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"actions@github.com\"\ngit add .\ngit commit -m \"Automated updates by GitHub Actions\" || echo \"No changes to commit\"\ngit push origin HEAD:main\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "channel-id", "value": "your-channel-id", "CIvars": []}]}]}]}
{"id": "54338406_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-cocoapods-${{ hashFiles('Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-cocoapods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install --repo-update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release -sdk iphoneos\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54387674_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if ! bundler -v | grep -q '2\\.'; then\n  echo \"Bundler 2 or greater is required\";\n  exit 1;\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./deploy.sh", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54396609_0", "jobs": [{"name": "create-pull-request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "BRANCH_NAME=${GITHUB_REF#refs/heads/}\n\n# Create a base branch on which to merge the new branch\nBASE_BRANCH=\"main\"\nPR_TITLE=\"Automated Pull Request for ${BRANCH_NAME}\"\nPR_BODY=\"This pull request was automatically created for the branch ${BRANCH_NAME}.\"\n\n# Create the Pull Request using GitHub CLI\ngh pr create --base $BASE_BRANCH --head $BRANCH_NAME --title \"$PR_TITLE\" --body \"$PR_BODY\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54450113_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo $PROVISIONING_PROFILE | base64 --decode > ./path/to/your/profile.mobileprovision\nopenssl aes-256-cbc -d -in ./path/to/encrypted/key.p12.enc -out ./path/to/key.p12 -k $ENCRYPTION_PASSWORD  # Your decryption password in secrets\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p password build.keychain\nsecurity unlock-keychain -p password build.keychain\nsecurity import ./path/to/key.p12 -k ~/Library/Keychains/build.keychain -P $KEY_PASSWORD -T /usr/bin/codesign\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k password build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGNING_REQUIRED=YES CODE_SIGNING_ALLOWED=YES\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gsutil cp YourApp.ipa gs://your-bucket-name/YourApp.ipa  # Upload your IPA to GCS\ngcloud firebase test ios run --type=xctest --app gs://your-bucket-name/YourApp.ipa --device model=iphonex,version=12.0,locale=en_US\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54517302_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "Azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_FUNCTIONAPP_NAME }}", "CIvars": [{"name": "AZURE_FUNCTIONAPP_NAME", "expression": "secrets.AZURE_FUNCTIONAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}]}]}]}
{"id": "54536348_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"source 'https://cdn.cocoapods.org/'\" > Podfile\necho \"source '$PRIVATE_REPO_URL'\" >> Podfile # Add the private repo source\necho \"target 'YourAppTargetName' do\" >> Podfile # Change 'YourAppTargetName' to your actual target name\necho \"  pod 'YourPrivatePod'\" >> Podfile # Add your private pod here\necho \"end\" >> Podfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Use Git to configure credentials for accessing the private repo\ngit config --global credential.helper store\necho \"$PRIVATE_REPO_URL\" > ~/.git-credentials\necho \"$COCOAPODS_USER:$COCOAPODS_PASSWORD\" >> ~/.git-credentials\n\n# Now run pod install\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release build -sdk iphoneos\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54540944_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rails # install Rails\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml # Adjust or create a database.yml for CI\nrails db:create\nrails db:migrate\nrails db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Assuming you're using RSpec for testing, replace it with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cucumber # Assuming you're using Cucumber for QA tests, replace it with your QA command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec simplecov # If you are using SimpleCov for coverage, adjust this step accordingly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54571015_0", "jobs": [{"name": "trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/{owner}/{repo}/dispatches", "CIvars": []}, {"type": "arg", "name": "owner", "value": "your_target_owner", "CIvars": []}, {"type": "arg", "name": "repo", "value": "your_target_repository", "CIvars": []}, {"type": "arg", "name": "event-type", "value": "trigger-event", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "{\"ref\": \"main\"}", "CIvars": []}]}]}]}
{"id": "5457773_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php generate_pdf.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "generated-pdf", "CIvars": []}, {"type": "arg", "name": "path", "value": "document.pdf", "CIvars": []}]}]}]}
{"id": "54589786_0", "jobs": [{"name": "run-sidecar", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBECONFIG}\" > kubeconfig\nexport KUBECONFIG=$(pwd)/kubeconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create a Deployment with a sidecar container in Kubernetes\nkubectl apply -f - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-with-sidecar\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app-with-sidecar\n  template:\n    metadata:\n      labels:\n        app: app-with-sidecar\n    spec:\n      containers:\n      - name: main-container\n        image: your-docker-image:latest # Replace with your container image\n        ports:\n        - containerPort: 8080\n        # Add other configurations as necessary\n      - name: sidecar-container\n        image: your-sidecar-image:latest # Replace with your sidecar container image\n        ports:\n        - containerPort: 8081\n        # Add other configurations as necessary\nEOF\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/app-with-sidecar\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can run tests or other operations that require both containers\nkubectl exec -it $(kubectl get pod -l app=app-with-sidecar -o jsonpath=\"{.items[0].metadata.name}\") -- curl http://localhost:8080/test-endpoint\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl delete deployment app-with-sidecar\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5459540_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, max_execution_time=180", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54652664_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_SECRET }}", "CIvars": [{"name": "AZURE_SECRET", "expression": "secrets.AZURE_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54675383_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --filter \"TestCategory=YourCategoryName\" --logger \"trx;logfilename=test_results.trx\" -- --yourArgument=value", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mikeal/publish-test-results", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "test-results-directory", "value": "TestResults", "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "54686834_0", "jobs": [{"name": "set-app-settings", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az webapp config appsettings set --name <your-app-name> \\\n  --resource-group <your-resource-group> \\\n  --slot <your-slot-name> \\\n  --settings Key1=Value1 Key2=Value2 Key3=Value3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54695518_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build -- --prod --base-href /", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "4.2.3", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "folder", "value": "dist/<your_project_name>", "CIvars": []}]}]}]}
{"id": "54716625_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nfastlane your_lane_name # Replace with your lane name that initiates the build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/app.ipa", "CIvars": []}]}]}]}
{"id": "54868550_0", "jobs": [{"name": "add-reviewer", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "app-actions/add-reviewer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "reviewers", "value": "user1,user2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Adding a comment to the PR.\"\ncurl -s -X POST \"https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments\" \\\n  -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n  -d '{\"body\": \"Hi! We\u2019ve added some reviewers to your PR. If you need help, please let us know!\"}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "54940892_0", "jobs": [{"name": "sonarcloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean verify", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "projectKey", "value": "YOUR_SONARCLOUD_PROJECT_KEY", "CIvars": []}, {"type": "arg", "name": "organization", "value": "YOUR_SONARCLOUD_ORG", "CIvars": []}, {"type": "arg", "name": "sonarCloudToken", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}]}]}
{"id": "54945329_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}\" >> $GITHUB_ENV\necho \"DELIVER_USERNAME=${{ secrets.DELIVER_USERNAME }}\" >> $GITHUB_ENV\necho \"DELIVER_PASSWORD=${{ secrets.DELIVER_PASSWORD }}\" >> $GITHUB_ENV\necho \"ANDROID_KEYSTORE=${{ secrets.ANDROID_KEYSTORE }}\" >> $GITHUB_ENV\necho \"ANDROID_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}\" >> $GITHUB_ENV\necho \"ANDROID_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}\" >> $GITHUB_ENV\necho \"ANDROID_KEY_ALIAS_PASSWORD=${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane <lane_name>", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55009089_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-qemu-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Example of multiple services in a multi-container setup\ndocker buildx build \\\n  --push \\\n  --tag ${{ secrets.REGISTRY_USERNAME }}/your-image-name:latest \\\n  -f ./Dockerfile .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.REGISTRY_USERNAME }}", "CIvars": [{"name": "REGISTRY_USERNAME", "expression": "secrets.REGISTRY_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.REGISTRY_TOKEN }}", "CIvars": [{"name": "REGISTRY_TOKEN", "expression": "secrets.REGISTRY_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBECONFIG }}\" > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment-name container-name=${{ secrets.REGISTRY_USERNAME }}/your-image-name:latest --record\nkubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5501314_0", "jobs": [{"name": "import_registry", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Set the path to your .reg file\n$regFilePath = \"$GITHUB_WORKSPACE/path/to/your/file.reg\"\n\n# Check if the file exists\nif (Test-Path -Path $regFilePath) {\n    Write-Host \"Importing registry settings from $regFilePath\"\n    # Import the registry file\n    Start-Process -FilePath reg.exe -ArgumentList \"import `\"$regFilePath`\"\" -NoNewWindow -Wait\n    \n    Write-Host \"Registry settings imported successfully.\"\n} else {\n    Write-Error \"Registry file does not exist at path: $regFilePath\"\n}\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "55070723_0", "jobs": [{"name": "convert_to_draft", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/draft-pull-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "55103714_0", "jobs": [{"name": "request-review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/review-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "reviewers", "value": "external-reviewer-github-username", "CIvars": []}]}]}]}
{"id": "55126368_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2020.3.30f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "Android", "CIvars": []}, {"type": "arg", "name": "buildName", "value": "MyGame.apk", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": "./", "CIvars": []}, {"type": "arg", "name": "unityVersion", "value": "2020.3.30f1", "CIvars": []}, {"type": "arg", "name": "enableCache", "value": true, "CIvars": []}, {"type": "arg", "name": "cachePath", "value": "~/.cache/unity3d", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyGame", "CIvars": []}, {"type": "arg", "name": "path", "value": "build*/MyGame.apk", "CIvars": []}]}]}]}
{"id": "55172591_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=100M, upload_max_filesize=100M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ \"${{ secrets.SKIP_PECL_INSTALL }}\" != \"true\" ]; then\n  echo \"Installing PECL packages...\"\n  pecl install your-pecl-package-name # Replace this with your PECL package\nelse\n  echo \"Skipping PECL package installation.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -m | grep your-pecl-package-name || echo \"PECL package is not installed.\"  # Replace with your package name to verify\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your test commands here\necho \"Running tests...\"\n# e.g., ./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55185557_0", "jobs": [{"name": "flutter-test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/test/results/", "CIvars": []}]}]}]}
{"id": "55230795_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, tokenizer, zip, curl, bcmath, json", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\ncomposer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$KEY\" > deploy_key\nchmod 600 deploy_key\nvendor/bin/dep deploy production --host=$USER@$HOST --path=$PATH --identity=deploy_key\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55248012_0", "jobs": [{"name": "draft-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/draft", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "mediaType", "value": "{\"application/vnd.github.v3+json\"}", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"The pull request", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55256142_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you're using CocoaPods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Debug clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourUITestsScheme -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' -resultBundlePath test-results\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xcuitest-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourUITestsScheme -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' -resultBundlePath test-results -exportResults\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results/*.xml", "CIvars": []}]}]}]}
{"id": "5529461_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install psake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "psake build  # Replace 'build' with the name of your Psake task\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p artifacts\ncp -r output/* artifacts/  # Modify this line based on your output path\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55330105_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Extract the current build number from the project.pbxproj\ncurrent_build_number=$(grep -E 'CURRENT_PROJECT_VERSION' ios/Runner.xcodeproj/project.pbxproj | awk '{print $3}' | tr -d ';')\n# Increment the build number\nnew_build_number=$((current_build_number + 1))\necho \"Old Build Number: $current_build_number\"\necho \"New Build Number: $new_build_number\"\n# Update the build number in the file\nsed -i '' -E \"s/(CURRENT_PROJECT_VERSION = ).+;/\\1$new_build_number;/\" ios/Runner.xcodeproj/project.pbxproj\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build ios --release --no-codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p build/archive\ncp -R ios/Runner.xcarchive build/archive\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55383541_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "file", "value": "Dockerfile", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-dockerhub-username/your-image-name:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "enable-AzureCLI", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55399687_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install --project-directory=YourProjectDirectory  # Change this as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO build  # Update with your actual workspace and scheme\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO  # Adjust as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphoneos archive -archivePath ${{ github.workspace }}/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO  # Update as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/YourApp.xcarchive -exportPath ${{ github.workspace }}/YourApp -exportOptionsPlist YourExportOptions.plist  # Refer to your export options plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp", "CIvars": []}, {"type": "arg", "name": "path", "value": "YourApp/", "CIvars": []}]}]}]}
{"id": "55416131_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods       # Install CocoaPods if you're using it\npod install                  # Install dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourScheme \\\n           -sdk iphonesimulator \\\n           -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n           build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace \\\n                -scheme YourScheme \\\n                -sdk iphonesimulator \\\n                -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n                CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourScheme \\\n           -sdk iphoneos \\\n           -archivePath ${{ github.workspace }}/YourApp.xcarchive \\\n           archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive \\\n           -archivePath ${{ github.workspace }}/YourApp.xcarchive \\\n           -exportOptionsPlist ExportOptions.plist \\\n           -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS App", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}]}]}
{"id": "55438973_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore MyProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore MyProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test MyProject.Tests/MyProject.Tests.csproj --logger trx", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mikeal/publish-to-github-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "test_results", "value": "MyProject.Tests/TestResults/*", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "docker build -t myapp:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.DOCKERCREDENTIALS }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\ndocker tag myapp:latest myrepo/myapp:latest\ndocker push myrepo/myapp:latest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55453326_0", "jobs": [{"name": "sonarcloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-m2-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn clean verify sonar:sonar \\\n  -Dsonar.projectKey=your.project.key \\\n  -Dsonar.projectName=\"Your Project Name\" \\\n  -Dsonar.projectVersion=1.0 \\\n  -Dsonar.sources=src/main/java\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": []}]}]}
{"id": "5546667_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install Flex SDK (modify according to your needs)\nwget https://dl.apache.org/flex/4.16.1/binaries/apache-flex-sdk-4.16.1-bin.zip\nunzip apache-flex-sdk-4.16.1-bin.zip -d /opt/\necho \"FLEX_HOME=/opt/apache-flex-sdk-4.16.1\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$FLEX_HOME/bin/mxmlc path/to/your/Main.mxml  # Change path as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Command to run your tests; adjust as necessary\n# For example, if you have a shell script to run tests\n./run_tests.sh  # This script should generate results, e.g., in JUnit XML format\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/test-results.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "mikehaertl/php-env", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-o summary -- Test Results Update\n-f path/to/your/test-results.xml  # The actual results file to publish\n", "CIvars": []}]}]}]}
{"id": "55501875_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "merge", "CIvars": []}, {"type": "arg", "name": "commit-message", "value": "Automated merge of approved PR #${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "55512350_0", "jobs": [{"name": "coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test -- --coverage --coverageReporters=lcov", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p coverage\nmv coverage/lcov.info coverage/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "thomason802/coveralls-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "lcov_file", "value": "coverage/lcov.info", "CIvars": []}, {"type": "arg", "name": "custom_message", "value": "## Coverage Report\n[![Coverage Status](https://coveralls.io/repos/github/${{ github.repository }}/badge.svg?branch=${{ github.head_ref }})](https://coveralls.io/github/${{ github.repository }}?branch=${{ github.head_ref }})\nThe coverage for the changed lines is below:\n", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "head_ref", "expression": "github.head_ref", "type": "context"}]}, {"type": "arg", "name": "comment", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const coverage = \"${{ steps.comment.outputs.coverage_message }}\";\nconst response = await github.pulls.listComments({\n  ...context.repo,\n  pull_number: context.payload.pull_request.number\n});\nconst existingComment = response.data.find(comment => comment.body.includes(\"Coverage Report\"));\nif (existingComment) {\n  await github.pulls.updateComment({\n    ...context.repo,\n    comment_id: existingComment.id,\n    body: coverage\n  });\n} else {\n  await github.pulls.createComment({\n    ...context.repo,\n    pull_number: context.payload.pull_request.number,\n    body: coverage\n  });\n}\n", "CIvars": [{"name": "comment.outputs.coverage_message", "expression": "steps.comment.outputs.coverage_message", "type": "steps"}]}]}]}]}
{"id": "55518325_0", "jobs": [{"name": "retrieve-artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-build-artifact", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "${{ steps.get_artifact.outputs.artifact_name }}", "CIvars": [{"name": "get_artifact.outputs.artifact_name", "expression": "steps.get_artifact.outputs.artifact_name", "type": "steps"}]}, {"type": "arg", "name": "path", "value": "./downloaded-artifact", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Here you would add your logic to process the artifact.\n# This example assumes that the artifact contains a directory or files.\n# Modify the following line to suit your processing needs.\necho \"Processing the downloaded artifact\"\n# Example: perform some transformation or analysis on the contents\nls ./downloaded-artifact\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "new-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output-directory/", "CIvars": []}]}]}]}
{"id": "55520812_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webutils/ssh-key", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ssh-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "remote-user", "value": "${{ secrets.REMOTE_USER }}", "CIvars": [{"name": "REMOTE_USER", "expression": "secrets.REMOTE_USER", "type": "secret"}]}, {"type": "arg", "name": "remote-host", "value": "${{ secrets.REMOTE_HOST }}", "CIvars": [{"name": "REMOTE_HOST", "expression": "secrets.REMOTE_HOST", "type": "secret"}]}, {"type": "arg", "name": "known-hosts", "value": "${{ secrets.REMOTE_HOST }}", "CIvars": [{"name": "REMOTE_HOST", "expression": "secrets.REMOTE_HOST", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "rsync -avz --delete ./path/to/local/files/ ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_PATH }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5553156_0", "jobs": [{"name": "merge", "steps": [{"type": "shell_cmd", "cmd": "echo \"PR_LABELS=${{ github.event.pull_request.labels }}\" >> $GITHUB_ENV\nif [[ ! \"$PR_LABELS\" == *\"ready to merge\"* ]]; then\n  echo \"The pull request does not have the 'ready to merge' label.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GH_TOKEN }}", "CIvars": [{"name": "GH_TOKEN", "expression": "secrets.GH_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull_request_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge_method", "value": "merge", "CIvars": []}]}]}]}
{"id": "55659524_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "10.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you are using CocoaPods; adjust if using Carthage or Swift Package Manager\nif [ -f Podfile ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Debug build || exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Debug test || exit 1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55690502_0", "jobs": [{"name": "scan-teams", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GITHUB_TOKEN }}\" | gh auth login --with-token\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ORG=\"your-org-name\" # Replace with your GitHub organization name\necho \"Listing teams for organization: $ORG\"\ngh api \"orgs/$ORG/teams\" --jq '.[] | {name: .name, description: .description, privacy: .privacy}' > teams.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Teams in organization:\"\ncat teams.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55746843_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rocker/r-ver", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('renv')\nrenv::restore()  # Assumes you have a renv.lock file for dependency management.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"library(remotes)\"   # Load remote libraries if necessary\nR -e \"\n  # List of libraries to ignore temporarily\n  ignored_packages <- c('dplyr', 'ggplot2')\n\n  # Load all installed packages\n  installed_packages <- installed.packages()[, 'Package']\n  \n  # Create a condition to only load packages that are not in the ignored list\n  packages_to_load <- installed_packages[!installed_packages %in% ignored_packages]\n\n  # Load packages that are not ignored\n  sapply(packages_to_load, library, character.only = TRUE)\n\n  # Your analysis code goes here\n  print('Running analysis with ignored libraries...')\n  # For instance:\n  # result <- some_function_using_other_libs()\n  # print(result)\n\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"devtools::test()\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55752874_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl, mysqli, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key\nchmod 600 private_key\nrsync -avz -e \"ssh -i private_key -o StrictHostKeyChecking=no\" --exclude='/.github/' ./ $SSH_USER@$SSH_HOST:$PROJECT_PATH/\nssh -i private_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST \"cd $PROJECT_PATH && composer install --no-dev --optimize-autoloader\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm private_key\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55756906_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add any test commands here\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -d \"_site\" ]; then\n  echo \"Build failed, _site directory not found!\"\n  exit 1\nelse\n  echo \"Build successful!\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to GitHub Pages...\"\n# Replace with your actual deployment command\n# e.g., gh-pages, rsync, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55828570_0", "jobs": [{"name": "label", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/labeler", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "config", "value": ".github/labeler.yml", "CIvars": []}]}]}]}
{"id": "55830994_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda-incubator/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda env create -f environment.yml  # install dependencies if you have an env file\nconda activate myenv  # replace 'myenv' with the name of your conda environment\nconda install conda-build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda build .  # Assumes you have a meta.yaml in the root of your repository\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "conda-package", "CIvars": []}, {"type": "arg", "name": "path", "value": "/path/to/conda-bld", "CIvars": []}]}]}]}
{"id": "55856805_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install  # Update this according to your project's dependency manager\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "max_attempts=3\nattempt=0\nwhile [ $attempt -lt $max_attempts ]; do\n  attempt=$((attempt + 1))\n  echo \"Attempt $attempt of $max_attempts...\"\n  if bundle exec rake test; then  # Update with your test command\n    echo \"Tests passed!\"\n    break\n  else\n    echo \"Tests failed. Retrying...\"\n    if [ $attempt -eq $max_attempts ]; then\n      echo \"Max attempts reached. Tests failed.\"\n      exit 1\n    fi\n    sleep 5  # optional: wait before retrying\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/logs", "CIvars": []}]}]}]}
{"id": "55942379_0", "jobs": [{"name": "upload_cookbooks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -L https://omnitruck.chef.io/install.sh | sudo bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.chef\necho \"chef_server_url '${{ secrets.CHEF_SERVER_URL }}'\" >> ~/.chef/knife.rb\necho \"node_name '${{ secrets.CHEF_CLIENT_NAME }}'\" >> ~/.chef/knife.rb\necho \"client_key '${{ secrets.CHEF_CLIENT_KEY }}'\" >> ~/.chef/knife.rb\necho \"cookbook_path ['./cookbooks']\" >> ~/.chef/knife.rb  # Path to your cookbooks\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "knife cookbook upload --all", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "55963795_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build  # Assuming you have a Fastlane lane called 'build'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming your Fastlane has a lane for signing\nbundle exec fastlane sign  # Modify this to your lane name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp path/to/your/ipa/YourApp.ipa ./YourApp.ipa # Adjust path accordingly\nmkdir -p temp_directory\n\n# Unzip the IPA file\nunzip -q YourApp.ipa -d temp_directory\ncd temp_directory/Payload\nAPP_NAME=$(ls | grep .app$)\n\n# Modify the Info.plist file\n/usr/libexec/PlistBuddy -c \"Set :CFBundleVersion 2.0\" \"$APP_NAME/Info.plist\"  # Modify as needed\n/usr/libexec/PlistBuddy -c \"Set :CFBundleShortVersionString 2.0\" \"$APP_NAME/Info.plist\"  # Modify as needed\n\n# Rezip the IPA file\ncd ..\nzip -r ../ModifiedApp.ipa Payload\ncd ..\n# Optionally, you can upload this modified IPA to your release service\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "modified-ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "ModifiedApp.ipa", "CIvars": []}]}]}]}
{"id": "56026848_0", "jobs": [{"name": "create_repo", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /user/repos", "CIvars": []}, {"type": "arg", "name": "repository", "value": "${{ github.event.client_payload.repository_name }}", "CIvars": [{"name": "event.client_payload.repository_name", "expression": "github.event.client_payload.repository_name", "type": "context"}]}, {"type": "arg", "name": "name", "value": "${{ github.event.client_payload.repo_name }}", "CIvars": [{"name": "event.client_payload.repo_name", "expression": "github.event.client_payload.repo_name", "type": "context"}]}, {"type": "arg", "name": "private", "value": false, "CIvars": []}, {"type": "arg", "name": "description", "value": "${{ github.event.client_payload.description }}", "CIvars": [{"name": "event.client_payload.description", "expression": "github.event.client_payload.description", "type": "context"}]}, {"type": "arg", "name": "has_issues", "value": true, "CIvars": []}, {"type": "arg", "name": "has_wiki", "value": true, "CIvars": []}, {"type": "arg", "name": "has_downloads", "value": true, "CIvars": []}]}]}]}
{"id": "56036216_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "imranismail/setup-helm", "version": "v1.2.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the default values\nvalues_file=\"values.yaml\"\nexport EXTRA_VALUES=\"\"\n\nif [[ \"${{ github.event.inputs.environment }}\" == \"production\" ]]; then\n  EXTRA_VALUES=\"--set image.tag=prod --set replicaCount=3\"\nelif [[ \"${{ github.event.inputs.environment }}\" == \"staging\" ]]; then\n  EXTRA_VALUES=\"--set image.tag=staging --set replicaCount=2\"\nelse\n  EXTRA_VALUES=\"--set image.tag=dev --set replicaCount=1\"\nfi\n\necho \"extra_values=${EXTRA_VALUES}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-release ./my-chart \\\n  -f values.yaml \\\n  ${{ env.extra_values }} \\\n  --namespace my-namespace --create-namespace\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56056181_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "Azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-function-app-name", "CIvars": []}, {"type": "arg", "name": "package", "value": "./function-app", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_FUNCTION_PUBLISH_PROFILE", "expression": "secrets.AZURE_FUNCTION_PUBLISH_PROFILE", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/logic-apps-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "resource-group", "value": "your-resource-group", "CIvars": []}, {"type": "arg", "name": "logic-app-name", "value": "your-logic-app-name", "CIvars": []}, {"type": "arg", "name": "location", "value": "your-location", "CIvars": []}, {"type": "arg", "name": "workflow-definition", "value": "./logic-app/workflow-definition.json", "CIvars": []}, {"type": "arg", "name": "azure-credentials", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}]}]}
{"id": "56066649_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build  # Adjust this command according to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./path/to/your/asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "56172349_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Change this to your actual command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56209766_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}, {"type": "arg", "name": "working-directory", "value": "./dist", "CIvars": []}]}]}]}
{"id": "56249306_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "New pull request by ${{ github.actor }} has been created/updated. Please review.", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}]}]}]}]}
{"id": "56302207_0", "jobs": [{"name": "trigger-pipeline", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/pipelines", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "azure-devops-org", "value": "${{ secrets.ADO_ORG }}", "CIvars": [{"name": "ADO_ORG", "expression": "secrets.ADO_ORG", "type": "secret"}]}, {"type": "arg", "name": "azure-devops-project", "value": "${{ secrets.ADO_PROJECT }}", "CIvars": [{"name": "ADO_PROJECT", "expression": "secrets.ADO_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "pipe-line-id-or-name", "value": "${{ github.event.inputs.ado_build_pipeline }}", "CIvars": [{"name": "event.inputs.ado_build_pipeline", "expression": "github.event.inputs.ado_build_pipeline", "type": "context"}]}, {"type": "arg", "name": "azure-devops-personal-access-token", "value": "${{ secrets.ADO_TOKEN }}", "CIvars": [{"name": "ADO_TOKEN", "expression": "secrets.ADO_TOKEN", "type": "secret"}]}]}]}]}
{"id": "56355618_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}, {"type": "arg", "name": "working-directory", "value": "./", "CIvars": []}]}]}]}
{"id": "56383287_0", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get the current time in seconds since epoch\nCURRENT_TIME=$(date +%s)\n\n# Iterate over deployments and check their creation timestamps\nDEPLOYMENTS=$(kubectl get deployments -o json | jq -c '.items[] | {name: .metadata.name, creationTime: .metadata.creationTimestamp}')\necho \"Deployments: $DEPLOYMENTS\"\n\nUNDELETED_DEPLOYS=()\n\nfor deploy in $DEPLOYMENTS; do\n  NAME=$(echo \"$deploy\" | jq -r .name)\n  CREATION_TIMESTAMP=$(echo \"$deploy\" | jq -r .creationTime)\n  CREATION_TIME=$(date -d \"$CREATION_TIMESTAMP\" +%s)\n\n  # Calculate the age in days\n  AGE_DAYS=$(( (CURRENT_TIME - CREATION_TIME) / 86400 ))\n\n  # Specify your threshold for deletion (e.g., 30 days)\n  if [ \"$AGE_DAYS\" -gt 30 ]; then\n    UNDELETED_DEPLOYS+=(\"$NAME\")\n  fi\ndone\n\necho \"Unused deployments to delete: ${UNDELETED_DEPLOYS[@]}\"\necho \"::set-output name=deployments::${UNDELETED_DEPLOYS[*]}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for deploy in ${{ steps.get-unused.outputs.deployments }}; do\n  echo \"Deleting deployment $deploy\"\n  kubectl delete deployment $deploy\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56419241_0", "jobs": [{"name": "run-fixtures", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "error_reporting = E_ALL\ndisplay_errors = On\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "while ! mysqladmin ping -h \"127.0.0.1\" --silent; do\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:database:create --if-not-exists\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:fixtures:load --no-interaction\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56439620_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud deployment-manager deployments create my-deployment --config my-config.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud deployment-manager deployments delete my-deployment --quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56463404_0", "jobs": [{"name": "run-powershell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PowerShell -File ./scripts/myscript.ps1 -Argument1 $env:ARG1 -Argument2 $env:ARG2\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56463404_3", "jobs": [{"name": "run-powershell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "PowerShell -File ./scripts/myscript.ps1 -Argument1 $env:ARG1 -Argument2 $env:ARG2\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56469687_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer test", "name": "", "version": "", "shell": "bash"}]}, {"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer publish --no-ansi --no-interaction", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56475820_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('remotes')  # Ensure 'remotes' is installed\nremotes::install_github(\"username/repo@branch\") # Replace with your GitHub repo and branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R  # Replace with your actual script\n# OR \nRscript -e \"rmarkdown::render('your_document.Rmd')\"  # If you're working with .Rmd files\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"library(yourpackage)\"  # Replace 'yourpackage' with the actual package name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56559235_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane test  # Adjust 'test' with your Fastlane lane name\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "fastlane/test_output", "CIvars": []}]}]}]}
{"id": "56593757_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane <lane>", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56626600_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish --no-build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "56629933_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select -s /Applications/Xcode.app/Contents/Developer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk ipadhybrid -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/debug/test-results.xml", "CIvars": []}]}]}]}
{"id": "56647478_0", "jobs": [{"name": "modify-files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Modifying the file example.txt\"\necho \"This line was added automatically.\" >> example.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"you@example.com\"\ngit config --local user.name \"Your Name\"\ngit add example.txt\ngit commit -m \"Automated modification of example.txt after merging to master\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push-action", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "5665230_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.2", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, intl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/phpunit  # Adjust to your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\nrsync -avz --delete --exclude 'vendor/' --exclude '.git/' ./ $SERVER_USER@$SERVER_IP:$DEPLOY_PATH\nssh -i private_key.pem $SERVER_USER@$SERVER_IP \"cd $DEPLOY_PATH && composer install --no-dev --optimize-autoloader && php bin/console cache:clear --env=prod && php bin/console doctrine:migrations:migrate --no-interaction\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "56691637_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "0.5.7", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --delete", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/cloudfront-invalidate-action", "version": "0.1.0", "shell": "bash", "with": [{"type": "arg", "name": "distribution", "value": "${{ secrets.CLOUDFRONT_DIST_ID }}", "CIvars": [{"name": "CLOUDFRONT_DIST_ID", "expression": "secrets.CLOUDFRONT_DIST_ID", "type": "secret"}]}, {"type": "arg", "name": "paths", "value": "/*", "CIvars": []}]}]}]}
{"id": "56736329_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-actions/build-and-push", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": false, "CIvars": []}, {"type": "arg", "name": "tags", "value": "my-docker-image:latest", "CIvars": []}, {"type": "arg", "name": "dockerfile", "value": "Dockerfile", "CIvars": []}]}]}]}
{"id": "57022045_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "registry", "value": "gcr.io", "CIvars": []}, {"type": "arg", "name": "username", "value": "_json_key", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "file", "value": "Dockerfile", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "gcr.io/<YOUR_PROJECT_ID>/<YOUR_IMAGE_NAME>:latest", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "<YOUR_PROJECT_ID>", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud container clusters get-credentials <YOUR_CLUSTER_NAME> --zone <YOUR_ZONE> --project <YOUR_PROJECT_ID>\nkubectl apply -f k8s/deployment.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57039453_3", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": 7.4, "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --no-scripts", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Pre-deployment actions, if needed.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${SSH_PRIVATE_KEY}\" > private_key\nchmod 600 private_key\nrsync -avz --delete --exclude='.git*' --exclude='vendor/' ./ $SSH_USER@$SERVER_IP:/path/to/your/ci/project/your-subdirectory/\nssh -i private_key $SSH_USER@$SERVER_IP 'cd /path/to/your/ci/project/your-subdirectory && php artisan migrate' # Adjust for your CI commands\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57077851_0", "jobs": [{"name": "scan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "someorg/code-scanner", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "organization", "value": "your-org-name", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Scan completed. Review the results in the provided logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57115520_3", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to the production server...\"\n# Replace with your deployment commands\nssh user@server \"cd /path/to/app && git pull && ./deploy_script.sh\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57159239_0", "jobs": [{"name": "package", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "helm-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd path/to/chart  # Navigate to the directory containing your Helm chart\nhelm package .   # Package the chart in the current directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "helm-chart-package", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/chart/*.tgz", "CIvars": []}]}]}]}
{"id": "57183581_0", "jobs": [{"name": "create_work_item", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/CLI", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "inlineScript", "value": "az devops configure --defaults organization=https://dev.azure.com/YOUR_ORG_NAME project=YOUR_PROJECT_NAME\necho $(echo \"${{ secrets.AZURE_DEVOPS_PAT }}\" | tr -d '\\r') | az devops login --organization https://dev.azure.com/YOUR_ORG_NAME --pat\n", "CIvars": [{"name": "AZURE_DEVOPS_PAT", "expression": "secrets.AZURE_DEVOPS_PAT", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Create a parent work item first (if needed)\nparent_work_item_id=$(az boards work-item create --title \"Parent Work Item\" --type \"Task\" --query \"id\" -o tsv)\n\n# Create a child work item and link it to the parent work item\naz boards work-item create --title \"Child Work Item\" --type \"Task\" --relation \"System.LinkTypes.Hierarchy-Forward\" --relation-id $parent_work_item_id\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57234996_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .\necho \"${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}\" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin\ndocker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/<your-deployment-name> <container-name>=${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}\nkubectl rollout status deployment/<your-deployment-name>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "POD_NAME=$(kubectl get pods --selector=app=<your-app-name> -o jsonpath='{.items[0].metadata.name}')\nkubectl wait --for=condition=ready pod/$POD_NAME --timeout=60s\nif ! kubectl get pod \"$POD_NAME\" -o jsonpath='{.status.containerStatuses[0].restartCount}' | grep -q '^0$'; then\n    echo \"Container is crashing!\" >&2\n    exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57242124_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/sftp-deploy", "version": "v4.0.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.SFTP_SERVER }}", "CIvars": [{"name": "SFTP_SERVER", "expression": "secrets.SFTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SFTP_USERNAME }}", "CIvars": [{"name": "SFTP_USERNAME", "expression": "secrets.SFTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SFTP_PASSWORD }}", "CIvars": [{"name": "SFTP_PASSWORD", "expression": "secrets.SFTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.SFTP_PORT }}", "CIvars": [{"name": "SFTP_PORT", "expression": "secrets.SFTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/path/to/remote/dir", "CIvars": []}, {"type": "arg", "name": "exclude", "value": ".git*", "CIvars": []}]}]}]}
{"id": "57259348_0", "jobs": [{"name": "bump-version", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm version patch  # Use 'minor' or 'major' as needed\necho \"::set-output name=new_version::$(node -p \"require('./package.json').version\")\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add package.json package-lock.json\ngit commit -m \"Bump version to ${{ steps.bump_version.outputs.new_version }}\"\ngit push origin main  # Change the branch name if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ncipollo/release-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ steps.bump_version.outputs.new_version }}", "CIvars": [{"name": "bump_version.outputs.new_version", "expression": "steps.bump_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "name", "value": "Release ${{ steps.bump_version.outputs.new_version }}", "CIvars": [{"name": "bump_version.outputs.new_version", "expression": "steps.bump_version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "body", "value": "Changes in this release:\n- Version bumped to ${{ steps.bump_version.outputs.new_version }}\n", "CIvars": [{"name": "bump_version.outputs.new_version", "expression": "steps.bump_version.outputs.new_version", "type": "steps"}]}]}]}]}
{"id": "57289366_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane build  # Ensure you have a lane named `build` in your Fastfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane upload_to_testflight  # Ensure you have a lane for upload in your Fastfile\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57297176_0", "jobs": [{"name": "download_dsyms", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane download_dsyms", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57332101_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta # Assumes you have a lane setup for building and testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane publish_to_app_center # Replace with the actual lane name for publishing\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57335590_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd, sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Command to set up your database (might depend on your setup)\n# e.g. create a SQLite database, for MySQL use mysql commands\ntouch /path/to/db.sqlite  # Example for SQLite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57361043_0", "jobs": [{"name": "checkout-new-branch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout -b new-branch-name # Replace 'new-branch-name' with your desired branch name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin new-branch-name # Ensure you have permissions to push to the repository\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57460337_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/setup-sqlcmd", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sqlcmd-version", "value": "13.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "choco install ssdt -y  # Installing SQL Server Data Tools using Chocolatey\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running post-deployment scripts...\"\n\n# Using sqlcmd to run your post-deployment scripts\nsqlcmd -S $SQL_SERVER_NAME -d $SQL_DATABASE_NAME -U $SQL_USER -P $SQL_PASSWORD -i path/to/your/post-deployment-script.sql\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n# Any additional cleanup tasks can be added here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57476817_0", "jobs": [{"name": "build-ios", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "configurations/xcode", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourAppName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourAppName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13' test\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "build-android", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "wget -q https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip\nunzip commandlinetools-linux-6609375_latest.zip -d $HOME/Android/sdk/cmdline-tools\nyes | sdkmanager --sdk_root=$HOME/Android/sdk --licenses\nsdkmanager --sdk_root=$HOME/Android/sdk \"platform-tools\" \"platforms;android-30\" # specify your target Android version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd android\n./gradlew build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd android\n./gradlew test\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying app...\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57513563_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Logging in to Azure...\"\naz login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Getting secrets from Azure Key Vault for Development...\"\nDEV_CONNECTION_STRING=$(az keyvault secret show --name \"DevDbConnectionString\" --vault-name \"YourKeyVaultName\" --query \"value\" -o tsv)\necho \"::set-output name=dev-connection-string::$DEV_CONNECTION_STRING\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Getting secrets from Azure Key Vault for Production...\"\nPROD_CONNECTION_STRING=$(az keyvault secret show --name \"ProdDbConnectionString\" --vault-name \"YourKeyVaultName\" --query \"value\" -o tsv)\necho \"::set-output name=prod-connection-string::$PROD_CONNECTION_STRING\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running migrations for Development database...\"\n# Here you can replace with your actual migration command\n# e.g., node your-migration-script.js --connection-string $DEV_CONNECTION_STRING\necho \"Simulated migration command for Development: node runMigration.js --connection-string $DEV_CONNECTION_STRING\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running migrations for Production database...\"\n# Here you can replace with your actual migration command\n# e.g., node your-migration-script.js --connection-string $PROD_CONNECTION_STRING\necho \"Simulated migration command for Production: node runMigration.js --connection-string $PROD_CONNECTION_STRING\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5751585_0", "jobs": [{"name": "rename-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "PATCH /repos/${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "repository", "value": "${{ github.event.repository.name }}", "CIvars": [{"name": "event.repository.name", "expression": "github.event.repository.name", "type": "context"}]}, {"type": "arg", "name": "owner", "value": "${{ github.event.repository.owner.login }}", "CIvars": [{"name": "event.repository.owner.login", "expression": "github.event.repository.owner.login", "type": "context"}]}, {"type": "arg", "name": "name", "value": "${{ github.event.inputs.new_name }}", "CIvars": [{"name": "event.inputs.new_name", "expression": "github.event.inputs.new_name", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GH_TOKEN }}", "CIvars": [{"name": "GH_TOKEN", "expression": "secrets.GH_TOKEN", "type": "secret"}]}]}]}]}
{"id": "5764037_0", "jobs": [{"name": "tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, bcmath, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\ncomposer install --prefer-dist --no-progress --no-suggest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-html coverage-report --coverage-text\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage-report", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Assuming you have PHP Under Control installed and properly set up\n# Adjust the command to collect metrics as per your setup\nphp path/to/phpundercontrol.php --output metrics.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "metrics", "CIvars": []}, {"type": "arg", "name": "path", "value": "metrics.json", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# You may add here steps that convert and upload metrics to a location where\n# the PHP Under Control can access them, or run additional scripts.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57683392_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# If you're using a Gemfile for Ruby\n# gem install bundler\n# bundle install\n\n# Set up Python dependencies\npython -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python manage.py test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add any Ruby-related commands you want to run here\n# For example:\n# ruby script.rb\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57683827_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "fjogeleit/http-request-action", "version": "v1.5.0", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://your.webhook.url/here", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{ \"Content-Type\": \"application/json\" }", "CIvars": []}, {"type": "arg", "name": "body", "value": "{\"status\": \"completed\", \"branch\": \"${{ github.ref }}\"}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "insecure", "value": true, "CIvars": []}]}]}]}
{"id": "57707823_0", "jobs": [{"name": "code_review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Adjust this command as needed for your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint  # Assuming you have a lint script defined in package.json\nnpm run test  # Assuming you have tests to run\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run format:check  # This should check if code formatting is correct\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"$(git diff --stat origin/main)\" != \"\" ]; then\n  echo \"There are changes in the code. Please review!\"\nelse\n  echo \"No changes found. Code is ready to be merged!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "add-review-comment", "steps": [{"type": "gh_action", "cmd": "", "name": "pulll-evaluate/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "comment", "value": "**Code Review Check:**\n- Please ensure to run linters and tests before merging.\n- Review the changes above.\n", "CIvars": []}]}]}]}
{"id": "57715637_0", "jobs": [{"name": "build-macos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install any dependencies needed for macOS build\nbrew install <your-dependencies>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your build commands here, e.g., make\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "macos-binary", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/binary", "CIvars": []}]}]}, {"name": "build-windows", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Install any dependencies needed for Windows build\nchoco install <your-dependencies>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your build commands here, e.g., nmake or cmd commands\nnmake /f Makefile\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "windows-binary", "CIvars": []}, {"type": "arg", "name": "path", "value": "path\\to\\your\\binary.exe", "CIvars": []}]}]}]}
{"id": "57791810_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release # Change to other build types as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const { exec } = require('child_process');\n\nconst appCenterAppName = 'YOUR_APP_CENTER_APP_NAME'; // Replace with your App Center app name\nconst appCenterOwnerName = 'YOUR_APP_CENTER_OWNER_NAME'; // Replace with your App Center owner name\nconst appCenterApiToken = process.env.APP_CENTER_API_TOKEN;\n\nconst command = `\n  appcenter distribute release --app ${appCenterOwnerName}/${appCenterAppName} --file build/app/outputs/flutter-apk/app-release.apk --release-notes \"Automated build\" --token ${appCenterApiToken}\n`;\nexec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`Error: ${error.message}`);\n    return;\n  }\n  if (stderr) {\n    console.error(`stderr: ${stderr}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n});\n", "CIvars": []}]}]}]}
{"id": "57808152_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build appbundle --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/apk/release/app-release.apk", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "appbundle", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/bundle/release/app-release.aab", "CIvars": []}]}]}]}
{"id": "57822227_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Pull request", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57835401_0", "jobs": [{"name": "fetch-latest-tag", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "TAG=$(git ls-remote --tags https://github.com/owner/repo.git | awk '{print $2}' | sed 's|refs/tags/||' | sort -V | tail -n 1)\necho \"Latest tag: $TAG\"\necho \"latest_tag=$TAG\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Using action version: ${{ env.latest_tag }}\"\n# you can call the action like so\n# or you could run a subsequent step using this in your job\n\n# Example of how you might use it:\n# - name: Run Action with Latest Tag\n#   uses: owner/repo@${{ env.latest_tag }}\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "run-action", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "owner/repo", "version": "${{ env.latest_tag }}", "shell": "bash", "with": []}]}]}
{"id": "57886790_0", "jobs": [{"name": "bundle_install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/bundle", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gems-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "echo \"gem: --no-document\" > ~/.gemrc  # Disable documentation generation\nbundle config set --local path 'vendor/bundle' # Set the local gem install path\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with your test command (e.g., RSpec)\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57889622_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test:e2e", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sahilm/xvfb-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "x-display", "value": ":99", "CIvars": []}, {"type": "arg", "name": "run", "value": "npm run test:e2e", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "e2e-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/test/results", "CIvars": []}]}]}]}
{"id": "57894768_0", "jobs": [{"name": "update-adf-parameters", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.30.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u \"$AZURE_CLIENT_ID\" -p \"$AZURE_CLIENT_SECRET\" --tenant \"$AZURE_TENANT_ID\"\naz account set --subscription \"$AZURE_SUBSCRIPTION_ID\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Define the parameters file path\nPARAMETERS_FILE=\"path/to/your/parameters.json\" # Update this path\n\n# Replace these values with your ADF details\nRESOURCE_GROUP=\"$RESOURCE_GROUP\"\nDATA_FACTORY_NAME=\"$DATA_FACTORY_NAME\"\nPIPELINE_NAME=\"your-pipeline-name\" # Update with your ADF pipeline name\n\n# Update the pipeline parameters using the Azure CLI\naz datafactory pipeline create --resource-group $RESOURCE_GROUP \\\n  --factory-name $DATA_FACTORY_NAME \\\n  --name $PIPELINE_NAME \\\n  --parameters @\"$PARAMETERS_FILE\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57895117_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jekyll/jekyll-action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "theme", "value": "YOUR_THEME_NAME", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\nbundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "57916983_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.npm", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm audit --audit-level=high", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-external/action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "arg1", "value": "value1", "CIvars": []}, {"type": "arg", "name": "arg2", "value": "value2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm cache clean --force", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57960912_3", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, json, zip, gd, bcmath, soap", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento setup:upgrade\nphp bin/magento setup:di:compile\nphp bin/magento setup:static-content:deploy -f\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have tests set up\nphp vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57965588_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57983778_0", "jobs": [{"name": "setup-python-environment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pyenv/pyenv-installer", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.10.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# On Ubuntu and MacOS, use your shell to create the virtual environment\n# For Windows, use a shell that supports pyenv if necessary\nif [[ \"$RUNNER_OS\" == \"Linux\" || \"$RUNNER_OS\" == \"macOS\" ]]; then\n  echo \"Setting up virtual environment on $RUNNER_OS\"\n  pyenv virtualenv 3.10.0 myenv\n  pyenv activate myenv\nelse\n  echo \"Preparing for Windows...\"\n  pyenv install 3.10.0\n  pyenv virtualenv 3.10.0 myenv\n  pyenv activate myenv\nfi\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"$RUNNER_OS\" == \"Linux\" || \"$RUNNER_OS\" == \"macOS\" ]]; then\n  pyenv activate myenv\nelse\n  pyenv activate myenv\nfi\npytest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "57998312_0", "jobs": [{"name": "create_trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "YOUR_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud alpha builds triggers create github \\\n  --repo-name=YOUR_REPO_NAME \\\n  --repo-owner=YOUR_REPO_OWNER \\\n  --branch-pattern=YOUR_BRANCH_PATTERN \\\n  --build-config=cloudbuild.yaml \\\n  --name=YOUR_TRIGGER_NAME \\\n  --description=\"Created by GitHub Actions\" \\\n  --trigger-template=YOUR_TRIGGER_TEMPLATE \\\n  --included-files=\"**/*.js, **/*.py\" # Optionally specify patterns\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58041940_0", "jobs": [{"name": "R", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "yoanlc/r-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "R -e 'if (!requireNamespace(\"remotes\")) install.packages(\"remotes\", repos = \"http://cran.rstudio.com/\")'\nR -e 'remotes::install_cran(c(\"ggplot2\", \"qqplotr\", \"dplyr\"))' # Add other necessary packages here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript path/to/your_script.R\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58110620_0", "jobs": [{"name": "create-pull-request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GH_TOKEN }}", "CIvars": [{"name": "GH_TOKEN", "expression": "secrets.GH_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit checkout -b feature/my-new-feature\n# Make your changes here, e.g., create or modify files\necho \"This is a new feature\" >> new-feature.txt\ngit add new-feature.txt\ngit commit -m \"Add new feature\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin feature/my-new-feature", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gh pr create --base main --head feature/my-new-feature --title \"Add New Feature\" --body \"This PR adds a new feature.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58182869_0", "jobs": [{"name": "setup-webhook", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "joshuaavalon/setup-oc", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.OPENSHIFT_TOKEN }}", "CIvars": [{"name": "OPENSHIFT_TOKEN", "expression": "secrets.OPENSHIFT_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "server", "value": "${{ secrets.OPENSHIFT_URL }}", "CIvars": [{"name": "OPENSHIFT_URL", "expression": "secrets.OPENSHIFT_URL", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Define variables\nAPP_NAME=my-app # Change this to your application name\nWEBHOOK_URL=${{ secrets.MY_WEBHOOK_URL }}\n\n# Create the webhook configuration\noc create -f - <<EOF\napiVersion: v1\nkind: Webhook\nmetadata:\n  name: my-webhook\n  namespace: my-namespace # Change this to your target namespace\nspec:\n  url: $WEBHOOK_URL\nEOF\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Check if the webhook was created successfully\noc get webhook -n my-namespace # Change this to your target namespace\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58184822_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test:coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "channel", "value": "#your-channel", "CIvars": []}, {"type": "arg", "name": "username", "value": "GitHub Actions", "CIvars": []}, {"type": "arg", "name": "icon_emoji", "value": ":octocat:", "CIvars": []}]}]}]}
{"id": "58198021_0", "jobs": [{"name": "update-assemblyversion", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "$buildNumber = $GITHUB_RUN_NUMBER.ToString()\n$assemblyInfoPath = \"path_to_your/AssemblyInfo.cs\" # Change to your actual path\n\n# Read the contents of the AssemblyInfo file\n$content = Get-Content -Path $assemblyInfoPath\n\n# Update the AssemblyVersion line\n$newVersion = \"1.0.$buildNumber\"  # You can customize the version as needed\n$updatedContent = $content -replace '(AssemblyVersion\\(\".*\"\\))', \"`$1`r`nAssemblyVersion(`\"$newVersion`\")\"\n\n# Write the updated contents back to the AssemblyInfo file\nSet-Content -Path $assemblyInfoPath -Value $updatedContent\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add path_to_your/AssemblyInfo.cs  # Change to your actual path\ngit commit -m \"Update AssemblyVersion to $newVersion\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58200400_0", "jobs": [{"name": "send_slack_message", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "custom_payload", "value": "{\n  \"text\": \"A new commit has been pushed to the main branch!\",\n  \"attach\": [\n    {\n      \"title\": \"Commit Details\",\n      \"text\": \"Commit message: ${{ github.event.head_commit.message }}\\n\\nCommitter: ${{ github.event.head_commit.author.name }}\\n\\nView commit: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${{ github.event.after }}\",\n      \"color\": \"${{ job.status == 'success' && '#36a64f' || '#ff0000' }}\"\n    }\n  ]\n}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.head_commit.author.name", "expression": "github.event.head_commit.author.name", "type": "context"}, {"name": "GITHUB_SERVER_URL", "expression": "GITHUB_SERVER_URL", "type": "context"}, {"name": "GITHUB_REPOSITORY", "expression": "GITHUB_REPOSITORY", "type": "context"}, {"name": "event.after", "expression": "github.event.after", "type": "context"}, {"name": "status", "expression": "job.status == 'success' && '#36a64f' || '#ff0000'", "type": "job"}, {"name": "status", "expression": "job.status", "type": "job"}]}]}]}]}
{"id": "58220283_0", "jobs": [{"name": "bazel-analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "bazel-version", "value": "5.3.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.cache/bazel", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-bazel-${{ hashFiles('**/BUILD', '**/*.bzl', '**/*.proto') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-bazel-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "# Set the remote cache configuration\necho 'remoteCache = \"https://your-remote-cache-url\"' >> ~/.bazelrc\n\n# Example command to analyze the remote cache\nbazel query --output=build //... > analysis_output.txt\n\n# Run additional analysis tools here if needed\n# For example, you can call a Python script to analyze the analysis_output.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "analysis-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "analysis_output.txt", "CIvars": []}]}]}]}
{"id": "58229687_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods/", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/Library/Developer/Xcode/DerivedData/*\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-derived-data-${{ hashFiles('**/*.xcodeproj/*.pbxproj') }}-${{ matrix.configuration }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "configuration", "expression": "matrix.configuration", "type": "matrix"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-derived-data-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration ${{ matrix.configuration }} -sdk iphonesimulator -derivedDataPath ~/Library/Developer/Xcode/DerivedData\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration ${{ matrix.configuration }} -sdk iphonesimulator -derivedDataPath ~/Library/Developer/Xcode/DerivedData test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58235867_0", "jobs": [{"name": "send-webhook", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "fjogeleit/http-request-action", "version": "v1.4.0", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://your-webhook-url.com", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{ \"Content-Type\": \"application/json\", \"X-GitHub-Crumb\": \"${{ secrets.GITHUB_CRUMB }}\"  # Ensure you store your crumb in GitHub secrets for security }", "CIvars": [{"name": "GITHUB_CRUMB", "expression": "secrets.GITHUB_CRUMB", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "{ \"ref\": \"${{ github.ref }}\", \"repository\": \"${{ github.repository }}\", \"actor\": \"${{ github.actor }}\" }", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "actor", "expression": "github.actor", "type": "context"}]}]}]}]}
{"id": "58245176_0", "jobs": [{"name": "create-aks", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "clientId", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "clientSecret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenantId", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az group create --name myResourceGroup --location eastus\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --enable-addons monitoring --generate-ssh-keys\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --overwrite-existing\nkubectl get nodes\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az aks delete --resource-group myResourceGroup --name myAKSCluster --yes --no-wait\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58291620_0", "jobs": [{"name": "deploy_css", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, xml, curl, gd, zip, mysqli", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento setup:upgrade\nphp bin/magento setup:di:compile\nphp bin/magento setup:static-content:deploy -f\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento cache:clean && php bin/magento cache:flush", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento setup:static-content:deploy en_US -f", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento indexer:reindex", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/magento cache:clean && php bin/magento cache:flush", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58318733_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${NANODOCK_PASSWORD}\" | nanobox login \"${NANODOCK_USERNAME}\" --password\nnanobox deploy\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed to Nanobox!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58324369_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p target/artifacts\ncp target/*.jar target/artifacts/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "http://your-gocd-server:8153/go/api/v1/pipeline/<pipeline_name>/material", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "Authorization: Bearer ${{ secrets.GOCD_API_TOKEN }}\nContent-Type: application/json\n", "CIvars": [{"name": "GOCD_API_TOKEN", "expression": "secrets.GOCD_API_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "{\n  \"artifact\": {\n    \"file\": \"target/artifacts/*.jar\"\n  }\n}\n", "CIvars": []}]}]}]}
{"id": "58360374_1", "jobs": [{"name": "check_order", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Load desired order\nDESIRED_ORDER=$(ruby -ryaml -e \"puts YAML.load_file('_data/order.yml')['order'].to_yaml\")\n\n# Get collection items from _jekyll/_includes/collection\nACTUAL_ORDER=$(ls _collections/my_collection_directory/*.md | sort)\n\n# Compare desired order with actual order\nif [[ \"$DESIRED_ORDER\" != \"$ACTUAL_ORDER\" ]]; then\n  echo \"Collection is not ordered correctly.\"\n  echo \"Expected: $DESIRED_ORDER\"\n  echo \"Found: $ACTUAL_ORDER\"\n  exit 1 # Fail the action if the order does not match\nelse\n  echo \"Collection is ordered correctly.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58379262_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nflutter build ios --release --no-codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58414361_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results/", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "some-notification-action-here", "version": null, "shell": "bash", "with": []}]}]}
{"id": "58431074_0", "jobs": [{"name": "handle-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"PR title: ${{ steps.pr_info.outputs.title }}\"\necho \"PR body: ${{ steps.pr_info.outputs.body }}\"\n\n# Perform your operation here. For example, appending a message.\nnew_body=\"${{ steps.pr_info.outputs.body }}\\n\\n---\\n\\nThanks for your contribution! This PR is being reviewed.\"\necho \"New PR body: $new_body\" > new_body.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const newBody = await require('fs').promises.readFile('new_body.txt', 'utf-8');\nawait github.pulls.update({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  pull_number: context.payload.pull_request.number,\n  body: newBody\n});\n", "CIvars": []}]}]}]}
{"id": "58441207_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Setting up environment variables.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane your_lane_name", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58473097_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y mariadb-server  # Example for MariaDB\nsudo service mysql start\necho \"CREATE DATABASE IF NOT EXISTS your_database_name;\" | mysql -u root  # Replace with your DB credentials and name\n# You may also want to run a setup script to create necessary users and grant permissions.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have migrations, run them here\n# php your_migration_script.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you have tests, run them here\n# Example: phpunit tests/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This is a sample command to call your stored procedures\n# You might execute a PHP script that interacts with your database and calls the procedures.\nphp call_stored_procedures.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"DROP DATABASE your_database_name;\" | mysql -u root  # Clean up after tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58482310_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r app.zip target/*.jar", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "einaregilsson/[email\u00a0protected]", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "access_key", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "secret_key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "region", "value": "${{ secrets.AWS_REGION }}", "CIvars": [{"name": "AWS_REGION", "expression": "secrets.AWS_REGION", "type": "secret"}]}, {"type": "arg", "name": "application", "value": "${{ secrets.EB_APP_NAME }}", "CIvars": [{"name": "EB_APP_NAME", "expression": "secrets.EB_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "environment", "value": "${{ secrets.EB_ENV_NAME }}", "CIvars": [{"name": "EB_ENV_NAME", "expression": "secrets.EB_ENV_NAME", "type": "secret"}]}, {"type": "arg", "name": "version_label", "value": "${{ github.run_id }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "zip_file", "value": "app.zip", "CIvars": []}]}]}]}
{"id": "58501588_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "xcpretty/action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install  # if you're using CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme \"YourSchemeName\" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58522811_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBE_CONFIG}\" > ~/.kube/config\nkubectl config use-context \"${KUBE_CONTEXT}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install \\\n  $RELEASE_NAME $CHART_DIR \\\n  --namespace $HELM_NAMESPACE \\\n  --create-namespace \\\n  --values ./path/to/your/values.yaml # Path to values file if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get pods --namespace $HELM_NAMESPACE\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58536038_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_HUB_USERNAME }}", "CIvars": [{"name": "DOCKER_HUB_USERNAME", "expression": "secrets.DOCKER_HUB_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}", "CIvars": [{"name": "DOCKER_HUB_ACCESS_TOKEN", "expression": "secrets.DOCKER_HUB_ACCESS_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker build -t my-app:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker tag my-app:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest\ndocker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "imranbarza/setup-kubeconfig", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "kubeconfig", "value": "${{ secrets.KUBECONFIG }}", "CIvars": [{"name": "KUBECONFIG", "expression": "secrets.KUBECONFIG", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml # Path to your deployment file\nkubectl apply -f k8s/service.yaml    # Path to your service file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/my-app # Change my-app to your deployment name\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "imranbarza/setup-kubeconfig", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "kubeconfig", "value": "${{ secrets.KUBECONFIG }}", "CIvars": [{"name": "KUBECONFIG", "expression": "secrets.KUBECONFIG", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "kubectl wait --for=condition=available --timeout=600s deployment/my-app\n# Example command to run your tests\nkubectl exec -ti $(kubectl get pod -l app=my-app -o jsonpath='{.items[0].metadata.name}') -- /app/tests/e2e-tests.sh\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58621271_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs 4 --retry 3", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rake db:create\nbundle exec rake db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test  # Adjust this command based on your testing framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58622014_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, zip, openssl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force\nphp artisan db:seed --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install\nnpm run production\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "${{ secrets.DEPLOY_PATH }}", "CIvars": [{"name": "DEPLOY_PATH", "expression": "secrets.DEPLOY_PATH", "type": "secret"}]}, {"type": "arg", "name": "exclude", "value": ".git*\nnode_modules\nstorage/*\n.env\n", "CIvars": []}]}]}]}
{"id": "58628798_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "feature-branch", "CIvars": []}, {"type": "arg", "name": "path", "value": "feature", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit tests/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58648330_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/aws-cli-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws_access_key_id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws_secret_access_key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws_region", "value": "us-east-1", "CIvars": []}, {"type": "arg", "name": "args", "value": "amplify publish", "CIvars": []}]}]}]}
{"id": "58649037_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace the following line with your command to generate output\necho \"Build Output Information\" > output.txt\n# You can append other relevant info as well\necho \"Additional information about the build.\" >> output.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "eyeore/pull-request-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pr_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "comment", "value": "Here is the build output:\n\n```plaintext\n${{ steps.generate_output.outputs.build_output }}\n```\n", "CIvars": [{"name": "generate_output.outputs.build_output", "expression": "steps.generate_output.outputs.build_output", "type": "steps"}]}]}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=build_output::$(cat output.txt)\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58767677_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-qemu-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "${{ secrets.DOCKER_USERNAME }}/your-image-name:latest", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBECONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment-name your-container-name=${{ secrets.DOCKER_USERNAME }}/your-image-name:latest --record\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58785448_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull_request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge_method", "value": "merge", "CIvars": []}]}]}]}
{"id": "58789808_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfaction/ssh", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.VPS_HOST }}", "CIvars": [{"name": "VPS_HOST", "expression": "secrets.VPS_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.VPS_USERNAME }}", "CIvars": [{"name": "VPS_USERNAME", "expression": "secrets.VPS_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "key", "value": "${{ secrets.VPS_SSH_KEY }}", "CIvars": [{"name": "VPS_SSH_KEY", "expression": "secrets.VPS_SSH_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "scp -r ./local-path/ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/remote-path/  # Specify local and remote paths\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58804112_0", "jobs": [{"name": "tekton", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "imranismail/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "kubectl apply -f tekton-pipeline.yaml\n# Wait for the pipeline to complete - adjust according to your needs\nkubectl wait --for=condition=complete --timeout=600s pipelinerun/<pipeline-run-name>\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "manual_cd", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl -s \"https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest\" \\\n| grep \"browser_download_url.*kustomize.*linux.*amd64\" \\\n| cut -d : -f 2,3 \\\n| tr -d \\\" \\\n| wget -qi -\nchmod +x kustomize\nsudo mv kustomize /usr/local/bin/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd k8s/manifests   # Adjust the path to your Kustomize manifests\nkustomize build . | kubectl apply -f -\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58822380_0", "jobs": [{"name": "check-mime-type", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Change to the directory where your .gem file is located if necessary\nFILE=\"path/to/your/file.gem\"\nMIME_TYPE=$(file --mime-type -b \"$FILE\")\necho \"MIME type of $FILE is $MIME_TYPE\"\n\n# Check if the MIME type is application/x-gem\nif [ \"$MIME_TYPE\" != \"application/x-gem\" ]; then\n  echo \"Error: MIME type is not application/x-gem!\"\n  exit 1\nfi\necho \"MIME type is valid.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58824326_0", "jobs": [{"name": "set_encoding", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Running Python script with UTF-8 encoding...\"\npython your_script.py  # Replace with your actual script name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58825421_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew wrapper --gradle-version 7.0", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "microsoft/appcenter-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app_id", "value": "${{ secrets.APPCENTER_APP_ID }}", "CIvars": [{"name": "APPCENTER_APP_ID", "expression": "secrets.APPCENTER_APP_ID", "type": "secret"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.APPCENTER_API_TOKEN }}", "CIvars": [{"name": "APPCENTER_API_TOKEN", "expression": "secrets.APPCENTER_API_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "build_directory", "value": "app/build/outputs/apk", "CIvars": []}, {"type": "arg", "name": "distribution_groups", "value": "testers", "CIvars": []}]}]}]}
{"id": "58832782_0", "jobs": [{"name": "post-file", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Specify the file you want to read\nFILE_PATH=\"path/to/your/file.txt\"\nif [[ -f \"$FILE_PATH\" ]]; then\n  CONTENT=$(cat \"$FILE_PATH\")\n  echo \"BODY<<EOF\" >> $GITHUB_ENV\n  echo \"$CONTENT\" >> $GITHUB_ENV\n  echo \"EOF\" >> $GITHUB_ENV\nelse\n  echo \"File not found\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "fjogeleit/http-request-action", "version": "v1.1.1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://api.example.com/endpoint", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{\"Content-Type\": \"application/json\"}", "CIvars": []}, {"type": "arg", "name": "body", "value": "${{ env.BODY }}", "CIvars": [{"name": "BODY", "expression": "env.BODY", "type": "env"}]}]}]}]}
{"id": "58883811_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nfastlane deploy # Call your Fastlane lane for deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58884313_0", "jobs": [{"name": "check-merged-prs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2.12.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Get the number of commits included in the last merge commit\nlast_commit_sha=$(git rev-parse HEAD)\nmerged_prs=$(gh pr list --state merged --json number,mergedAt --jq '.[] | select(.mergedAt < \"'$(git show -s --format=%ci -n 1 $last_commit_sha)'\") | .number')\necho \"Merged PRs before the last one: $merged_prs\"\necho \"::set-output name=merged_prs::$merged_prs\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Multiple pull requests were merged!\"\necho \"Merged PRs: ${{ steps.merged_prs.outputs.merged_prs }}\"\n# Here you could trigger your notification method of choice (e.g., Slack, Discord, etc.)\n# Or run a script to revert the last PR, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58912698_0", "jobs": [{"name": "authenticate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Escape the username and password from secrets\necho \"escaped_username=$(echo -n ${{ secrets.GEM_USERNAME }} | jq -sRr @uri)\" >> $GITHUB_ENV\necho \"escaped_password=$(echo -n ${{ secrets.GEM_PASSWORD }} | jq -sRr @uri)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Escaped Username: $escaped_username\"\n# Note: Avoid printing sensitive information in the logs in a real workflow.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"//rubygems.org/ruby/auth\" > ~/.gem/credentials\necho \"   ---\" >> ~/.gem/credentials\necho \"   :username: $escaped_username\" >> ~/.gem/credentials\necho \"   :password: $escaped_password\" >> ~/.gem/credentials\nchmod 600 ~/.gem/credentials  # Secure the file\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58931170_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-reports", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/junit-report", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "target/surefire-reports/*.xml", "CIvars": []}]}]}]}
{"id": "58947282_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$CERTIFICATE_BASE64\" | base64 --decode > certificate.p12\necho \"$PROVISIONING_PROFILE_BASE64\" | base64 --decode > profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p password build.keychain\nsecurity import certificate.p12 -k build.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T /usr/bin/codesign\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p password build.keychain\nsecurity set-keychain-settings -t 3600 -u build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\ncp profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios  # Navigate to your iOS directory\nfastlane build  # Ensure you have a Fastlane lane set up for building\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security delete-keychain build.keychain", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "58973423_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "cache-bundle", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jekyll-site", "CIvars": []}, {"type": "arg", "name": "path", "value": "_site/", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jekyll-site", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "58975112_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "android-apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter build ios --release\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59018772_0", "jobs": [{"name": "laravel-ci", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5904335_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions/setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y g++ cmake google-mock\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\ncmake --build .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59068496_0", "jobs": [{"name": "generate-strings", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install axios", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create the script to fetch data and create strings.xml\necho \"const axios = require('axios');\" > generate-strings.js\necho 'axios.get(\"YOUR_API_ENDPOINT_HERE\")' >> generate-strings.js\necho '  .then(response => {' >> generate-strings.js\necho '    const data = response.data;' >> generate-strings.js\necho '    let xmlContent = \"<resources>\";' >> generate-strings.js\necho '    for (const key in data) {' >> generate-strings.js\necho '      xmlContent += `<string name=\\\"${key}\\\">${data[key]}</string>`;' >> generate-strings.js\necho '    }' >> generate-strings.js\necho '    xmlContent += \"</resources>\";' >> generate-strings.js\necho '    require(\"fs\").writeFileSync(\"app/src/main/res/values/strings.xml\", xmlContent);' >> generate-strings.js\necho '  })' >> generate-strings.js\necho '  .catch(error => console.error(error));' >> generate-strings.js\n\n# Execute the script\nnode generate-strings.js\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add app/src/main/res/values/strings.xml\ngit commit -m \"Update strings.xml from API response\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push-action", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "main", "CIvars": []}]}]}]}
{"id": "5907847_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "5.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, openssl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -L -o phpunit.phar https://phar.phpunit.de/phpunit-3.5.13.phar\nchmod +x phpunit.phar\nsudo mv phpunit.phar /usr/local/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y openjdk-8-jre\ncurl -L -o selenium-server-standalone.jar https://selenium-release.storage.googleapis.com/2.53/selenium-server-standalone-2.53.1.jar\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "java -jar selenium-server-standalone.jar > selenium.log 2>&1 &\nsleep 5  # Wait for the server to start\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit --testsuite mytests --report-dir reports --log-junit reports/junit.xml\n# You can change 'mytests' to your specific test suite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p reports\ncp reports/junit.xml reports/junit-$(date +%Y%m%d%H%M%S).xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "PHPUnit Test Results", "CIvars": []}, {"type": "arg", "name": "body", "value": "PHPUnit tests completed. Please find the attached report.\nTest results can be found here: ${{ github.workspace }}/reports/*\n", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}, {"type": "arg", "name": "attachments", "value": "reports/*.xml", "CIvars": []}, {"type": "arg", "name": "smtp-server", "value": "smtp.gmail.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "secure", "value": true, "CIvars": []}]}]}]}
{"id": "59104693_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-clid", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "Azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}, {"type": "arg", "name": "subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Replace these variables with your Data Factory parameters\nRESOURCE_GROUP=\"your-resource-group\"\nDATA_FACTORY_NAME=\"${{ secrets.DATA_FACTORY_NAME }}\"\nARM_TEMPLATE_PATH=\"./path/to/your/arm/template.json\" # Set the correct path to your ARM template\nPARAMETERS_FILE=\"./path/to/your/parameters.json\" # Set the correct path to your parameters file\n\n# Validate the ARM template\naz deployment group validate \\\n    --resource-group $RESOURCE_GROUP \\\n    --template-file $ARM_TEMPLATE_PATH \\\n    --parameters @$PARAMETERS_FILE\n\n# Deploy the ARM template\naz deployment group create \\\n    --resource-group $RESOURCE_GROUP \\\n    --template-file $ARM_TEMPLATE_PATH \\\n    --parameters @$PARAMETERS_FILE\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59162422_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt  # For Python projects\n# npm install  # For Node.js projects, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # For Python projects\n# npm test  # For Node.js projects, etc.\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "pullreminders/pullreminders-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "your-team-name-or-gitHub-username", "CIvars": []}]}]}]}
{"id": "59178635_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo ${{ secrets.DEVELOPER_P12 }} | base64 --decode > ~/cert.p12", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity import ~/cert.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.DEVELOPER_CERT_PASSWORD }} -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/build.keychain\nsecurity unlock-keychain -p \"\" ~/Library/Keychains/build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" ~/Library/Keychains/build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane your_lane_name # Replace 'your_lane_name' with the lane you want to run\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security delete-keychain build.keychain\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59184288_1", "jobs": [{"name": "run-powershell-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh -File script.ps1 -name \"GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59209383_0", "jobs": [{"name": "coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If using RSpec, for example\nbundle exec rspec --format documentation --out coverage/report.txt\n# Generate the coverage report (adjust as needed)\n# Note: Replace <coverage-tool> with the tool you're using e.g. 'SimpleCov', 'COVI'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bash <(curl -s https://codecov.io/bash) -f coverage/.resultset.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59284394_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-docker-repo/your-image-name:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "jfrog/setup-jfrog-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.20.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "jfrog rt c --url ${JFROG_URL} --user ${JFROG_USER} --password ${JFROG_API_KEY}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "jfrog rt scan --project=your-project-name --docker --image=your-docker-repo/your-image-name:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "jfrog rt s \"your-docker-repo/your-image-name:latest\" --limit=1 --sort=created | jq -r '.[] | .issues[]'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59353589_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "13.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd your_project_directory  # Navigate to your project directory\npod install  # Run this if you are using CocoaPods\n# Add other commands to install dependencies, e.g., Carthage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_project_directory  # Navigate to your project directory\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath $PWD/build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_project_directory  # Navigate to your project directory\nxcodebuild -exportArchive -archivePath $PWD/build/YourApp.xcarchive -exportOptionsPlist YourExportOptions.plist -exportPath $PWD/build/YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ncipollo/release-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "artifacts", "value": "build/YourApp.ipa  # Path to your IPA file\n", "CIvars": []}, {"type": "arg", "name": "tag", "value": "${{ github.run_id }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "59368542_0", "jobs": [{"name": "capture-html", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://<username>.github.io/<repository>", "CIvars": []}, {"type": "arg", "name": "method", "value": "GET", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ steps.capture-html.outputs.response }}\" > live-html.html", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add live-html.html\ngit commit -m \"Update captured HTML\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59469154_0", "jobs": [{"name": "check-unresolved", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git diff-index --quiet HEAD || echo \"Uncommitted changes present\" > $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git merge-base --is-ancestor ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} || echo \"Merge conflicts present\" > $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "MESSAGE=\"The branch is unresolved due to the following issues:\\n\"\nif [ -n \"$env.Uncommitted_changes\" ]; then\n  MESSAGE+=\"\u2022 Uncommitted changes present\\n\"\nfi\nif [ -n \"$steps.check_merge_conflicts.outputs.conflict_found\" ]; then\n  MESSAGE+=\"\u2022 Merge conflicts present\\n\"\nfi\ncurl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d \"{\\\"body\\\": \\\"$MESSAGE\\\"}\" \"${{ github.event.pull_request.comments_url }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59532398_0", "jobs": [{"name": "R-CMD-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('remotes')\nremotes::install_github('tidyverse/tidyverse')  # Install the latest version of Tidyverse from GitHub\ninstall.packages('devtools')  # Install devtools if not already installed\ninstall.packages('roxygen2')  # Install roxygen2 for package documentation\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD build .\nR CMD check --as-cran *.tar.gz\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'library(testthat); test_dir(\"tests\")'  # Adjust the path as necessary to your tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'covr::package_coverage()'  # This will run coverage checks, adjust as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59549085_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBE_CONFIG_DATA}\" | base64 -d > ~/.kube/config\nchmod 600 ~/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml  # Path to your k8s manifest\nkubectl apply -f k8s/service.yaml      # Path to your k8s service manifest\n# If you use Helm charts, you could use the Helm command here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment successful!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59619527_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mcr.microsoft.com/mssql/server:2019-latest", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "/wait /ACCEPT_EULA /SA_PASSWORD=YourStrong@Passw0rd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "while ! nc -z localhost 1433; do   \n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create a database and a table with an Always Encrypted column\n/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P $SA_PASSWORD -d master -Q \"\nCREATE DATABASE TestDb;\nGO\nUSE TestDb;\nCREATE TABLE TestTable (\n  Id INT PRIMARY KEY IDENTITY(1,1),\n  EncryptedColumn VARBINARY(256) COLLATE Latin1_General_BIN2 ENCRYPTED WITH (\n    ENCRYPTION_TYPE = Deterministic,\n    ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256',\n    ENCRYPTION_KEY = MyEncryptionKey\n  )\n);\nGO\n\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Seeding data or running migrations needed for tests...\"\n# Example command to run migration\n# dotnet ef database update\n# Seed initial data if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests...\"\n# Command to run your test suite (adjust as needed)\n# dotnet test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n# Commands to clean up after tests, if necessary (e.g., database teardown)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59632173_0", "jobs": [{"name": "R-CMD-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('httr')\n# Add other packages your project needs, for example:\n# install.packages(c('dplyr', 'ggplot2'))\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"\nlibrary(httr)\n# Example code to authenticate using the GITHUB_TOKEN\ngithub_token <- Sys.getenv('GITHUB_TOKEN')\n# Make a GET request to GitHub API\nresponse <- GET('https://api.github.com/user', \n                add_headers(Authorization = paste('token', github_token)))\nstop_for_status(response)\ncat(content(response, 'text'), sep = '\\n')\n\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R  # Replace with your R script\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59647104_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "${{ github.event.pull_request.head.sha }}", "CIvars": [{"name": "event.pull_request.head.sha", "expression": "github.event.pull_request.head.sha", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59656454_0", "jobs": [{"name": "build_and_push", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install --repo-update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourPodDirectory\n# Replace YourPodDirectory with your actual pod directory\npod lib lint --allow-warnings\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Loop through each pod and push to CDN with eventual consistency\nfor podspec in YourPodDirectory/*.podspec; do\n  pod repo push YourRepoName \"$podspec\" --allow-warnings --skip-import-validation\n  \n  # Here we wait a bit before trying to push the next pod\n  echo \"Waiting for consistency after pushing $podspec...\"\n  sleep 30  # Adjust this delay as needed (in seconds)\ndone\n# If you're using a public repo, also consider running the following command\n# pod trunk push \"$podspec\" --allow-warnings --skip-import-validation\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\ncd YourPodDirectory  # Go back to your pod directory\nrm -rf *.xcworkspace\nrm -rf Pods\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59701790_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example: Copying dependencies to a directory.\nmkdir -p dependencies\ncp -r .packages dependencies/\ncp -r pubspec.lock dependencies/\ncp -r pubspec.yaml dependencies/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-dependencies", "CIvars": []}, {"type": "arg", "name": "path", "value": "dependencies", "CIvars": []}]}]}]}
{"id": "59813998_2", "jobs": [{"name": "test", "steps": []}, {"name": "deploy", "steps": []}]}
{"id": "59827969_1", "jobs": [{"name": "validate-webconfig", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": ".\\validate-webconfig.ps1\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "59847947_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/${{ github.repository }}/commits/${{ github.sha }}/status", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "mediaType", "value": "{\"application/vnd.github.v3+json\"}", "CIvars": []}, {"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "context", "value": "Continuous Integration", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build status updated for commit ${{ github.sha }}\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59848113_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "swift-ci/setup-swift", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "swift-version", "value": "5.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59859194_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane [lane_name]", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59865817_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Create a branch for the PR if necessary\ngit checkout -b pr-branch\n\n# Push changes to the branch (if any changes are needed)\ngit add .\ngit commit -m \"Sync changes\" || echo \"No changes to commit\"\ngit push origin pr-branch --force\n\n# Create Pull Request to Base Repo\ngh pr create --base main --head pr-branch --title \"Auto PR from fork\" --body \"This PR was created automatically when a PR was made to the fork.\" --repo $BASE_REPO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "5988928_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer global require phpunit/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming installation is via Composer\ncomposer global require pear/phpundercontrol\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpundercontrol --version || echo \"PHPUnderControl not installed properly\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up after installation.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "59974515_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, ctype, fileinfo", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate --show --no-interaction | tr -d '\\n' | xargs -I {} php artisan config:set APP_KEY {}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "./coverage.xml", "CIvars": []}]}]}]}
{"id": "60019053_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "msys2/setup-msys2", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "package", "value": "mamba", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda create --name myenv python=3.8  # Specify your Python version\nconda activate myenv\nconda install pip  # Install pip if necessary\npip install -r requirements.txt  # Assumes you have a requirements.txt file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda activate myenv\n# Replace 'pytest' with your test command, if necessary\npytest  # Assuming you are using Pytest to run tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda deactivate\nconda remove --name myenv --all  # Clean up the environment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60024694_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-dev", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev phpunit/php-code-coverage\nvendor/bin/phpunit --coverage-clover=coverage.xml\nbash <(curl -s https://codecov.io/bash) # Upload coverage report to Codecov (optional)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run-script php-cs-fixer", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR2 src/", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60032405_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Hosting-Action", "version": "v2.2.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "firebaseDeployCommand", "value": "deploy", "CIvars": []}]}]}]}
{"id": "60032962_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "FirebaseExtended/action-hosting-deploy", "version": "v0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "channelId", "value": "${{ github.ref_name }}", "CIvars": [{"name": "ref_name", "expression": "github.ref_name", "type": "context"}]}, {"type": "arg", "name": "projectId", "value": "${{ secrets.FIREBASE_PROJECT_ID }}", "CIvars": [{"name": "FIREBASE_PROJECT_ID", "expression": "secrets.FIREBASE_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "siteId", "value": "${{ secrets.FIREBASE_SITE_ID }}", "CIvars": [{"name": "FIREBASE_SITE_ID", "expression": "secrets.FIREBASE_SITE_ID", "type": "secret"}]}]}]}]}
{"id": "60034139_0", "jobs": [{"name": "access-secrets", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GOOGLE_CLOUD_SA_KEY }}", "CIvars": [{"name": "GOOGLE_CLOUD_SA_KEY", "expression": "secrets.GOOGLE_CLOUD_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "YOUR_PROJECT_ID", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace 'YOUR_SECRET_NAME' with the name of the secret you want to access\nSECRET_NAME='projects/YOUR_PROJECT_ID/secrets/YOUR_SECRET_NAME/versions/latest'\nSECRET_VALUE=$(gcloud secrets versions access latest --secret=YOUR_SECRET_NAME)\necho \"SECRET_VALUE=${SECRET_VALUE}\" >> $GITHUB_ENV\n\n# Example of using the secret value in the build process\necho \"The secret value is: $SECRET_VALUE\"  # Be careful not to log sensitive information\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Using the secret value in further steps\"\n# Here you can utilize the SECRET_VALUE in your build process\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60081110_3", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build --destination ./_site\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "60085388_0", "jobs": [{"name": "upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -archivePath ./YourApp.xcarchive archive\nxcodebuild -exportArchive -archivePath ./YourApp.xcarchive -exportOptionsPlist ./ExportOptions.plist -exportPath ./build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun altool --upload-app --type osx --file ./build/YourApp.app --apiKey \"${APP_STORE_CONNECT_API_KEY}\" --issuer \"${APP_STORE_CONNECT_ISSUER_ID}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60087486_1", "jobs": [{"name": "build-java-8", "steps": []}, {"name": "build-java-11", "steps": []}, {"name": "build-java-17", "steps": []}]}
{"id": "60113406_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"FASTLANE_USER=${{ secrets.FASTLANE_USER }}\" >> $GITHUB_ENV\necho \"FASTLANE_PASSWORD=${{ secrets.FASTLANE_PASSWORD }}\" >> $GITHUB_ENV\necho \"APP_ID=${{ secrets.APP_ID }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane your_lane_name", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60133485_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/dart-action", "version": "v2.2.0", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart run build_runner test --delete-conflicting-outputs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Test run complete.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60138258_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT }}", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$(gcloud auth print-access-token)\" | docker login -u oauth2accesstoken --password-stdin https://gcr.io\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "google-kubernetes-actions/setup-kaniko", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "image", "value": "gcr.io/${{ secrets.GCP_PROJECT }}/your-image-name:latest", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "cache", "value": "gcr.io/${{ secrets.GCP_PROJECT }}/kaniko-cache:latest", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "dockerfile", "value": "Dockerfile", "CIvars": []}, {"type": "arg", "name": "args", "value": "--destination=gcr.io/${{ secrets.GCP_PROJECT }}/your-image-name:latest\n--cache=true\n", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gsutil cp -r /kaniko/cache gs://$GCP_BUCKET/kaniko-cache/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60138738_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-github-actions", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Optional cleanup step\nrm -rf ./publish\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60153424_1", "jobs": [{"name": "call-reusable", "steps": []}]}
{"id": "60158323_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v0.2.2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCLOUD_KEY }}", "CIvars": [{"name": "GCLOUD_KEY", "expression": "secrets.GCLOUD_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-gcp-project-id", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo '[{\n  \"name\": \"build\",\n  \"args\": [\"--env\", \"${{ matrix.environment }}\"]\n}]' > cloudbuild.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud functions deploy your-function-name \\\n  --runtime nodejs14 \\\n  --trigger-http \\\n  --allow-unauthenticated \\\n  --env=\"${{ matrix.environment }}\" \\\n  --source ./path-to-your-function\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60161296_0", "jobs": [{"name": "update-database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBECONFIG}\" | base64 --decode > $HOME/.kube/config", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y postgresql-client", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Make sure to replace the following with your actual SQL script path\n# Using psql to run a database update script\nkubectl exec -it my-postgres-pod -- psql -U $DATABASE_USER -d my_database -f /path/to/your/script.sql\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60203771_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "6030840_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Replace with the command for your tests (rspec, rails test, etc.)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install rubocop\nbundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install brakeman\nbrakeman --run brakeman\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60334661_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, pdo, pdo_sqlsrv, sqlsrv", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Configuring database...\"\ncat >> application/config/database.php <<EOL\n'\\$db['default'] = array(\n  'dsn'   => '',\n  'hostname' => 'localhost',\n  'username' => 'sa',\n  'password' => 'YourStrong!Passw0rd',\n  'database' => 'your_database_name',\n  'dbdriver' => 'sqlsrv',\n  'dbprefix' => '',\n  'pconnect' => FALSE,\n  'db_debug' => (ENVIRONMENT !== 'production'),\n  'cache_on' => FALSE,\n  'cachedir' => '',\n  'char_set' => 'utf8',\n  'dbcollat' => 'utf8_general_ci',\n  'swap_pre' => '',\n  'encrypt' => FALSE,\n  'compress' => FALSE,\n  'strictOn' => FALSE,\n  'failover' => array(),\n  'save_queries' => TRUE\n);\" > application/config/database.php\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running migrations/tests...\"\n# Add your migration or test command here, e.g., php index.php migrate\n# or phpunit if you have tests set up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Checking for errors...\"\n# Run any commands to verify the application state, for example:\nphp -l application/config/database.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60359952_0", "jobs": [{"name": "create-draft-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Define the draft pull request parameters\nTITLE=\"Draft Pull Request Title\" # Set your PR title\nBODY=\"This is a draft pull request.\" # Set your PR body\nBASE_BRANCH=\"main\" # Set the base branch to merge into\nHEAD_BRANCH=\"feature-branch\" # Set the branch to merge from\n\n# Create the draft pull request\ngh pr create --title \"$TITLE\" --body \"$BODY\" --base \"$BASE_BRANCH\" --head \"$HEAD_BRANCH\" --draft\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60382188_0", "jobs": [{"name": "example_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.test_results.outcome }}\" != \"success\" ]; then\n  echo \"Tests failed, skipping deployment.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60412841_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "einaregilsson/ecs-deploy", "version": "v1.1.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Assuming we use AWS CLI for switching traffic\naws elasticbeanstalk swap-environment-cnames \\\n  --source-environment-name BlueEnv \\\n  --destination-environment-name GreenEnv\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up old task definitions\"\n# Clean up old versions if necessary\naws ecs delete-task-definition --task-definition my-old-task-def\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60431644_0", "jobs": [{"name": "create-folder", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webnpm/action-ssh", "version": "v0.4.0", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "remote-server", "value": "your_remote_server_address", "CIvars": []}, {"type": "arg", "name": "remote-user", "value": "your_username", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "branch_name=$(echo \"${GITHUB_REF#refs/heads/}\")  # Get branch name from GITHUB_REF\nssh -o StrictHostKeyChecking=no your_username@your_remote_server_address \"mkdir -p ~/your_base_directory/\\$branch_name\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60447436_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "goanpeca/setup-miniconda", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "miniconda-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}, {"type": "arg", "name": "activate-environment", "value": "myenv", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda env update -f environment.yml\nconda activate myenv\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda activate myenv\npython -m unittest discover  # or your preferred command to run tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda deactivate\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60493958_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter drive --target=test_driver/app.dart", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60522572_1", "jobs": [{"name": "diff", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git fetch origin\nBASE_COMMIT=$(git rev-parse HEAD^)\nHEAD_COMMIT=$(git rev-parse HEAD)\nphp scripts/method_diff.php $BASE_COMMIT $HEAD_COMMIT\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60527052_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, openssl, PDO, tokenizer, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite=Feature\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running deployment...\"\ncurl -X POST \"https://forge.laravel.com/api/v1/server/${FORGE_SERVER_ID}/site/${FORGE_SITE_ID}/deploy\" \\\n-H \"Authorization: Bearer ${FORGE_API_TOKEN}\" \\\n-H \"Content-Type: application/json\" \\\n-d '{}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60537030_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Adjust this command if you're using a different package manager (e.g., yarn)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust this command if you're using a different build process\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p deployment\nrsync -av --exclude='folder-to-exclude-1/' --exclude='folder-to-exclude-2/' ./ ./deployment/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your_app_service_name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./deployment", "CIvars": []}]}]}]}
{"id": "60544181_1", "jobs": [{"name": "run-ci", "steps": []}]}
{"id": "60592545_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-primary-repo", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "primary-repo", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-secondary-repo", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "path", "value": "secondary-repo", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd primary-repo\nnpm install\ncd ../secondary-repo\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd primary-repo\nnpm run build  # Assuming your build process outputs artifacts\ncd ../secondary-repo\nnpm run build  # Same for secondary repo\n\n# This is an example of merging the outputs, modify as per your needs\nmkdir ../output\ncp secondary-repo/build/* ../output/\ncp primary-repo/build/* ../output/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "v0.5.0", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --follow-symlinks --delete", "CIvars": []}, {"type": "arg", "name": "bucket", "value": "your-s3-bucket-name", "CIvars": []}, {"type": "arg", "name": "source-dir", "value": "output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build artifacts have been uploaded successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60598217_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/bundle", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gems-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"FASTLANE_DONT_STORE_PASSWORD=1\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane <lane_name>", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60674638_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [[ \"${{ matrix.os }}\" == \"ubuntu-20.04\" || \"${{ matrix.os }}\" == \"ubuntu-22.04\" ]]; then\n  sudo apt-get update\n  sudo apt-get install -y puppet\nelif [[ \"${{ matrix.os }}\" == \"centos-7\" ]]; then\n  sudo yum install -y puppet\nelif [[ \"${{ matrix.os }}\" == \"centos-8\" ]]; then\n  sudo dnf install -y puppet\nelif [[ \"${{ matrix.os }}\" == \"windows-latest\" ]]; then\n  choco install puppet --version 7.0.0\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install rspec-puppet\n# Add any other dependencies your tests may require, e.g., puppetlabs_spec_helper\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rspec spec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60683476_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/Dart-Action", "version": "v2.0.1", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60688745_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod install  # or pod update, depending on your needs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod gen  # Adjust command based on your Podfile and requirements.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' build test | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60747659_0", "jobs": [{"name": "bazel-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "bazel-version", "value": "5.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bazel fetch //...      # Fetch Bazel dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bazel test //... --test_output=streamed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Capture and display test results\nbazel test //... --test_output=errors\n# Optionally, run this to provide verbose output in case of failures.\nbazel test //... --test_output=streamed --test_keep_going\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60772886_0", "jobs": [{"name": "move_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.0.1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "request", "value": "POST /projects/columns/{column_id}/cards\n{\n  \"url\": \"${{ github.event.pull_request.url }}\"\n}\n", "CIvars": [{"name": "event.pull_request.url", "expression": "github.event.pull_request.url", "type": "context"}]}]}]}]}
{"id": "60789661_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.1.14f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneWindows64", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Building Unity project...\"\n# Specify your build options here\n# For example: -buildTarget StandaloneWindows64 -quit -batchmode -projectPath . -executeMethod BuildScript.PerformBuild\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\ngit config --local user.name \"GitHub Action\"\n\ngit add .\ngit commit -m \"Automated build output from Unity\" || echo \"No changes to commit\"\n\n# Change 'your_branch_name' to the branch you want to push to\ngit push origin main --force  # Be careful with force push!\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60807821_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y libpq-dev\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:schema:load\nrails db:seed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Change if you're using a different test suite\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60828736_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-docker-repo/your-image:${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > k8s-config\nexport KUBECONFIG=$(pwd)/k8s-config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment-name your-container-name=your-docker-repo/your-image:${{ github.sha }}\nkubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get pods -l app=your-app-label\nif [[ $(kubectl get pods -l app=your-app-label --field-selector=status.phase!=Running --no-headers | wc -l) -gt 0 ]]; then\n  echo \"There are pods that are not running!\"\n  kubectl describe pods -l app=your-app-label\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60839248_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('**/*.xcodeproj', '**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install --repo-update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "iOS-app-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp.app", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}]}]}]}
{"id": "60873580_0", "jobs": [{"name": "run-ruby-script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler  # Install Bundler\nbundle install        # Install project dependencies from Gemfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby your_script.rb  # Replace with the path to your Ruby script\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60906336_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "haskell/actions/setup-haskell", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ghc-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "cabal-version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.cabal/store\n~/.ghc/x86_64-linux-*/\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-cabal-${{ hashFiles('cabal.project', 'cabal.project.local', '**/*.cabal') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-cabal-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "cabal update && cabal install --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60933774_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane ios beta", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"App Submitted for Review. Remember to manually release this version in App Store Connect!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "60952438_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-swift", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "swift-version", "value": "5.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift build\nswift test --disable-sandbox\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61055109_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter analyze", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build and tests successful!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61060647_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jekyll-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "_site", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jekyll-artifacts", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "61060920_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "r", "value": "4.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('blogdown')\nblogdown::install_hugo()  # Optional, if you want to install Hugo automatically\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "library(blogdown)\nblogdown::build_site()\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "61062801_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Make sure you have RSpec in your Gemfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add any build commands if necessary, like:\n# Rake tasks or other build steps\necho \"Build step placeholder\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add deployment commands here, e.g., using Capistrano or Heroku CLI\necho \"Deployment placeholder\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61073199_0", "jobs": [{"name": "update_docs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages(c(\"roxygen2\", \"devtools\"))\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "library(roxygen2)\nlibrary(devtools)\n\n# Generate documentation and update the NAMESPACE and DESCRIPTION files\nroxygen2::roxygenise()\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add R/* man/* DESCRIPTION NAMESPACE\ngit commit -m \"Automated documentation update\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61089693_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Debug build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild archive -workspace YourApp.xcworkspace -scheme YourAppScheme -archivePath build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/YourApp.xcarchive", "CIvars": []}]}]}]}
{"id": "61093519_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dhis2/android-sdk-action", "version": "v1.0.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > $HOME/keystore.jks\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew dependencies  # This will also download the necessary Gradle dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease  # Adjust if you're building a different flavor\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-bundle", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/outputs/bundle/release/*.aab", "CIvars": []}]}]}]}
{"id": "61095291_1", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, json, mysql, gd", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit --configuration phpunit.xml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61096795_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "61114607_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build -t $DOCKER_IMAGE_NAME -f $DOCKERFILE_PATH .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker tag $DOCKER_IMAGE_NAME:latest ${{ steps.ecr.outputs.registry }}/${DOCKER_IMAGE_NAME}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push ${{ steps.ecr.outputs.registry }}/${DOCKER_IMAGE_NAME}:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "awact/elastic-beanstalk-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "application_name", "value": "${{ env.APPLICATION_NAME }}", "CIvars": [{"name": "APPLICATION_NAME", "expression": "env.APPLICATION_NAME", "type": "env"}]}, {"type": "arg", "name": "environment_name", "value": "${{ env.ENVIRONMENT_NAME }}", "CIvars": [{"name": "ENVIRONMENT_NAME", "expression": "env.ENVIRONMENT_NAME", "type": "env"}]}, {"type": "arg", "name": "region", "value": "${{ env.AWS_REGION }}", "CIvars": [{"name": "AWS_REGION", "expression": "env.AWS_REGION", "type": "env"}]}, {"type": "arg", "name": "version_label", "value": "${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "label", "value": "Github action deployment", "CIvars": []}, {"type": "arg", "name": "aws_access_key_id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws_secret_access_key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}]}]}]}
{"id": "61184613_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish --no-build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "61220979_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build -- --prod --base-href /your-repo-name/", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "folder", "value": "dist/your-app-name", "CIvars": []}]}]}]}
{"id": "61242936_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build -t ${{ secrets.ECR_REPOSITORY }} .\ndocker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push ${{ secrets.ECR_REPOSITORY }}:latest\ndocker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecs-update-service", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cluster", "value": "${{ secrets.ECS_CLUSTER }}", "CIvars": [{"name": "ECS_CLUSTER", "expression": "secrets.ECS_CLUSTER", "type": "secret"}]}, {"type": "arg", "name": "service", "value": "${{ secrets.ECS_SERVICE }}", "CIvars": [{"name": "ECS_SERVICE", "expression": "secrets.ECS_SERVICE", "type": "secret"}]}, {"type": "arg", "name": "task-definition", "value": "${{ secrets.ECS_TASK_DEFINITION }}", "CIvars": [{"name": "ECS_TASK_DEFINITION", "expression": "secrets.ECS_TASK_DEFINITION", "type": "secret"}]}, {"type": "arg", "name": "container-image", "value": "${{ secrets.ECR_REPOSITORY }}:latest", "CIvars": [{"name": "ECR_REPOSITORY", "expression": "secrets.ECR_REPOSITORY", "type": "secret"}]}, {"type": "arg", "name": "region", "value": "${{ secrets.AWS_REGION }}", "CIvars": [{"name": "AWS_REGION", "expression": "secrets.AWS_REGION", "type": "secret"}]}]}]}]}
{"id": "61263575_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "61270489_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.npm", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-node-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "label", "steps": [{"type": "shell_cmd", "cmd": "git fetch origin ${{ github.event.pull_request.base.ref }}\nif ! git merge-base --is-ancestor ${{ github.sha }} origin/${{ github.event.pull_request.base.ref }}; then\n  echo \"has_conflicts=true\" >> $GITHUB_ENV\nelse\n  echo \"has_conflicts=false\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/auto-label", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "conflict", "CIvars": []}]}]}]}
{"id": "61290397_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$IOS_CERTIFICATE\" | base64 --decode > code_sign.p12\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$PROVISIONING_PROFILE\" | base64 --decode > ./profiles/profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity import code_sign.p12 -k ~/Library/Keychains/build.keychain -P $IOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity set-keychain-settings -t 3600 -u build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\ncp ./profiles/profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourAppScheme \\\n           -sdk iphoneos \\\n           -configuration Release \\\n           CODE_SIGN_IDENTITY=\"iPhone Distribution\" \\\n           CODE_SIGN_STYLE=\"Manual\" \\\n           PROVISIONING_PROFILE_SPECIFIER=\"Your Provisioning Profile Name\" \\\n           clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace \\\n                -scheme YourAppScheme \\\n                -sdk iphonesimulator \\\n                -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyAppBuild", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/Release-iphoneos/YourApp.app", "CIvars": []}]}]}]}
{"id": "61354330_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages(\"devtools\") # Install devtools for GitHub installation\ndevtools::install_github(\"username/repo\") # Replace with your GitHub repo\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'devtools::test()'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61419552_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comments", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thanks for your contribution! We appreciate your effort.\n", "CIvars": []}]}]}]}
{"id": "6142376_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61424387_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ncipollo/release-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "files", "value": "./output/**", "CIvars": []}]}]}]}
{"id": "61444542_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.RAILS_MASTER_KEY }}\" > config/master.key", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --frozen-lockfile # If using Yarn\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create\nbin/rails db:migrate\nbin/rails db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61470643_1", "jobs": [{"name": "tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqli, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit tests/ModelTest.php # Adjust as necessary to your test suite\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -f \".env\" ]; then\n  echo \"No .env file found, creating a default one.\"\n  echo \"APP_ENV=testing\" >> .env\n  echo \"DB_HOST=127.0.0.1\" >> .env\n  echo \"DB_DATABASE=your_database\" >> .env\n  echo \"DB_USERNAME=your_username\" >> .env\n  echo \"DB_PASSWORD=your_password\" >> .env\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61491374_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker buildx build --platform linux/amd64,linux/arm64 \\\n-t my-docker-image:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push my-docker-image:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 --decode > k8s-config\nexport KUBECONFIG=$(pwd)/k8s-config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f tekton/tasks.yaml\nkubectl apply -f tekton/pipeline.yaml\nkubectl apply -f tekton/pvc.yaml\nkubectl apply -f tekton/triggers.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61502273_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pod repo update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"machine github.com\" >> ~/.netrc\necho \"login $GITHUB_ACTOR\" >> ~/.netrc\necho \"password $GITHUB_TOKEN\" >> ~/.netrc\npod install --repo-update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild clean build -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm ~/.netrc\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61508747_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some/notification-action", "version": "v1", "shell": "bash", "with": []}]}]}
{"id": "61542865_0", "jobs": [{"name": "example_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"This is a command that runs\"\n# Change this command to something meaningful\nexit 0  # This can be changed to 1 to simulate a failure for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Current job status is: ${{ job.status }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Run command status is: ${{ steps.run_command.outcome }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61557797_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -LO https://deployer.org/deployer.phar\nchmod +x deployer.phar\nsudo mv deployer.phar /usr/local/bin/dep\ndep --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dep deploy $DEPLOYER_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh $DEPLOYER_USER@$DEPLOYER_HOST \"cd $DEPLOYER_PATH && php artisan migrate --force\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61586924_0", "jobs": [{"name": "validate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"## Environment Variables:\"\nprintenv\necho \"## Git Information:\"\ngit status\ngit log -n 10\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test  # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"## Capturing logs of the last command\"\nnpm test > test_log.txt || echo \"Tests failed\" >> test_log.txt\ncat test_log.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "The tests have failed. Logs are captured. Please check:\n\n```plaintext\n${{ steps.run_tests.outputs.log }}\n```\n", "CIvars": [{"name": "run_tests.outputs.log", "expression": "steps.run_tests.outputs.log", "type": "steps"}]}]}]}]}
{"id": "61605287_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"ARTIFACT_NAME=my-app-${GITHUB_RUN_NUMBER}-${GITHUB_SHA}.zip\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r ${{ env.ARTIFACT_NAME }} ./build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "${{ env.ARTIFACT_NAME }}", "CIvars": [{"name": "ARTIFACT_NAME", "expression": "env.ARTIFACT_NAME", "type": "env"}]}, {"type": "arg", "name": "path", "value": "${{ env.ARTIFACT_NAME }}", "CIvars": [{"name": "ARTIFACT_NAME", "expression": "env.ARTIFACT_NAME", "type": "env"}]}]}]}, {"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "assets/github-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "v${{ github.run_number }}", "CIvars": [{"name": "run_number", "expression": "github.run_number", "type": "context"}]}, {"type": "arg", "name": "files", "value": "${{ github.workspace }}/${{ env.ARTIFACT_NAME }}", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}, {"name": "ARTIFACT_NAME", "expression": "env.ARTIFACT_NAME", "type": "env"}]}]}]}]}
{"id": "61636018_0", "jobs": [{"name": "pipeline-status", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running tests and checks...\"\n# Place actual commands here, for example:\n# npm install\n# npm test\n# etc.\n# Simulate success or failure for illustration\nexit 0 # Change to `exit 1` to simulate failure for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -eq 0 ]; then\n  echo \"Pipeline succeeded!\"\n  echo \"status=succeeded\" >> $GITHUB_ENV\nelse\n  echo \"Pipeline failed!\"\n  echo \"status=failed\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The pipeline status is: ${{ env.status }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "### Pipeline Status\nThe pipeline has **${{ env.status }}**.\n", "CIvars": [{"name": "status", "expression": "env.status", "type": "env"}]}]}]}]}
{"id": "61679421_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, redis", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console cache:clear", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/phpunit --testsuite=Unit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61688358_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "61688358_2", "jobs": [{"name": "another-call", "steps": []}]}
{"id": "61741227_3", "jobs": [{"name": "call", "steps": []}]}
{"id": "6174657_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install openssh-client", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > id_rsa\nchmod 600 id_rsa\nrsync -avz -e \"ssh -i id_rsa -o StrictHostKeyChecking=no\" ./ $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH\nssh -i id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST \"cd $REMOTE_PATH && composer install --no-interaction\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61775854_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "nwtgck/actions-netlify", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "publish-dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "production-deploy", "value": true, "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "netlify-auth-token", "value": "${{ secrets.NETLIFY_AUTH_TOKEN }}", "CIvars": [{"name": "NETLIFY_AUTH_TOKEN", "expression": "secrets.NETLIFY_AUTH_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "netlify-site-id", "value": "${{ secrets.NETLIFY_SITE_ID }}", "CIvars": [{"name": "NETLIFY_SITE_ID", "expression": "secrets.NETLIFY_SITE_ID", "type": "secret"}]}]}]}]}
{"id": "61778320_0", "jobs": [{"name": "upload-liquid-files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID\naz account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Loop through all .liquid files in the current directory\nfor file in $(find . -name \"*.liquid\"); do\n  echo \"Uploading $file...\"\n  az logic integration account liquid-file create --resource-group $RESOURCE_GROUP_NAME --integration-account-name $INTEGRATION_ACCOUNT_NAME --name $(basename $file) --content \"file://$file\"\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61789938_0", "jobs": [{"name": "update-secret", "steps": [{"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "SECRET_NAME=\"${{ github.event.inputs.secret_name }}\"\nSECRET_VALUE=\"${{ github.event.inputs.secret_value }}\"\n# Fetch the public key for the repository's secrets\nPUBLIC_KEY=$(curl -s -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n  \"https://api.github.com/repos/${{ github.repository }}/actions/secrets/${SECRET_NAME}/public\" | jq -r .key)\n# Encrypt the secret value using the public key\nENCRYPTED_VALUE=$(echo -n \"${SECRET_VALUE}\" | openssl rsautl -encrypt -pubin -inkey <(\n  echo -n \"${PUBLIC_KEY}\" | base64 --decode | openssl pkey -inform DER -pubin\n) | base64)\n\n# Create or update the secret\ncurl -s -X PUT -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  \"https://api.github.com/repos/${{ github.repository }}/actions/secrets/${SECRET_NAME}\" \\\n  -d \"{ \\\"encrypted_value\\\": \\\"${ENCRYPTED_VALUE}\\\", \\\"key_id\\\": \\\"${PUBLIC_KEY_ID}\\\" }\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61823476_0", "jobs": [{"name": "checkstyle", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "wget https://checkstyle.sourceforge.io/checkstyle-10.6-all.jar -O checkstyle.jar\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "java -jar checkstyle.jar -c ./config/checkstyle/checkstyle.xml src/**/*.java > checkstyle-result.txt || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unsplash/action-checkstyle", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "checkstyle-file", "value": "checkstyle-result.txt", "CIvars": []}]}]}]}
{"id": "61855334_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/myapp:${{ github.sha }} .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.REGISTRY_PASSWORD }}\" | docker login ${{ secrets.REGISTRY_NAME }}.azurecr.io --username ${{ secrets.REGISTRY_NAME }} --password-stdin\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/myapp:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "clientId", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "clientSecret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenantId", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az aks get-credentials --resource-group <your-resource-group-name> --name <your-aks-cluster-name>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f <path-to-your-deployment.yaml>  # Point to your Kubernetes deployment file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/myapp myapp=${{ secrets.REGISTRY_NAME }}.azurecr.io/myapp:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61897501_0", "jobs": [{"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "commit-message", "value": "Merge pull request #${{ github.event.pull_request.number }} from ${{ github.event.pull_request.head.ref }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}, {"name": "event.pull_request.head.ref", "expression": "github.event.pull_request.head.ref", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Pull request", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61913345_0", "jobs": [{"name": "trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "repo-sync/github-sync", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "target_repo", "value": "owner/repoB", "CIvars": []}, {"type": "arg", "name": "commit_message", "value": "Triggering workflow in RepoB", "CIvars": []}]}]}]}
{"id": "61957117_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run generate-report", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "html-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/report.html", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "thollander/actions-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "HTML Report generated: [View Report](https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts)\n", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}]}]}
{"id": "61969011_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('lintr')\n# Install any other dependencies your project may require\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"lintr::lint_dir()\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"if (length(lintr::lint_dir()) > 0) { stop('Linting errors found!') }\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61971686_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --check-files\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create RAILS_ENV=test\nrails db:migrate RAILS_ENV=test\nrails db:test:prepare RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Change this to whatever testing command you use (e.g. rails test)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "61974075_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "${{ secrets.REMOTE_PATH }}", "CIvars": [{"name": "REMOTE_PATH", "expression": "secrets.REMOTE_PATH", "type": "secret"}]}, {"type": "arg", "name": "git-ftp-args", "value": "--insecure", "CIvars": []}]}]}]}
{"id": "61999387_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "docker build -t my-docker-image .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker run --memory=2g --cpus=2 --interactive --tty my-docker-image | tee output.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"error\" output.log; then\n  echo \"Errors found in logs!\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker rmi my-docker-image || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "container-logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "output.log", "CIvars": []}]}]}, {"name": "retry", "steps": [{"type": "shell_cmd", "cmd": "echo \"Retrying the Docker container...\"\ndocker run --memory=2g --cpus=2 my-docker-image | tee output.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"error\" output.log; then\n  echo \"Errors found in logs after retry!\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "container-logs-retry", "CIvars": []}, {"type": "arg", "name": "path", "value": "output.log", "CIvars": []}]}]}]}
{"id": "62014553_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": 5.6, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62021626_0", "jobs": [{"name": "cherry-pick", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "git config user.name \"GitHub Action\"\ngit config user.email \"action@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify the commit hash and the target branch.\nCOMMIT_HASH=\"COMMIT_HASH_HERE\"  # Replace with the commit hash you wish to cherry-pick.\nTARGET_BRANCH=\"target-branch\"  # Replace with your target branch where you want the changes.\n\n# Checkout the target branch\ngit checkout $TARGET_BRANCH\n\n# Attempt to cherry-pick the specified commit\ngit cherry-pick $COMMIT_HASH\n\n# Check if the cherry-pick was successful\nif [ $? -ne 0 ]; then\n  echo \"Cherry-pick failed\" >&2\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin HEAD:$TARGET_BRANCH\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "repo-sync/github-sync", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "source_branch", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "target_branch", "value": "target-branch", "CIvars": []}, {"type": "arg", "name": "pr_title", "value": "Cherry-pick commit ${COMMIT_HASH}", "CIvars": []}, {"type": "arg", "name": "pr_body", "value": "This PR cherry-picks commit ${COMMIT_HASH} from main.", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "62089536_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh-setup", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# You can add your script path here\n.\\Get-ChangesetDetails.ps1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62178851_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer global require laravel/vapor-cli\nexport PATH=\"$HOME/.composer/vendor/bin:$PATH\"\nvapor deploy production  # Change \u2018production\u2019 to your Vapor environment if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6227450_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlang/setup-erlang", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "24.3", "CIvars": []}, {"type": "arg", "name": "install_rebar", "value": true, "CIvars": []}, {"type": "arg", "name": "download", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mix local.hex --force\nmix deps.get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix compile", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix release", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62300492_0", "jobs": [{"name": "build-and-push", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "helm package ./chart-directory", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install curl if not already available\nsudo apt-get install -y curl\n\n# Find the last created chart package file\nCHART_FILE=$(ls -t *.tgz | head -n 1)\n\n# Push the chart to ChartMuseum\ncurl --data-binary \"@${CHART_FILE}\" \\\n  --user \"${CHARTMUSEUM_USERNAME}:${CHARTMUSEUM_PASSWORD}\" \\\n  \"${CHARTMUSEUM_URL}/api/charts\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "623079_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6230880_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/test/results", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": []}]}]}
{"id": "62340637_3", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler && bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62352000_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-gcp-project-id", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set your Docker image name and tag\nDOCKER_IMAGE_NAME=gcr.io/your-gcp-project-id/your-image-name:latest # Replace with your image name\n# Build the Docker image using Cloud Build\ngcloud builds submit --tag $DOCKER_IMAGE_NAME .\n# Optionally you can add additional commands to verify or test your image\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62392376_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "62464883_0", "jobs": [{"name": "flutter_ui_tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter drive \\\n  --target=test_driver/app.dart \\\n  --browser-name=chrome \\\n  --web-port=4444\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62497883_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Replace with appropriate build command if different\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "w9jds/firebase-action", "version": "v0.2.0", "shell": "bash", "with": [{"type": "arg", "name": "firebase_token", "value": "${{ secrets.FIREBASE_TOKEN }}", "CIvars": [{"name": "FIREBASE_TOKEN", "expression": "secrets.FIREBASE_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-project-id", "CIvars": []}, {"type": "arg", "name": "target", "value": "hosting", "CIvars": []}]}]}]}
{"id": "62530078_0", "jobs": [{"name": "assign_to_project", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/project-automation", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project", "value": "YOUR_PROJECT_NAME", "CIvars": []}, {"type": "arg", "name": "column", "value": "To Do", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "62557325_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MY_GITHUB_TOKEN }}\" >> ~/.npmrc\nflutter pub get\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62572121_0", "jobs": [{"name": "replace-firebase-json", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Replacing firebase.json\"\n# Ensure you have firebase.json in the repository root\ncp path/to/your/new/firebase.json ./firebase.json\ngit config --global user.name \"github-actions\"\ngit config --global user.email \"github-actions@example.com\"\ngit add firebase.json\ngit commit -m \"Update firebase.json\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62574130_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Assumes you have a Dockerfile in the repository\nIMAGE_NAME=${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}\necho \"Building image $IMAGE_NAME\"\ndocker build -t $IMAGE_NAME .\ndocker push $IMAGE_NAME\necho \"::set-output name=image::$IMAGE_NAME\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 --decode > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "IMAGE=\"${{ steps.build-image.outputs.image }}\"\nSERVICE_NAME=\"your-knative-service\" # Set your Knative service name\necho \"Updating Knative service $SERVICE_NAME with image $IMAGE\"\nkubectl set image kservice/$SERVICE_NAME *=$IMAGE\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62618898_1", "jobs": [{"name": "upload_to_gcs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCS_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCS_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-project-id", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gsutil -m cp -r path/to/your/folder gs://$GCS_BUCKET_NAME/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62624753_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "macops/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.1", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/Library/Developer/Xcode/DerivedData", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-derived-data-${{ hashFiles('**/*.xcodeproj', '**/*.xcworkspace') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-derived-data-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\necho \"${{ secrets.PROVISIONING_PROFILE }}\" > ~/Library/MobileDevice/Provisioning\\ Profiles/embedded.mobileprovision\nsecurity create-keychain -p \"\" build.keychain\nsecurity import <(echo ${{ secrets.CERTIFICATE }}) -k ~/Library/Keychains/build.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T /usr/bin/codesign\nsecurity list-keychains -s ~/Library/Keychains/build.keychain\nsecurity unlock-keychain -p \"\" ~/Library/Keychains/build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace MyProject.xcworkspace -scheme MyScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/MyProject.xcarchive || exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/MyProject.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyProject-ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/MyProject.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "62631451_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --no-build --output ./output", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_FUNCTION_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "62663326_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Execute the PowerShell script\n./deploy.ps1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62665625_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "/tmp/.buildx-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-buildx-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-buildx-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-kaniko-build", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dockerfile", "value": "./Dockerfile", "CIvars": []}, {"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "destination", "value": "your-docker-registry/your-image:latest", "CIvars": []}, {"type": "arg", "name": "payload", "value": "success", "CIvars": []}]}]}, {"name": "push", "steps": [{"type": "gh_action", "cmd": "", "name": "dawidd6/action-kaniko-push", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "destination", "value": "your-docker-registry/your-image:latest", "CIvars": []}]}]}]}
{"id": "62692958_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\npod setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter pub get\ncd ios\npod install\ncd ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build ios --release --no-codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build/ios/iphoneos\n# Replace `YourAppName` with your flutter app's actual name\nzip -r YourAppName.ipa YourAppName.app\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourAppName-archive", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/ios/iphoneos/YourAppName.ipa", "CIvars": []}]}]}]}
{"id": "62762385_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "registry", "value": "ghcr.io", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ github.actor }}", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.CR_PAT }}", "CIvars": [{"name": "CR_PAT", "expression": "secrets.CR_PAT", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest", "CIvars": [{"name": "repository_owner", "expression": "github.repository_owner", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-org/your-downstream-repo", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "inputs", "value": {"input1": "${{ github.event.client_payload.input1 }}"}, "CIvars": []}]}]}]}
{"id": "6279368_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --verbose", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src/", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse src/", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62797665_0", "jobs": [{"name": "mysql-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mysql-actions/setup-mysql", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "mysql-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "mysql-root-password", "value": "${{ secrets.MYSQL_ROOT_PASSWORD }}", "CIvars": [{"name": "MYSQL_ROOT_PASSWORD", "expression": "secrets.MYSQL_ROOT_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Run your MySQL commands here and suppress the output\nmysql -u root -p$MYSQL_ROOT_PASSWORD -e \"SELECT * FROM your_database.your_table;\" > /dev/null 2>&1\n\n# Example - Running some migration or other commands\nmysql -u root -p$MYSQL_ROOT_PASSWORD < path/to/your/script.sql > /dev/null 2>&1\n\n# To confirm successful execution, you might still want to echo something\necho \"MySQL commands executed successfully without displaying output.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62803679_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.1, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop  # Optional: Run code linting\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62857420_1", "jobs": [{"name": "invoke", "steps": []}]}
{"id": "62892700_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, zip, exif, fileinfo", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.SSH_PRIVATE_KEY }}\" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\nssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rsync -avz --delete --exclude='.git*' --exclude='node_modules' --exclude='storage/*.key' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}\nssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \"cd ${{ secrets.DEPLOY_DIR }} && composer install --no-dev --prefer-dist --optimize-autoloader && php artisan migrate --force\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62913098_0", "jobs": [{"name": "upload_artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Replace with your build commands\necho \"Building the project...\"\nmkdir -p build\necho \"Sample artifact\" > build/sample_artifact.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "sample_artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/sample_artifact.txt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "GET /repos/${{ github.repository }}/releases/latest", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "nciehoff/upload-release-asset", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.get_release.outputs.data.upload_url }}", "CIvars": [{"name": "get_release.outputs.data.upload_url", "expression": "steps.get_release.outputs.data.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "build/sample_artifact.txt", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "sample_artifact.txt", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "text/plain", "CIvars": []}]}]}]}
{"id": "62916848_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"BRANCH_NAME=${GITHUB_REF#refs/heads/}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/aws-codebuild-run-build", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "project-name", "value": "your-codebuild-project-name", "CIvars": []}, {"type": "arg", "name": "environment-variables", "value": "BRANCH_NAME=${{ env.BRANCH_NAME }}\n", "CIvars": [{"name": "BRANCH_NAME", "expression": "env.BRANCH_NAME", "type": "env"}]}, {"type": "arg", "name": "buildspec-override", "value": "version: 0.2\nphases:\n  install:\n    runtime-versions:\n      python: 3.x\n  build:\n    commands:\n      - echo \"Building branch: $BRANCH_NAME\"\n      - # Add your build commands here\n", "CIvars": []}, {"type": "arg", "name": "aws-region", "value": "your-aws-region", "CIvars": []}, {"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}]}]}]}
{"id": "62954146_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.13f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneLinux64", "CIvars": []}, {"type": "arg", "name": "options", "value": "-buildTarget StandaloneLinux64 -nographics", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Run the Unity test runner to execute all tests\n/opt/unity/Editor/Unity -runTests -batchmode -quit -logFile -projectPath . -testResults results.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Check the results of the tests\nif grep -q '<test-case' results.xml; then\n  echo \"Tests ran successfully\"\n  exit 0\nelse\n  echo \"Tests failed\"\n  cat results.xml\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "62955779_0", "jobs": [{"name": "delete_project_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running commands...\"\n# Replace with your actual command\n# If successful, this step will exit with code 0\n# Simulating success with an exit code\nexit 0 \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Previous step completed with status ${{ steps.sample_command.outcome }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deleting the project...\"\n# Replace this with your actual delete project command\n# For example, you might call a script or an API\nexit 0 # Simulating delete success\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63011453_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "3.6.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "helm dependency update ./my-chart\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm install my-release ./my-chart --values values.yaml --namespace my-namespace --wait\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "case ${{ github.event.inputs.test_suite }} in\n  suite1)\n    echo \"Running suite1 tests...\"\n    # Add commands to run suite1 tests\n    ;;\n  suite2)\n    echo \"Running suite2 tests...\"\n    # Add commands to run suite2 tests\n    ;;\n  suite3)\n    echo \"Running suite3 tests...\"\n    # Add commands to run suite3 tests\n    ;;\n  *)\n    echo \"Running default tests...\"\n    # Add commands to run default tests\n    ;;\nesac\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm uninstall my-release --namespace my-namespace\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63056495_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh pr create --base target-branch --head source-branch --title \"Automated PR from source-branch\" --body \"This PR is automatically created by GitHub Actions.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63066038_0", "jobs": [{"name": "request_changes", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Check if changes are present in the specified files\nchanged_files=$(git diff --name-only \"${{ github.event.before }}\" \"${{ github.sha }}\" | grep -E '^(path/to/your/file1.txt|path/to/your/file2.txt)')\n\nif [ -n \"$changed_files\" ]; then\n  echo \"Changes detected in specified files. Requesting changes on the PR.\"\n  echo \"::set-output name=needs_review::true\"\nelse\n  echo \"No changes detected in specified files.\"\n  echo \"::set-output name=needs_review::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/request-changes", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.number }}", "CIvars": [{"name": "event.number", "expression": "github.event.number", "type": "context"}]}, {"type": "arg", "name": "comment", "value": "Changes to specific files were made. Please request changes before merging.", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "63081879_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2019.4.31f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneWindows64", "CIvars": []}, {"type": "arg", "name": "buildName", "value": "MyGame", "CIvars": []}, {"type": "arg", "name": "outputPath", "value": "build", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": "./", "CIvars": []}, {"type": "arg", "name": "exportMethod", "value": "None", "CIvars": []}, {"type": "arg", "name": "versioningScheme", "value": "date", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "binaries", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/MyGame.exe", "CIvars": []}]}]}]}
{"id": "63119375_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "java-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/*.jar", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ github.event.repository.release_url }}", "CIvars": [{"name": "event.repository.release_url", "expression": "github.event.repository.release_url", "type": "context"}]}, {"type": "arg", "name": "asset", "value": "target/*.jar", "CIvars": []}, {"type": "arg", "name": "tag", "value": "v1.0.0", "CIvars": []}]}]}]}
{"id": "63137781_0", "jobs": [{"name": "manual_approval", "steps": [{"type": "shell_cmd", "cmd": "echo \"Checking if PR is ready for merge...\"\n# Here you could run your checks or automations.\n# For example, ensuring tests pass, etc.\n# For illustration, let's say the PR is not approved by default\necho \"false\" > pr_ready.txt\n\n# You can also have logic here to verify if the PR is valid\n# For demonstration, we'll set `false`, indicating it's not ready\ncat pr_ready.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "workflow", "value": "Manual Approval", "CIvars": []}, {"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}]}, {"name": "approve", "steps": [{"type": "shell_cmd", "cmd": "echo \"The merge request has been approved. Merging...\"\n# You can include your merge command here if needed.\n# Example: gh pr merge ${{ github.event.pull_request.number }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63143468_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build --destination ./_site\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "63163418_0", "jobs": [{"name": "rubocop", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rubocop --format json > rubocop_report.json || true\noffenses=$(jq '.summary.offense_count' rubocop_report.json)\n\n# If there are no errors and only warnings, treat it as a success\nif [ \"$offenses\" -eq 0 ]; then\n  exit 0\nelse\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "rubocop_report", "CIvars": []}, {"type": "arg", "name": "path", "value": "rubocop_report.json", "CIvars": []}]}]}]}
{"id": "63221664_0", "jobs": [{"name": "job1", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "job2", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest", "name": "", "version": "", "shell": "bash"}]}, {"name": "job3", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63224215_1", "jobs": [{"name": "renovate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "renovatebot/github-action", "version": "v32.45.0", "shell": "bash", "with": []}]}]}
{"id": "63238511_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "4.1.6", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "folder", "value": "build", "CIvars": []}]}]}]}
{"id": "63250061_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-qemu-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "yourdockerhubusername/your-image-name:latest", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63285847_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o ./output", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r lambda.zip ./output/*", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/aws-lambda-publish", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "function-name", "value": "<YOUR_LAMBDA_FUNCTION_NAME>", "CIvars": []}, {"type": "arg", "name": "runtime", "value": "dotnet6", "CIvars": []}, {"type": "arg", "name": "zip-file", "value": "lambda.zip", "CIvars": []}, {"type": "arg", "name": "role", "value": "<YOUR_ROLE_ARN>", "CIvars": []}]}]}]}
{"id": "63333023_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t $IMAGE_NAME .\ndocker push $IMAGE_NAME\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo ${KUBE_CONFIG_DATA} | base64 --decode > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment your-container=${IMAGE_NAME} --record\nkubectl rollout status deployment/your-deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63340183_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "azureSubscription", "value": "${{ secrets.AZURE_SUBSCRIPTION }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION", "expression": "secrets.AZURE_SUBSCRIPTION", "type": "secret"}]}, {"type": "arg", "name": "resourceGroup", "value": "${{ secrets.RESOURCE_GROUP }}", "CIvars": [{"name": "RESOURCE_GROUP", "expression": "secrets.RESOURCE_GROUP", "type": "secret"}]}, {"type": "arg", "name": "clusterName", "value": "${{ secrets.CLUSTER_NAME }}", "CIvars": [{"name": "CLUSTER_NAME", "expression": "secrets.CLUSTER_NAME", "type": "secret"}]}, {"type": "arg", "name": "serviceAccountToken", "value": "${{ secrets.K8S_TOKEN }}", "CIvars": [{"name": "K8S_TOKEN", "expression": "secrets.K8S_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Assuming you have a manifests directory with Kubernetes YAML files\nkubectl apply -f manifests/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment to Kubernetes complete!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63341938_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.client_payload.issue_number }}", "CIvars": [{"name": "event.client_payload.issue_number", "expression": "github.event.client_payload.issue_number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thank you for your contributions! This action was triggered with repository_dispatch.\n", "CIvars": []}]}]}]}
{"id": "63354484_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-amplify/amplify-cli-action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "amplify_command", "value": "publish", "CIvars": []}, {"type": "arg", "name": "amplify_app_id", "value": "${{ secrets.AMPLIFY_APP_ID }}", "CIvars": [{"name": "AMPLIFY_APP_ID", "expression": "secrets.AMPLIFY_APP_ID", "type": "secret"}]}, {"type": "arg", "name": "amplify_region", "value": "us-east-1", "CIvars": []}, {"type": "arg", "name": "amplify_access_key", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "amplify_secret_key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "npm run clean", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63375309_1", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y postgresql-client\ncp config/database.yml.ci config/database.yml\nrails db:create RAILS_ENV=test\nrails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start Xvfb (X virtual framebuffer) for Selenium tests\nsudo apt-get install -y xvfb\nXvfb :99 -ac &\nbundle exec rspec # Run RSpec tests\nbundle exec rake test # Run any additional tests if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run Capybara tests with Selenium\nbundle exec rspec spec/system\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63376399_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-scripts --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.test .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/phpunit --coverage-text --coverage-html coverage", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "coverage", "CIvars": []}]}]}]}
{"id": "63402935_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-clii", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl config use-context ${{ secrets.AKS_CLUSTER_NAME }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.ACR_PASSWORD }}\" | docker login ${{ secrets.ACR_NAME }} -u ${{ secrets.ACR_USERNAME }} --password-stdin\ndocker push ${{ secrets.DOCKER_IMAGE_NAME }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/${{ secrets.K8S_DEPLOYMENT_NAME }} ${{ secrets.K8S_CONTAINER_NAME }}=${{ secrets.DOCKER_IMAGE_NAME }} --record\nkubectl apply -f k8s-deployment.yaml # Make sure this file is properly configured in your repo\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6340400_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.3", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake db:create\nbundle exec rake db:migrate\nbundle exec rake db:seed # Optional\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # Or whatever testing framework you're using\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63405783_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get --offline\nflutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63414594_0", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "curl -L -o ./app.ipa $YOUR_IPA_DOWNLOAD_URL # Replace with your actual IPA download URL\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.gmail.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_ADDRESS }}", "CIvars": [{"name": "EMAIL_ADDRESS", "expression": "secrets.EMAIL_ADDRESS", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Your IPA File", "CIvars": []}, {"type": "arg", "name": "body", "value": "Please find the attached IPA file.", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ secrets.RECIPIENT_ADDRESS }}", "CIvars": [{"name": "RECIPIENT_ADDRESS", "expression": "secrets.RECIPIENT_ADDRESS", "type": "secret"}]}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_ADDRESS }}", "CIvars": [{"name": "EMAIL_ADDRESS", "expression": "secrets.EMAIL_ADDRESS", "type": "secret"}]}, {"type": "arg", "name": "attachments", "value": "./app.ipa", "CIvars": []}, {"type": "arg", "name": "ssl", "value": true, "CIvars": []}]}]}]}
{"id": "63422850_0", "jobs": [{"name": "close_pull_request", "steps": [{"type": "shell_cmd", "cmd": "# Get the PR body\nPR_BODY=\"${{ github.event.pull_request.body }}\"\n# Check if the PR body contains the word \"close\"\nif echo \"$PR_BODY\" | grep -iq '\\bclose\\b'; then\n  echo \"::set-output name=should_close::true\"\nelse\n  echo \"::set-output name=should_close::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/close-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "comment", "value": "This PR closes #${{ github.event.pull_request.number }} as it contains the keyword close.", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "63456716_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g @angular/cli", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd <path-to-your-angular-app>\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd <path-to-your-angular-app>\nnpm run build --prod\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd <path-to-your-dotnet-project>\ndotnet restore\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd <path-to-your-dotnet-project>\ndotnet build --configuration Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd <path-to-your-dotnet-project>\ndotnet publish --configuration Release --output ./publish\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp -r <path-to-your-angular-app>/dist/<your-angular-app-name>/* <path-to-your-dotnet-project>/publish/wwwroot/\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<your-app-name>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "<path-to-your-dotnet-project>/publish", "CIvars": []}]}]}]}
{"id": "63472617_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "63488788_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cmake -S . -B build -G \"Visual Studio 16 2019\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build build --config Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ctest --test-dir build --output-on-failure", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63508108_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"FASTLANE_USER=${{ secrets.APPLE_ID }}\" >> $GITHUB_ENV\necho \"FASTLANE_PASSWORD=${{ secrets.APP_STORE_APP_SPECIFIC_PASSWORD }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane your_lane_name", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63570002_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to GitHub Pages...\"\n# This is an example using gh-pages branch, adjust according to your deployment strategy.\ngit config --global user.name 'GitHub Actions'\ngit config --global user.email 'actions@github.com'\ngit add -A\ngit commit -m 'Deploying Jekyll site'\ngit push -f origin main:gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63590910_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_FUNCTION_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "63600064_0", "jobs": [{"name": "upload_policies", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cliauth", "value": "az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}, {"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}, {"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Navigate to the directory containing the policy files\ncd path/to/custom/policies\n\n# List and upload each policy file\nfor policy in *.xml; do\n  echo \"Uploading $policy\"\n  az ad b2c policy create --name \"${policy%.*}\" --resource-group YOUR_RESOURCE_GROUP_NAME --b2c-tenant \"${{ secrets.AZURE_B2C_TENANT }}\" --xml-file $policy\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63613783_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda/conda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda env create -f environment.yml\nconda activate myenv  # Replace 'myenv' with the name of your environment\necho \"CONDA_DEFAULT_ENV=myenv\" >> $GITHUB_ENV  # Save the environment name to an environment variable\necho \"CONDA_PREFIX=$(conda info --base)/envs/myenv\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "source $CONDA_PREFIX/bin/activate $CONDA_DEFAULT_ENV\n# Use the activated environment to run your commands/tests\npython -m unittest discover\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda deactivate\nconda env remove -n myenv  # Replace 'myenv' with the name of your environment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63622610_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "bazel-version", "value": "5.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bazel build //... --strict_dependencies\n# Add any additional Bazel options as required.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ $(bazel build //... --strict_dependencies --check_interval=0) ]]; then\n  echo \"No missing strict dependencies found!\"\nelse\n  echo \"Missing strict dependencies detected!\" && exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bazel test //...", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63662376_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.cocoapods/repos\ncd ~/.cocoapods/repos\ngit clone https://github.com/YOUR_USERNAME/YOUR_PRIVATE_POD_REPO.git\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"//github.com/:_authToken=${GITHUB_TOKEN}\" > ~/.npmrc  # Optional if using npm\npod install\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63665598_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "esp-idf/setup-esp-idf", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "idf_version", "value": "v4.4", "CIvars": []}, {"type": "arg", "name": "idf_tools", "value": "cmake,ninja,git", "CIvars": []}, {"type": "arg", "name": "python_version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npython -m pip install -r requirements.txt  # Adjust if you have requirements\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "idf.py set-target esp32  # Change to your target if different (esp32, esp32s2, etc.)\nidf.py build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/", "CIvars": []}]}]}]}
{"id": "63687203_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3.sh | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm repo add my-repo https://example.com/my-chart-repo\nhelm repo update\nhelm upgrade --install my-release my-repo/my-chart \\\n  --namespace my-namespace \\\n  --set image.tag=${{ github.sha }}  # Set any other values as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63690469_0", "jobs": [{"name": "deploy-logic-apps", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.28.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CREDENTIALS }}\" > azure_creds.json\naz login --service-principal --username $(jq -r .clientId azure_creds.json) --password $(jq -r .clientSecret azure_creds.json) --tenant $(jq -r .tenantId azure_creds.json)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"TEMPLATES=${{ inputs.template }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "IFS=',' read -r -a TEMPLATE_ARRAY <<< \"$TEMPLATES\"\nfor TEMPLATE in \"${TEMPLATE_ARRAY[@]}\"; do\n  echo \"Deploying $TEMPLATE\"\n  az deployment group create --resource-group <your-resource-group> --template-file $TEMPLATE --parameters @<your-parameters-file>.json\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63697142_0", "jobs": [{"name": "upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "sshbaker/sftp", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "host", "value": "${{ secrets.SFTP_HOST }}", "CIvars": [{"name": "SFTP_HOST", "expression": "secrets.SFTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.SFTP_USERNAME }}", "CIvars": [{"name": "SFTP_USERNAME", "expression": "secrets.SFTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "private_key", "value": "${{ secrets.SFTP_PRIVATE_KEY }}", "CIvars": [{"name": "SFTP_PRIVATE_KEY", "expression": "secrets.SFTP_PRIVATE_KEY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.SFTP_PORT }}", "CIvars": [{"name": "SFTP_PORT", "expression": "secrets.SFTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "source", "value": "./your/local/directory/**", "CIvars": []}, {"type": "arg", "name": "destination", "value": "/path/on/remote/server/", "CIvars": []}]}]}]}
{"id": "63704175_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods\ncd ios\npod install\ncd ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nxcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphonesimulator -configuration Debug -derivedDataPath build/ -destination 'platform=iOS Simulator,name=iPhone 13' clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p artifacts\nmv ios/build/Debug-iphonesimulator/Runner.app artifacts/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "artifacts/", "CIvars": []}]}]}]}
{"id": "63778169_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "samkirkland/ftp-deploy-action", "version": "3.1.1", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "ftp.yourdomain.com", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local_dir", "value": "./vendor", "CIvars": []}, {"type": "arg", "name": "server_dir", "value": "/path/to/vendor", "CIvars": []}, {"type": "arg", "name": "mode", "value": "ftp", "CIvars": []}, {"type": "arg", "name": "cleanup", "value": true, "CIvars": []}]}]}]}
{"id": "63804690_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler -v '~> 2.2' # Adjust to your bundler version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create RAILS_ENV=test\nrails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec # Adjust for your testing framework\nRAILS_ENV=test bundle exec rake capybara:tests # If you have a task to run Capybara tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "63911313_3", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages(c('bookdown', 'rmarkdown', 'knitr'))\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"bookdown::render_book('index.Rmd', 'bookdown::gitbook')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_book", "CIvars": []}]}]}]}
{"id": "63937819_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "azure-tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az app service deploy --name YourAppNameHere \\\n  --resource-group YourResourceGroupHere \\\n  --src-path ./publish \\\n  --type zip\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64006803_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-qemu-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-docker-image:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "1.21.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 -d > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yml\nkubectl apply -f k8s/service.yml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64040150_0", "jobs": [{"name": "raise-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "NEW_BRANCH=\"pr-$(date +%Y-%m-%d-%H-%M-%S)\"\ngit checkout -b $NEW_BRANCH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can add commands to make changes to your code.\n# For example, you might want to modify a file, run tests, etc.\necho \"This is a change made by GitHub Actions\" >> some-file.txt\ngit add some-file.txt\ngit commit -m \"Automated change to create a PR\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin $NEW_BRANCH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gh repo fork https://github.com/username/upstream-repo --clone=false\ngh pr create --base main --head $NEW_BRANCH --title \"Automated PR from GitHub Actions\" --body \"This PR is created automatically by GitHub Actions\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64055230_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "6405958_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "warrenbuckley/install-msdeploy", "version": "v1.0.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "dotnet build YourProject.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msdeploy -verb:sync -source:package=\"path/to/your/package.zip\" ^\n  -dest:auto,computerName=\"https://$MSDEPLOY_SERVER:8172/msdeploy.axd?site=$MSDEPLOY_SITE\",username=\"$MSDEPLOY_USERNAME\",password=\"$MSDEPLOY_PASSWORD\",authType=\"Basic\" ^\n  -allowUntrusted ^\n  -enable Rule:AppOffline ^\n  -setParam:name='IIS App Name',value='YourAppName'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64105318_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20.3.3", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}, {"type": "arg", "name": "working-directory", "value": ".", "CIvars": []}, {"type": "arg", "name": "env", "value": {"VARIABLE_ONE": "value1", "VARIABLE_TWO": "value2", "VARIABLE_THREE": "value3"}, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment finished successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64112260_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cachix/install-nix-action", "version": "v14", "shell": "bash", "with": [{"type": "arg", "name": "nix_path", "value": "nix-dir", "CIvars": []}, {"type": "arg", "name": "extra_nix_config", "value": "experimental-features = 'nix-command flakes'\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# You might want to adjust this command depending on how you run your tests\nnix build .#your-package  # Replace `your-package` with your actual package name or use `.` for the default package\nnix run .#your-test-suite   # Replace 'your-test-suite' with the actual test suite\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64116781_0", "jobs": [{"name": "automerge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/auto-merge", "version": "v2.0.1", "shell": "bash", "with": [{"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "64155398_0", "jobs": [{"name": "send-webhook", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1.0.11", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "http://YOUR_IP_ADDRESS:YOUR_PORT/YOUR_ENDPOINT", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "Content-Type: application/json\n", "CIvars": []}, {"type": "arg", "name": "body", "value": "{\"ref\": \"${{ github.ref }}\", \"repository\": \"${{ github.repository }}\", \"pusher\": \"${{ github.actor }}\"}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "actor", "expression": "github.actor", "type": "context"}]}]}]}]}
{"id": "64162492_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "matlab-actions/setup-matlab", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "matlab-version", "value": "${{ matrix.matlab_version }}", "CIvars": [{"name": "matlab_version", "expression": "matrix.matlab_version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "matlab -batch \"try; my_script; catch e; disp(getReport(e)); exit(1); end; exit(0);\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64175069_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set environment variables for Kubeconfig\necho \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig\nexport KUBECONFIG=./kubeconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f - <<EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: ephemeral-pod-$GITHUB_RUN_ID\nspec:\n  containers:\n  - name: my-container\n    image: my-docker-image:latest\n    command: [\"sleep\", \"3600\"] # Sleep for an hour as an example\nEOF\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get pods\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64204501_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${KUBE_CONFIG_DATA}\" | base64 --decode > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm init --client-only", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm repo add my-repo https://example.com/charts  # Change to your helm repo\nhelm repo update\nhelm upgrade --install my-application my-repo/my-chart \\\n  --namespace my-namespace --create-namespace \\\n  --set image.tag=${{ github.sha }}  # Example value, customize as needed.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64267443_0", "jobs": [{"name": "check-readme-images", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Find all image links in the README.md\nIMAGE_LINKS=$(grep -o 'https\\?://[^\"]\\+\\.\\(png\\|jpg\\|jpeg\\|gif\\|svg\\)' README.md)\n\n# Check each link\nfor link in $IMAGE_LINKS; do\n  echo \"Checking $link\"\n  # Follow redirect and check if the URL is reachable\n  if curl --output /dev/null --silent --head --fail \"$link\"; then\n    echo \"\u2705 $link is reachable\"\n  else\n    echo \"\u274c ERROR: $link is not reachable\"\n    exit 1\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64358374_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your-Web-App-Name>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_APP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_APP_PUBLISH_PROFILE", "expression": "secrets.AZURE_APP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<Your-Web-App-Name>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_APP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_APP_PUBLISH_PROFILE", "expression": "secrets.AZURE_APP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "<Path to your WebJob ZIP or directory>", "CIvars": []}]}]}]}
{"id": "64378044_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift package resolve\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swift build --configuration release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swift test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swift package archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Swift-Package-Build", "CIvars": []}, {"type": "arg", "name": "path", "value": ".build/release/*.xctest", "CIvars": []}]}]}]}
{"id": "64395360_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "${{ secrets.FTP_DIRECTORY }}", "CIvars": [{"name": "FTP_DIRECTORY", "expression": "secrets.FTP_DIRECTORY", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "ftp-level", "value": true, "CIvars": []}]}]}]}
{"id": "644056_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "64489222_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build  # Change the command according to your static site generator\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "64504717_0", "jobs": [{"name": "create_issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Automated Issue: New push to main", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new push has been made to the main branch. \nHere are the details:\n- **Commit Message**: `${{ github.event.head_commit.message }}`\n- **Pushed By**: `${{ github.actor }}`\n- **Commit URL**: `${{ github.event.head_commit.url }}`\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "actor", "expression": "github.actor", "type": "context"}, {"name": "event.head_commit.url", "expression": "github.event.head_commit.url", "type": "context"}]}, {"type": "arg", "name": "labels", "value": "automated", "CIvars": []}, {"type": "arg", "name": "assignee", "value": "${{ github.actor }}", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}]}]}]}]}
{"id": "64506869_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "matlab/matlab-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "matlab_version", "value": "${{ matrix.matlab-version }}", "CIvars": [{"name": "matlab-version", "expression": "matrix.matlab-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Setting up service account...\" \n# Replace the following with command(s) to set up your service account\n# e.g., export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/service-account-file.json\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here, you would run your MATLAB tests using a script or command\nmatlab -batch \"fmi_test_suite_function\" # Replace with your actual command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "fmi-toolbox-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "results/*.mat", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Clean up any temporary files if needed\necho \"Cleaning up...\"\n# Your cleanup commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64557292_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "vs-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:Configuration=Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": ".\\path\\to\\your\\test\\executable.exe  # Replace this with your test executable path\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64592508_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install parallel_tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nbundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec parallel_test test/models test/controllers", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Done with parallel test execution\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64635452_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install capistrano\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts\nbundle exec cap $RAILS_ENV deploy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64658724_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "5.0.x", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "pwsh", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.VPN_CONFIG }}\" > vpn_config.ovpn\nsudo openvpn --config vpn_config.ovpn &  # Run OpenVPN in background\nsleep 30  # Wait for the connection to establish\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install the Dynamics 365 SDK if necessary\nwget https://path-to-dynamics-365-sdk.zip\nunzip dynamics-365-sdk.zip\ncd dynamics-365-sdk/bin/Release\n\n# Deploy your solution\npwsh -Command \"Import-Module .\\Microsoft.CrmSdk.Deployment.exe; \n  Publish-CrmSolution -SolutionName 'YourSolutionName' -ConnectionString 'AuthType=Basic;Url=$D365_URL;Username=$D365_USER;Password=$D365_PASSWORD'\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64666502_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.sbt/boot", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt', '**/project/**/*') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-sbt-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Installing SBT\"\ncurl -Lo sbt.tgz https://repo1.maven.org/sbt/native-packager/sbt-1.5.0.tgz\ntar xzf sbt.tgz\n./sbt/bin/sbt about\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./sbt clean compile stage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./sbt universal:packageBin\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ncipollo/release-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "files", "value": "target/universal/*.zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"github-actions\"\ngit config --global user.email \"github-actions@github.com\"\ngit add target/universal/*.zip # Cascading the new builds, adjust if other files are generated\ngit commit -m \"Add built artifacts\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64671043_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "upload_max_filesize=40M\npost_max_size=40M\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer config --global http-basic.repo.example.com ${{ secrets.COMPOSER_AUTH_USERNAME }} ${{ secrets.COMPOSER_AUTH_TOKEN }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your test command\n./vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64706368_0", "jobs": [{"name": "start-vm", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "YOUR_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gcloud compute instances start YOUR_INSTANCE_NAME --zone YOUR_ZONE\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64740697_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nbundle install # Make sure you have a Gemfile with fastlane\nbundle exec fastlane build_dev\n  \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nbundle install\nbundle exec fastlane build_app_store\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nbundle install\nbundle exec fastlane build_ad_hoc\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.pub-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.yaml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pub-cache-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "6475223_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --config phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64759755_0", "jobs": [{"name": "R-CMD-check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('remotes')\nremotes::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if (!requireNamespace(\"testthat\", quietly = TRUE)) {\n  install.packages(\"testthat\")\n}\nlibrary(testthat)\ntest_dir(\"tests/testthat\", reporter = \"summary\") # Adjust based on your test folder structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check --as-cran .", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64790037_0", "jobs": [{"name": "version_increment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Read the current version from pubspec.yaml\ncurrent_version=$(grep '^version:' pubspec.yaml | awk '{print $2}')\n\n# Split the version into parts\nIFS='+' read -r version_number build_number <<< \"$current_version\"\nIFS='.' read -r major minor patch <<< \"$version_number\"\n\n# Increment the patch version\npatch=$((patch + 1))\n\n# Create the new version\nnew_version=\"$major.$minor.$patch\"\nnew_full_version=\"$new_version+$build_number\"\n\n# Update the pubspec.yaml file\nsed -i.bak \"s/version: $current_version/version: $new_full_version/\" pubspec.yaml\n\n# Commit the changes\ngit config --local user.email \"github-actions@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit commit -am \"Increment version to $new_full_version\"\n\n# Output the new version for later use\necho \"::set-output name=new_version::$new_full_version\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.codemagic.io/v1/builds\" \\\n-H \"Authorization: Bearer $CODEMAGIC_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"app_id\": \"YOUR_APP_ID\",\n  \"branch\": \"main\",\n  \"message\": \"Triggered build for version ${{ steps.increment_version.outputs.new_version }}\"\n}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64810868_1", "jobs": [{"name": "discover-extensions", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, curl, mysqli", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php discover_extensions.php", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64893413_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Tests passed. Running additional step...\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"This step runs regardless of the previous test outcome.\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Tests failed! Running cleanup or notification steps...\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The test outcome was ${{ steps.test.outcome }}\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64893884_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ProjectA\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ProjectA\nnpm test\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "trigger_project_b", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/your-repo", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "project-b.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}]}]}
{"id": "64893884_2", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ProjectB\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ProjectB\nnpm test\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "trigger_project_a", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/your-repo", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "project-a.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}]}]}
{"id": "64900077_0", "jobs": [{"name": "approval", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-subscription", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CLIENT_SECRET }}\" | az login --service-principal -u \"${{ secrets.AZURE_CLIENT_ID }}\" -p /dev/stdin --tenant \"${{ secrets.AZURE_TENANT_ID }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example command to check for policy changes\n# Use your actual logic for checking policy changes\n# Assuming you have a 'policies.xml' file\ngit diff HEAD~1 -- policies.xml > changes.txt\nif [ -s changes.txt ]; then\n  echo \"Policy changes detected.\"\n  echo \"::set-output name=has_changes::true\"\nelse\n  echo \"No policy changes.\"\n  echo \"::set-output name=has_changes::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Approval process starting...\"\n# This could be a review request to an Approver or an approval system\n# Send an email/notify request to the approver etc.\necho \"Notify approvers via email or any other notification system\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying approved policies...\"\n# Example to update the APIM policy\n# You need to customize the command to fit your environment\naz apim policy set --resource-group \"${{ secrets.RESOURCE_GROUP }}\" --service-name \"${{ secrets.APIM_NAME }}\" --policy-file \"policies.xml\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64909663_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64946385_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpcs --standard=PSR12 src", "name": "", "version": "", "shell": "bash"}]}, {"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n# Add your deployment commands here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64958385_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": 7.4, "CIvars": []}, {"type": "arg", "name": "php ini", "value": "curl.cainfo=/etc/ssl/certs/ca-certificates.crt # Path to CA certificates file\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "php -i | grep \"curl.cainfo\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php your_script.php # Replace with your PHP script\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64959920_0", "jobs": [{"name": "php-ini-setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "upload_max_filesize=10M", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"my_custom_ini_value = /path/to/your/file\" > ./custom.ini\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp ./custom.ini $RUNNER_TEMP/php.ini\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"include_path=(your_project_directory):$PHP_INI_SCAN_DIR\" >> $RUNNER_TEMP/php.ini\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -i | grep \"my_custom_ini_value\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php your_script.php", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -i | grep \"my_custom_ini_value\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64975687_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, json, tokenizer, sqlite3, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test  # Run your tests if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://envoyer.io/api/projects/${{ secrets.PROJECT_ID }}/deploy\" \\\n-H \"Authorization: Bearer $ENVYONER_API_TOKEN\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64989576_2", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login --username \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "<your-username>/<your-repo-name>", "version": "<tag-or-branch-name>", "shell": "bash", "with": [{"type": "arg", "name": "some_input", "value": "value", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "docker logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "64993949_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add commands to build your application here\n# For example, if using a Node.js project:\nnpm install\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-web-app-name", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}, {"type": "arg", "name": "destination-path", "value": "myfolder", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment finished.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65025094_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "wget -qO- https://cli-assets.heroku.com/install.sh | sh\necho \"machine api.heroku.com\" >> ~/.netrc\necho \"  login ${{ secrets.HEROKU_EMAIL }}\" >> ~/.netrc\necho \"  password ${{ secrets.HEROKU_API_KEY }}\" >> ~/.netrc\necho \"machine git.heroku.com\" >> ~/.netrc\necho \"  login ${{ secrets.HEROKU_EMAIL }}\" >> ~/.netrc\necho \"  password ${{ secrets.HEROKU_API_KEY }}\" >> ~/.netrc\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git remote add heroku https://git.heroku.com/$HEROKU_APP_NAME.git\ngit push heroku main  # Make sure you are pushing the correct branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "heroku run rails db:migrate --app $HEROKU_APP_NAME\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65038753_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.kube\necho \"$KUBE_CONFIG\" > ~/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm repo add my-helm-repo $HELM_REPO_URL --username $HELM_USERNAME --password $HELM_PASSWORD\nhelm repo update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-release-name my-helm-repo/my-chart-name \\\n  --namespace my-namespace --create-namespace \\\n  --set key=value # Set your custom values as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65045068_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install gh-pages\nbundle exec gh-pages -b gh-pages\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65045104_0", "jobs": [{"name": "copy-files", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir -p /destination-directory\ncp -r /source-directory/* /destination-directory/\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "andstor/file-copy-action", "version": "v2.1.0", "shell": "bash", "with": [{"type": "arg", "name": "source", "value": "source-directory/", "CIvars": []}, {"type": "arg", "name": "destination", "value": "destination-directory/", "CIvars": []}]}]}]}
{"id": "65050618_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/test_results/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Some tests failed. Check the logs above.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65064167_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "julia-actions/setup-julia", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "julia-version", "value": "1.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "julia -e 'using Pkg; Pkg.add(\"PyCall\")'\n# Add any additional dependencies your project requires\njulia -e 'Pkg.resolve()'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"export JULIA_PYTHON = \\\"$(which python)\\\"\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your Julia tests or script that uses PyCall\njulia --project -e 'using Pkg; Pkg.test()'\n# You can replace with your specific test file\n# julia --project your_test_file.jl\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65106790_0", "jobs": [{"name": "trigger-pipeline", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"CONDITION_SKIP_STAGE=${{ github.event.inputs.skip_stage }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ env.CONDITION_SKIP_STAGE }}\" == \"true\" ]]; then\n  echo \"Skipping the deployment stage in the CodePipeline.\"\n  echo \"skip_stage=true\" >> $GITHUB_ENV\nelse\n  echo \"skip_stage=false\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/codepipeline", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourCodePipelineName", "CIvars": []}, {"type": "arg", "name": "skip_stage", "value": "${{ env.skip_stage }}", "CIvars": [{"name": "skip_stage", "expression": "env.skip_stage", "type": "env"}]}, {"type": "arg", "name": "aws_region", "value": "us-east-1", "CIvars": []}, {"type": "arg", "name": "aws_access_key_id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws_secret_access_key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}]}]}]}
{"id": "65131894_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew assembleDebug", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "subosito/gh-actions-android-sdk", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": "${{ matrix.api-level }}", "CIvars": [{"name": "api-level", "expression": "matrix.api-level", "type": "matrix"}]}, {"type": "arg", "name": "target", "value": "android-30", "CIvars": []}, {"type": "arg", "name": "script", "value": "echo \"Y\" | sdkmanager --licenses\nsdkmanager \"platforms;android-${{ matrix.api-level }}\"\n", "CIvars": [{"name": "api-level", "expression": "matrix.api-level", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew connectedAndroidTest", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "espresso-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/reports/androidTests/connected/*", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew clean", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65134146_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages(c('rmarkdown', 'knitr'))\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "output/\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-rmarkdown-${{ hashFiles('**/*.Rmd') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-rmarkdown-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "Rscript -e \"rmarkdown::render('your_file.Rmd', output_format='all')\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "rmarkdown-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "output/", "CIvars": []}]}]}]}
{"id": "65147185_0", "jobs": [{"name": "setup-conda", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda-incubator/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "activate-environment", "value": "my-env", "CIvars": []}, {"type": "arg", "name": "conda-versions", "value": "4.10.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda create --yes --name my-env numpy=1.21.0  # This specifies the package and version\nconda activate my-env\n\n# You can install other packages as needed\nconda install --yes pandas=1.3.1\n\n# Run any commands with your conda environment here\n# For example, if you have tests to run, you could use:\n# python -m unittest discover tests/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda activate my-env\nconda list\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65164916_0", "jobs": [{"name": "send-email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "New Push to Main Branch", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new commit has been pushed to the main branch.\nCommit message: ${{ github.event.head_commit.message }}\nCommit URL: ${{ github.event.head_commit.url }}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}, {"name": "event.head_commit.url", "expression": "github.event.head_commit.url", "type": "context"}]}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "smtp-server", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-user", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "secure", "value": true, "CIvars": []}]}]}]}
{"id": "65199457_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "registry", "value": "${{ secrets.DOCKER_REGISTRY }}", "CIvars": [{"name": "DOCKER_REGISTRY", "expression": "secrets.DOCKER_REGISTRY", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}", "CIvars": [{"name": "DOCKER_REGISTRY", "expression": "secrets.DOCKER_REGISTRY", "type": "secret"}, {"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig.yaml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -sSL https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install-argocd.sh | sudo bash\nsudo cp /usr/local/bin/argocd /usr/bin/argocd\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argocd app sync <YOUR_APP_NAME>\nargocd app wait <YOUR_APP_NAME>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65209534_0", "jobs": [{"name": "stale", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/stale", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "days-before-stale", "value": 7, "CIvars": []}, {"type": "arg", "name": "days-before-close", "value": 14, "CIvars": []}, {"type": "arg", "name": "stale-pr-message", "value": "This pull request has been marked as stale due to inactivity. \nPlease take action to keep it alive.\n", "CIvars": []}, {"type": "arg", "name": "close-pr-message", "value": "This pull request has been closed due to inactivity. \nPlease feel free to reopen it if you wish to continue working on it.\n", "CIvars": []}]}]}]}
{"id": "65215816_2", "jobs": [{"name": "main_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Both prerequisite workflows completed successfully. Running main workflow.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65222989_0", "jobs": [{"name": "helm-push", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 2, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Modify this path to the directory where your Helm charts are located\nCHART_DIR=\"charts\"\n\n# Find changed Helm charts from the last commit\necho \"Finding changed Helm charts...\"\nCHANGED_CHARTS=$(git diff --name-only HEAD^ HEAD -- $CHART_DIR | grep '\\.tgz\\|Chart.yaml\\|values.yaml' | sed 's|^'\"$CHART_DIR/\"'||;s|/.*||' | sort -u)\n\nif [ -z \"$CHANGED_CHARTS\" ]; then\n  echo \"No charts changed.\"\n  echo \"::set-output name=changed::false\"\nelse\n  echo \"Changed charts: $CHANGED_CHARTS\"\n  echo \"::set-output name=changed::true\"\n  echo \"::set-output name=charts::$CHANGED_CHARTS\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assume you have a helm repo set up prior\n# Create the helm repo if it does not exist\nhelm repo add my-repo <YOUR_HELM_REPO_URL>\n\n# Loop through changed charts and push\nfor CHART in ${{ steps.changed-charts.outputs.charts }}; do\n  helm push \"$CHART\" my-repo\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n# Any cleanup commands can go here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65257567_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3.sh | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"image.tag=${{ github.sha }}\" >> values.yaml\necho \"envVar1=${{ secrets.ENV_VAR_1 }}\" >> values.yaml\necho \"envVar2=${{ secrets.ENV_VAR_2 }}\" >> values.yaml\ncat values.yaml \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-release ./path-to-your-chart \\\n  --values ./values.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65261210_0", "jobs": [{"name": "build_and_deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/static-web-apps-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_static_web_apps_api_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "action", "value": "upload", "CIvars": []}, {"type": "arg", "name": "app_location", "value": "/", "CIvars": []}, {"type": "arg", "name": "output_location", "value": "build", "CIvars": []}, {"type": "arg", "name": "api_location", "value": "", "CIvars": []}]}]}]}
{"id": "65265583_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT }}", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}\" >> $GITHUB_ENV\necho \"API_KEY=${{ secrets.API_KEY }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65269536_0", "jobs": [{"name": "ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": "true", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install  # Install dependencies using Bundler\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Run your tests; adjust the command as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby your_script.rb  # Replace with your Ruby script path\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65319710_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "your-username/my-action", "version": "v1.0.0", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "action-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./results/", "CIvars": []}]}]}]}
{"id": "65323337_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphonesimulator -configuration Debug -derivedDataPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppUITests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' -derivedDataPath build | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65344193_0", "jobs": [{"name": "run_process", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run your-script && echo \"Process completed successfully\" || echo \"Process failed\" # Replace with your command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.run_process.outcome }}\" == \"success\" ]]; then\n  echo \"The process finished successfully!\"\nelse\n  echo \"The process did not finish successfully.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.run_process.outcome }}\" == \"success\" ]]; then\n  echo \"Notifying that the process completed successfully!\"\n  # You can add commands to notify Slack, email, webhook etc.\nelse\n  echo \"Notifying that the process failed!\"\n  # Add your failure notification commands here.\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65346959_0", "jobs": [{"name": "force-update", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "your-username/your-container-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "Image", "value": "your-container-image:latest", "CIvars": []}, {"type": "arg", "name": "cache-bust", "value": "${{ github.run_id }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Container Action has been executed and updated!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65390641_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v0.2.2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Triggering Google Cloud Build...\"\ngcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/your-image-name .\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65402766_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit  # Adjust this command according to your testing framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6541165_1", "jobs": [{"name": "call-reusable-job", "steps": []}, {"name": "call-reusable-job-dev", "steps": []}]}
{"id": "65422403_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "registry", "value": "ghcr.io", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ github.actor }}", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "ghcr.io/${{ github.repository }}:latest", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBE_CONFIG_DATA}\" | base64 --decode > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/my-deployment my-container=ghcr.io/${{ github.repository }}:latest\nkubectl rollout status deployment/my-deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65429219_0", "jobs": [{"name": "grant-access", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-clid", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Specify the Object ID of the service principal\nSP_OBJECT_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query objectId -o tsv)\n\n# Your group's Object ID, you can modify this for multiple groups\nGROUP_ID=\"<your-group-object-id>\"\n\n# Assign the appropriate role (in this case, 'Directory Readers' role ID is 'b6d539b4-2138-4f73-9c2b-849621f9c2e8' for read access)\naz role assignment create --assignee $SP_OBJECT_ID --role \"Directory Readers\" --scope \"/providers/Microsoft.Directory/organizations/${{ secrets.AZURE_TENANT_ID }}/groups/$GROUP_ID\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65487925_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "some-org/some-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "some_input", "value": "value1", "CIvars": []}, {"type": "arg", "name": "another_input", "value": "value2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Workflow completed successfully!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65507487_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "PowerShell/PowerShell", "version": "v7.1.3", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Change to the directory where your .nupkg files are located\ncd path/to/nupkgs-directory\n  \n# Push each .nupkg file to GitHub Packages\n$packages = Get-ChildItem -Filter '*.nupkg'\nforeach ($package in $packages) {\n    dotnet nuget push $package.FullName --source \"github\" --api-key $env:GITHUB_TOKEN\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65521101_0", "jobs": [{"name": "upload-release-asset", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\nnpm run build  # Replace with your build command if you have one\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with commands to create or prepare your asset\necho \"Creating asset...\"\necho \"This is the content of my asset.\" > my-asset.txt\n# Make sure to create the file or any other asset you want to upload\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ github.event.release.upload_url }}", "CIvars": [{"name": "event.release.upload_url", "expression": "github.event.release.upload_url", "type": "context"}]}, {"type": "arg", "name": "asset_path", "value": "my-asset.txt", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "my-asset.txt", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "text/plain", "CIvars": []}]}]}]}
{"id": "65578466_0", "jobs": [{"name": "upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.33.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Logging into Azure\"\naz storage account set --name $AZURE_STORAGE_ACCOUNT --key $AZURE_STORAGE_KEY\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Find files with specific extensions and upload them to Azure Blob Storage\nfor file in $(find . -type f \\( -name '*.txt' -o -name '*.jpg' \\)); do\n  echo \"Uploading $file to Azure Blob Storage\"\n  az storage blob upload --account-name $AZURE_STORAGE_ACCOUNT --container-name <YOUR_CONTAINER_NAME> --file \"$file\" --name \"$(basename \"$file\")\" --account-key $AZURE_STORAGE_KEY\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65583737_1", "jobs": [{"name": "build_and_deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install -g azure-functions-core-tools@3 --unsafe-perm true", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd api\nfor d in */ ; do\n  (cd \"$d\" && npm install || exit 1)\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "func azure functionapp publish <FUNCTION_APP_NAME> --python\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/static-web-apps-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_static_web_apps_api_token", "value": "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}", "CIvars": [{"name": "AZURE_STATIC_WEB_APPS_API_TOKEN", "expression": "secrets.AZURE_STATIC_WEB_APPS_API_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "fairelize", "value": "true", "CIvars": []}, {"type": "arg", "name": "app_location", "value": "frontend", "CIvars": []}, {"type": "arg", "name": "api_location", "value": "api", "CIvars": []}, {"type": "arg", "name": "output_location", "value": "frontend/build", "CIvars": []}]}]}]}
{"id": "65615776_0", "jobs": [{"name": "use-shared-workflow", "steps": []}]}
{"id": "65652494_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2021.1.15f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneLinux64", "CIvars": []}, {"type": "arg", "name": "buildName", "value": "MyBuild", "CIvars": []}, {"type": "arg", "name": "projectPath", "value": ".", "CIvars": []}, {"type": "arg", "name": "customImage", "value": "unityci/editor:2021.1.15f1", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-test-runner", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "projectPath", "value": ".", "CIvars": []}, {"type": "arg", "name": "version", "value": "2021.1.15f1", "CIvars": []}, {"type": "arg", "name": "testPlatform", "value": "StandaloneLinux64", "CIvars": []}, {"type": "arg", "name": "testResults", "value": "path/to/your/test/results.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyBuild", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/build/folder", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-github-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}]}]}]}
{"id": "65663533_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "cache", "value": "gem", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}\" >> $GITHUB_ENV\necho \"SPACE_ID=${{ secrets.SPACE_ID }}\" >> $GITHUB_ENV\necho \"OTHER_ENV_VAR=${{ secrets.OTHER_ENV_VAR }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane your_lane_name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm -rf ./path/to/temp/files # Remove any temporary files or directories if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65691565_0", "jobs": [{"name": "request-approval", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Approval Needed for Pull Request", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new Pull Request has been created/edited:\n\nTitle: ${{ github.event.pull_request.title }}\nLink: ${{ github.event.pull_request.html_url }}\n\nPlease review and approve.\n", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}, {"name": "event.pull_request.html_url", "expression": "github.event.pull_request.html_url", "type": "context"}]}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "smtp-server", "value": "smtp.sendgrid.net", "CIvars": []}, {"type": "arg", "name": "smtp-port", "value": 587, "CIvars": []}, {"type": "arg", "name": "smtp-username", "value": "${{ secrets.SENDGRID_USERNAME }}", "CIvars": [{"name": "SENDGRID_USERNAME", "expression": "secrets.SENDGRID_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "smtp-password", "value": "${{ secrets.SENDGRID_API_KEY }}", "CIvars": [{"name": "SENDGRID_API_KEY", "expression": "secrets.SENDGRID_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "secure", "value": true, "CIvars": []}]}]}]}
{"id": "65709306_0", "jobs": [{"name": "run-powershell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/installer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.2.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pwsh -Command './path/to/your/script.ps1'  # Adjust script path as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65718409_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build/web", "CIvars": []}]}]}]}
{"id": "65764274_1", "jobs": [{"name": "run-pdo-sqlite", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "sqlite3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"<?php\n// Create an in-memory SQLite database\n$db = new PDO('sqlite::memory:');\n\n// Create a table\n$db->exec('CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)');\n\n// Insert data\n$db->exec(\\\"INSERT INTO users (name) VALUES ('Alice'), ('Bob'), ('Charlie')\\\");\n\n// Query data\n$stmt = $db->query('SELECT * FROM users');\n$users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n// Output the result\nprint_r(\\$users);\n?>\" > test_db.php\n\nphp test_db.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65785149_2", "jobs": [{"name": "build", "steps": []}]}
{"id": "65809324_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "k3s-io/k3s-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "v1.21.6+k3s1", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.K3S_TOKEN }}", "CIvars": [{"name": "K3S_TOKEN", "expression": "secrets.K3S_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.K3S_KUBECONFIG }}\" > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n# You can add more kubectl commands for other resources as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/my-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65817504_0", "jobs": [{"name": "install-r-packages", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "r-version", "value": "4.3", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install the remotes package if it's not installed\nif ! Rscript -e \"if(!requireNamespace('remotes', quietly = TRUE)) install.packages('remotes')\"; then\n  echo \"Failed to install remotes\"\n  exit 1\nfi\n\n# Restore packages using renv, packrat, or install from requirements\nRscript -e \"if (!requireNamespace('renv', quietly = TRUE)) install.packages('renv'); renv::restore()\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"testthat::test_dir('tests')\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65820171_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd android\nchmod +x gradlew  # Make sure gradlew is executable\n./gradlew build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd android\ngem install fastlane\nfastlane build  # Replace 'build' with your Fastlane lane\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65854275_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBECONFIG}\" | base64 --decode > $HOME/.kube/config\nkubectl config view\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-release ./my-chart --namespace my-namespace\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Wait for all resources to be ready\necho \"Waiting for resources to be ready...\"\nkubectl wait --for=condition=available --all --namespace my-namespace --timeout=300s\n\n# Optionally, you can also wait for specific deployments\n# kubectl wait --for=condition=available deployment/<deployment-name> --namespace my-namespace --timeout=300s\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"All resources are ready!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "65856638_1", "jobs": [{"name": "call-central-ci", "steps": []}]}
{"id": "65860635_0", "jobs": [{"name": "install-packages", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/R/library\n~/.cache/R\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-R-${{ hashFiles('**/*.R', '**/*.Rmd') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-R-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "Rscript -e \"if (!requireNamespace('remotes', quietly = TRUE)) install.packages('remotes')\"\nRscript -e \"remotes::install_deps(dependencies = TRUE)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6591759_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install the required dependencies for building and installing XHProf\nsudo apt-get update\nsudo apt-get install -y php-dev git\ngit clone https://github.com/longbill/XHProf.git\ncd XHProf/extension\nphpize\n./configure\nmake\nsudo make install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo 'extension=xhprof.so' >> $HOME/.phpenv/versions/$(php -r 'echo PHP_VERSION;')/etc/php.ini\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This command may vary depending on your PHPUnit or other testing setup\nphp -d xhprof.auto_start=1 vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p xhprof-traces\nmv /path/to/xhprof/trace/files/* xhprof-traces/ # Adjust this path where trace files are generated\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xhprof-traces", "CIvars": []}, {"type": "arg", "name": "path", "value": "xhprof-traces/", "CIvars": []}]}]}]}
{"id": "65924707_0", "jobs": [{"name": "create-release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Changes in this release:\n- Add your release notes here\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./path_to_your_asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "65953108_0", "jobs": [{"name": "check_status", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running tests\"\n# Simulate a passing or failing test\nexit 0 # Change this to 'exit 1' to simulate a failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ $GITHUB_RUN_STATUS == \"success\" ]]; then\n  echo \"Workflow status: success\" >> $GITHUB_ENV\nelse\n  echo \"Workflow status: failure\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-or-update-issue", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Workflow Status Update", "CIvars": []}, {"type": "arg", "name": "body", "value": "The workflow has completed with the following status: ${{ env.GITHUB_ENV }}\n", "CIvars": [{"name": "GITHUB_ENV", "expression": "env.GITHUB_ENV", "type": "env"}]}, {"type": "arg", "name": "labels", "value": "workflow-status", "CIvars": []}]}]}]}
{"id": "65974056_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Install dependencies if using Node.js\nnpm run build  # Build your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "release_name", "value": "Release ${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "./path/to/your/asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "66016833_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "julia-actions/setup-julia", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "${{ matrix.julia-version }}", "CIvars": [{"name": "julia-version", "expression": "matrix.julia-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "using Pkg\nPkg.instantiate()\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "using Pkg\nPkg.test()\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "julia-actions/setup-julia", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "1.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "using Pkg\nPkg.instantiate()\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "using Pkg\nPkg.Registry.add(\"General\")  # Ensure you are using the General registry\nPkg.publish()\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66025577_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "r-version", "value": "4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Install remotes package\nR -e \"install.packages('remotes')\"\n\n# Install the package from the private repository\nR -e \"remotes::install_github('username/repo', auth_token = Sys.getenv('GH_PAT'))\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"devtools::test()\"  # Run your tests here (if any)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66053964_0", "jobs": [{"name": "format", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter format .", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git diff\nif ! git diff --exit-code; then\n  echo \"Code is not formatted. Please run 'flutter format .' to format your code.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66116859_0", "jobs": [{"name": "build_and_deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sSL https://aka.ms/oryx-install.sh | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd path/to/your/blazor-app # Change this path to your Blazor project directory\ndotnet publish -c Release -o output\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd output\nzip -r ../blazor-app.zip *\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/static-web-apps-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_static_web_apps_api_token", "value": "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}", "CIvars": [{"name": "AZURE_STATIC_WEB_APPS_API_TOKEN", "expression": "secrets.AZURE_STATIC_WEB_APPS_API_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "upload_directory", "value": "output", "CIvars": []}]}]}]}
{"id": "66143815_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.cache/swiftpm", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-spm-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "12.5", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift package update", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66178123_0", "jobs": [{"name": "validate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "pwsh-version", "value": "7.2.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -AllowClobber\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run PSScriptAnalyzer on all .ps1 files in the repository\nGet-ChildItem -Path . -Recurse -Include *.ps1 | ForEach-Object {\n  Invoke-ScriptAnalyzer -Path $_.FullName -Recurse\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66189570_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "xcode-actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "xcode-tests-result", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/test-results.xml", "CIvars": []}]}]}]}
{"id": "66196058_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-docker-repo/your-image-name:latest", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "kubectl_version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig.yaml\nexport KUBECONFIG=$(pwd)/kubeconfig.yaml\nkubectl config use-context your-context-name  # Replace with your actual context name.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment-name your-container-name=your-docker-repo/your-image-name:latest  # Replace with your actual deployment and container names.\nkubectl rollout status deployment/your-deployment-name  # Check the status of the rollout.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66218434_0", "jobs": [{"name": "test-requirements", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require --dev ${{ matrix.requirement }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66226038_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/action-dart", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dart", "value": "${{ matrix.dart }}", "CIvars": [{"name": "dart", "expression": "matrix.dart", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "${{ matrix.python }}", "CIvars": [{"name": "python", "expression": "matrix.python", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python -m unittest discover", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66233463_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.kube\necho \"${KUBE_CONFIG_DATA}\" > ~/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3.sh | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm repo add my-repo https://my-chart-repo-url # Replace with your Helm repo URL\nhelm repo update\nhelm upgrade --install my-release my-repo/my-chart --namespace my-namespace --create-namespace --values values.yaml  # Replace with your release name and chart details\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get all -n my-namespace  # Check resources in the specified namespace\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66247264_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dotenv-linter/dotenv-linter", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "env_file", "value": ".env", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"DATABASE_URL=${{ env.DATABASE_URL }}\"\necho \"API_KEY=${{ env.API_KEY }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python your_script.py", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66248702_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "publish_repo", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "66254608_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change this command as appropriate for your app\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Change this command as appropriate for your app\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_FUNCTION_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "66273852_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"your_encrypted_credentials_here\" | base64 --decode > config/credentials.enc\necho \"your_master_key_here\" > config/master.key\necho \"your_deckard_file_here\" > config/deckard_file # Optional, see below for custom logic\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install --frozen-lockfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\nrails db:test:prepare\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or your test command of choice\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66285941_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-qemu-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$KUBECONFIG\" > ~/.kube/config\nchmod 600 ~/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml  # Update the path to your deployment YAML file\nkubectl apply -f k8s/service.yaml  # Update the path to your service YAML file\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66304333_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID\naz account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get public IP of the VMSS instance\nPUBLIC_IP=$(az vmss instance list --resource-group $RESOURCE_GROUP_NAME --vmss-name $VMSS_NAME --query \"[?instanceId=='$VMSS_INSTANCE_ID'].{ip: ipAddress}\" -o tsv)\n\n# Ensure the SSH key has the correct permissions\necho \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\n\n# Use scp to copy files (substituting \"your_files_directory/*\" with the actual files you want to copy)\nscp -o StrictHostKeyChecking=no -i private_key.pem your_files_directory/* azureuser@$PUBLIC_IP:/path/to/destination\n\n# Clean up private key\nrm -f private_key.pem\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66335124_1", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/arm-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}, {"type": "arg", "name": "resource-group", "value": "<YourResourceGroupName>", "CIvars": []}, {"type": "arg", "name": "template", "value": "./azuredeploy.json", "CIvars": []}, {"type": "arg", "name": "parameters", "value": "appServicePlanName=<YourAppServicePlanName>\nwebAppName=<YourWebAppName>\nlocation=<YourAzureLocation>\nskuName=S1\nskuCapacity=1\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YourWebAppName>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "66350687_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "node_modules", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g @ionic/cli", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ionic capacitor add ios", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ionic capacitor sync ios", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release -archivePath build/YourApp.xcarchive archive\nxcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportPath build/YourApp.ipa -exportOptionsPlist exportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ./ios/build/embedded.mobileprovision", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "./ios/build/YourApp.ipa", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/app-store-push-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app_id", "value": "your_app_id", "CIvars": []}, {"type": "arg", "name": "api_key", "value": "${{ secrets.APP_STORE_CONNECT_API_KEY }}", "CIvars": [{"name": "APP_STORE_CONNECT_API_KEY", "expression": "secrets.APP_STORE_CONNECT_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "api_issuer", "value": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}", "CIvars": [{"name": "APP_STORE_CONNECT_ISSUER_ID", "expression": "secrets.APP_STORE_CONNECT_ISSUER_ID", "type": "secret"}]}, {"type": "arg", "name": "ipa_path", "value": "./ios/build/YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "output_directory", "value": "./ios/build/", "CIvars": []}]}]}]}
{"id": "6643929_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-haskell", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ghc-version", "value": "8.10.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cabal update && cabal install --only-dependencies --enable-tests", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66474525_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"This is the first task.\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "workflow", "value": "second-workflow.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "inputs", "value": {"example_input": "Hello from first workflow."}, "CIvars": []}]}]}]}
{"id": "66508810_0", "jobs": [{"name": "get-latest-tag", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "latest_tag=$(gh release list --limit 1 --json tagName -q '.[0].tagName')\necho \"Latest tag is: $latest_tag\"\necho \"::set-output name=tag::$latest_tag\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The latest released tag is ${{ steps.get_latest_tag.outputs.tag }}\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66510689_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install  # If you're using CocoaPods or specific Ruby dependencies\npod install  # If using CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release archive -archivePath $GITHUB_ENV/YOUR_APP_ARCHIVE_PATH.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_ENV/YOUR_APP_ARCHIVE_PATH.xcarchive -exportPath build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "build", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "appleboy/app-store-deliver", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app_id", "value": "${{ secrets.APP_ID }}", "CIvars": [{"name": "APP_ID", "expression": "secrets.APP_ID", "type": "secret"}]}, {"type": "arg", "name": "apple_id", "value": "${{ secrets.APPLE_ID }}", "CIvars": [{"name": "APPLE_ID", "expression": "secrets.APPLE_ID", "type": "secret"}]}, {"type": "arg", "name": "app_password", "value": "${{ secrets.APP_SPECIFIC_PASSWORD }}", "CIvars": [{"name": "APP_SPECIFIC_PASSWORD", "expression": "secrets.APP_SPECIFIC_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "ipa_path", "value": "build/YourApp.ipa", "CIvars": []}]}]}]}
{"id": "66517588_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 465, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "A Pull Request has been Merged!", "CIvars": []}, {"type": "arg", "name": "body", "value": "A pull request has been merged into the repository. Please pull the latest changes in your local IDE.", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "66539231_0", "jobs": [{"name": "commandeer-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v1.0.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh auth login --with-token <<< \"$GITHUB_TOKEN\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Commandeering the PR...\"\nPR_NUMBER=$(echo \"${{ github.event.issue.number }}\")\necho \"Changing the assignee for PR #${PR_NUMBER}\"\n\n# Replace with the GitHub username to whom you want to assign the PR\nNEW_ASSIGNEE=\"new-username\"\n\ngh pr edit $PR_NUMBER --add-assignee $NEW_ASSIGNEE\necho \"Assigned PR #${PR_NUMBER} to $NEW_ASSIGNEE\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66557514_0", "jobs": [{"name": "request-review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/request-review", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "username1,username2", "CIvars": []}, {"type": "arg", "name": "team-reviewers", "value": "team-name", "CIvars": []}]}]}]}
{"id": "66559077_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('devtools')  # Install devtools to manage dependencies\ndevtools::install_deps(dependencies = TRUE)  # Install project dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"library(testthat); test_dir('tests/testthat')\"  # Run tests in the specified directory\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66613362_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "3.5.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -LO https://github.com/roboll/helmfile/releases/latest/download/helmfile_linux_amd64\nchmod +x helmfile_linux_amd64\nsudo mv helmfile_linux_amd64 /usr/local/bin/helmfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helmfile template  # This is typically to ensure that dependencies are resolved\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helmfile apply\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deployment failed with exit code ${{ job.status }}. Please check the logs.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66642273_0", "jobs": [{"name": "ssh-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "webfactory/ssh-agent", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.SSH_PRIVATE_KEY }}", "CIvars": [{"name": "SSH_PRIVATE_KEY", "expression": "secrets.SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Example SSH command\nssh -o StrictHostKeyChecking=no user@hostname \"your-command-here\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.ssh-command.out }}\" =~ ^err: ]]; then\n  echo \"Warning: There were some errors during the SSH command execution.\"\nelse\n  echo \"SSH command executed successfully!\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Output from SSH command:\"\necho \"${{ steps.ssh-command.out }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66705520_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -n \"${{ github.event.inputs.spec_file }}\" ]; then\n  bundle exec parallel_rspec --test ${GITHUB_WORKSPACE}/spec/$GITHUB_ENV.spec\nelse\n  echo \"No spec file specified\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66706352_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Or your test command, e.g., `bundle exec rake test`\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66765963_0", "jobs": [{"name": "install-laravel-nova", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, sqlite3, curl, gd, openssl, etc.", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require laravel/nova\nnpm install --production --silent\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test --verbose", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66793451_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az deployment group create \\\n  --resource-group <your-resource-group-name> \\\n  --template-file template.json \\\n  --parameters parameters.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66828140_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CERTIFICATE_${{ matrix.profile | upper }} }}\" | base64 -d > certificate.p12\necho \"${{ secrets.PROVISIONING_PROFILE_${{ matrix.profile | upper }} }}\" | base64 -d > profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity import certificate.p12 -k build.keychain -P \"${{ secrets.CERTIFICATE_PASSWORD }}\" -T /usr/bin/codesign\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/${{ matrix.profile }}.xcarchive CODE_SIGN_IDENTITY=\"iPhone Distribution\" CODE_SIGN_STYLE=\"Manual\" PROVISIONING_PROFILE=\"${{ secrets.PROVISIONING_PROFILE_${{ matrix.profile | upper }} }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/${{ matrix.profile }}.xcarchive -exportPath ${{ github.workspace }}/build/${{ matrix.profile }}.ipa -exportOptionsPlist exportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-${{ matrix.profile }}", "CIvars": [{"name": "profile", "expression": "matrix.profile", "type": "matrix"}]}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/${{ matrix.profile }}.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}, {"name": "profile", "expression": "matrix.profile", "type": "matrix"}]}]}]}]}
{"id": "66836000_0", "jobs": [{"name": "run-php", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f composer.json ]; then\n  composer install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php /var/www/html/your-script.php  # Adjust path to your PHP file\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66871847_0", "jobs": [{"name": "version", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install the necessary tools\nnpm install -g semantic-release\n\n# Run semantic-release which takes care of versioning\nnpx semantic-release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npx semantic-release --dry-run --ci\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"GitHub Actions\"\ngit config --local user.email \"actions@github.com\"\ngit commit -am \"ci: bump version\"\ngit push origin main\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Add your build and push logic for each microservice\ncd services/service1\ndocker build -t username/service1:latest .\ndocker push username/service1:latest\n\ncd ../service2\ndocker build -t username/service2:latest .\ndocker push username/service2:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "drafty/gh-release", "version": "v1.4.0", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v${{ steps.version.outputs.new_version }}", "CIvars": [{"name": "version.outputs.new_version", "expression": "steps.version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "release_name", "value": "Release v${{ steps.version.outputs.new_version }}", "CIvars": [{"name": "version.outputs.new_version", "expression": "steps.version.outputs.new_version", "type": "steps"}]}, {"type": "arg", "name": "body", "value": "Update on microservices release\n", "CIvars": []}]}]}]}
{"id": "66896516_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Rscript -e \"install.packages(c('rsconnect', 'shiny'))\"  # Install necessary packages\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y locales\nsudo locale-gen en_US.UTF-8\necho \"LANG=en_US.UTF-8\" | sudo tee -a /etc/default/locale\necho \"LC_ALL=en_US.UTF-8\" | sudo tee -a /etc/default/locale\necho \"LANGUAGE=en_US:en\" | sudo tee -a /etc/default/locale\nsudo locale-gen\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"rsconnect::deployApp('/path/to/your/app', appName = 'YourAppName', server = 'shinyapps.io')\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66948900_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rtCamp/action-slack-notify", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "slack_webhook_url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "*Pull Request Notification:*\n- *Title:* ${{ github.event.pull_request.title }}\n- *Author:* ${{ github.event.pull_request.user.login }}\n- *URL:* ${{ github.event.pull_request.html_url }}\n- *Action:* ${{ github.event.action == 'closed' && github.event.pull_request.merged ? 'Merged' : github.event.action }}\n- *State:* ${{ github.event.pull_request.state }}\n", "CIvars": [{"name": "event.pull_request.title", "expression": "github.event.pull_request.title", "type": "context"}, {"name": "event.pull_request.user.login", "expression": "github.event.pull_request.user.login", "type": "context"}, {"name": "event.pull_request.html_url", "expression": "github.event.pull_request.html_url", "type": "context"}, {"name": "event.action", "expression": "github.event.action == 'closed' && github.event.pull_request.merged ? 'Merged' : github.event.action", "type": "context"}, {"name": "event.action", "expression": "github.event.action", "type": "context"}, {"name": "event.pull_request.merged", "expression": "github.event.pull_request.merged", "type": "context"}, {"name": "event.pull_request.state", "expression": "github.event.pull_request.state", "type": "context"}]}]}]}]}
{"id": "66966223_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl, zip, openssl, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.SSH_KEY }}\" > private_key.pem\nchmod 600 private_key.pem\nssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST \"cd $APP_DIR && git pull origin main && composer install --no-dev --optimize-autoloader && php artisan migrate --force\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm private_key.pem", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "66983109_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml, ctype, json, bcmath, fileinfo", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "find . -type l ! -exec test -e {} \\; -print\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $(find . -type l ! -exec test -e {} \\; -print | wc -l) -ne 0 ]; then\n  echo \"Error: There are broken symlinks!\";\n  exit 1;\nelse\n  echo \"No broken symlinks found!\";\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67021631_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "use_r_check_args", "value": false, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "R -e 'install.packages(\"remotes\")'\nR -e 'remotes::install_deps(dependencies = TRUE)'\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install <your-python-package>  # Replace with the name of your Python dependencies\n# If you have a requirements.txt or specific packages, you might do:\n# pip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'devtools::test()'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'devtools::check()'", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6704589_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cucumber", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cucumber-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "cucumber_report.json", "CIvars": []}]}]}]}
{"id": "67077738_0", "jobs": [{"name": "run-executable", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh-get", "version": "v0.0.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the path to the executable\n$exePath = \".\\path\\to\\your\\executable.exe\"\n\n# Check if the file exists\nif (Test-Path $exePath) {\n    # Execute the file\n    Start-Process -FilePath $exePath -Wait\n} else {\n    Write-Host \"Executable not found at path: $exePath\"\n    exit 1  # Exit with an error if the executable is not found\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67082945_0", "jobs": [{"name": "check_64_bit_support", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Specify your project file path and target\nPROJECT_NAME=\"YourProject.xcodeproj\"\nTARGET_NAME=\"YourTarget\"\n\n# Retrieve the 64-bit build support status\nBUILD_SETTINGS=$(xcodebuild -project \"$PROJECT_NAME\" -target \"$TARGET_NAME\" -showBuildSettings)\n\necho \"$BUILD_SETTINGS\" | grep 'ARCHS ='\n\nif echo \"$BUILD_SETTINGS\" | grep -q 'ARCHS = arm64'; then\n  echo \"64-bit support detected.\"\n  echo \"64-bit support detected.\" >> build_report.txt\nelse\n  echo \"No 64-bit support detected.\"\n  echo \"No 64-bit support detected.\" >> build_report.txt\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "build_report.txt", "CIvars": []}]}]}]}
{"id": "67084550_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.npm", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-npm-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Running custom NPM install...\"\nnpm install\n# You can add additional custom scripts or commands here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-id", "value": "${{ secrets.WEBAPP_ID }}", "CIvars": [{"name": "WEBAPP_ID", "expression": "secrets.WEBAPP_ID", "type": "secret"}]}, {"type": "arg", "name": "publish-dir", "value": "./build", "CIvars": []}]}]}]}
{"id": "67102464_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-cred", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-west-2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install jq", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Load the existing appsettings.json\nappsettings_file=\"appsettings.json\"\n\n# Substitute variables (example: replace \"DB_CONNECTION_STRING\" with your secret value)\nif [[ -f \"$appsettings_file\" ]]; then\n    # Here you can replace variables with actual environment variable values\n    jq --arg db_conn \"$DB_CONNECTION_STRING\" \\\n       '.ConnectionStrings.Database = $db_conn' \\\n       \"$appsettings_file\" > tmp.$$.json && mv tmp.$$.json \"$appsettings_file\"\nelse\n    echo \"appsettings.json file not found!\"\n    exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create an AppSpec file if necessary\necho 'version: 0.0' > appspec.yml\necho 'os: linux' >> appspec.yml\necho 'files:' >> appspec.yml\necho '  - source: /' >> appspec.yml\necho '    destination: /path/to/deploy' >> appspec.yml  # Update your destination path\necho 'hooks:' >> appspec.yml\necho '  AfterInstall:' >> appspec.yml\necho '    - location: /path/to/deploy/start.sh' >> appspec.yml  # Adjust your startup script\n\n# Deploy to CodeDeploy\naws deploy create-deployment \\\n  --application-name your_application_name \\\n  --deployment-group-name your_deployment_group_name \\\n  --s3-location bucket=your_bucket_name,key=your_s3_key,bundleType=zip,version=$GITHUB_SHA \\\n  --file-appspec appspec.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up: removing temporary files if any...\"\n# Clean up temporary files if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67103601_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n# or your specific build command if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n# Add any build steps if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/rest.js", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "method", "value": "post", "CIvars": []}, {"type": "arg", "name": "url", "value": "/repos/${{ github.repository }}/deployments", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "body", "value": "{\n  \"ref\": \"${{ github.sha }}\",\n  \"required_contexts\": [],\n  \"payload\": {\n    \"environment\": \"production\",\n    \"description\": \"Deployment from GitHub Actions\"\n  }\n}\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment URL: ${{ steps.create_deployment.outputs.url }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67114835_0", "jobs": [{"name": "ios", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nfastlane your_ios_lane # Replace with your actual Fastlane lane name\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "android", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd android\n./gradlew dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd android\nfastlane your_android_lane # Replace with your actual Fastlane lane name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67119415_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProjectName.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProjectName.xcworkspace -scheme YourSchemeName -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67122591_0", "jobs": [{"name": "display-init-logs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\nminikube start\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      initContainers:\n      - name: my-init-container\n        image: busybox\n        command: ['sh', '-c', 'echo \"Init container is running\"; sleep 5']\n      containers:\n      - name: my-application\n        image: busybox\n        command: ['sh', '-c', 'while true; do echo \"Running application\"; sleep 5; done']\nEOF\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl wait --for=condition=complete --timeout=300s pod -l app=my-app\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get the pod name\nPOD_NAME=$(kubectl get pods -l app=my-app -o jsonpath=\"{.items[0].metadata.name}\")\n# Fetch logs of the init container\nkubectl logs $POD_NAME -c my-init-container\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl delete deployment my-app || echo \"No deployment to delete.\"\nminikube stop\nminikube delete\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67151492_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "/tmp/.buildx-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-buildx-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-buildx-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "docker buildx build --push --tag myusername/myimage:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_HUB_USERNAME }}", "CIvars": [{"name": "DOCKER_HUB_USERNAME", "expression": "secrets.DOCKER_HUB_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_HUB_TOKEN }}", "CIvars": [{"name": "DOCKER_HUB_TOKEN", "expression": "secrets.DOCKER_HUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker push myusername/myimage:latest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67162041_0", "jobs": [{"name": "setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, xml, curl, sqlite3, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y sqlite  # Install SQLite\necho \"DB_CONNECTION=sqlite\" >> .env\necho \"DB_DATABASE=/tmp/database.sqlite\" >> .env\ntouch /tmp/database.sqlite  # Create the SQLite database file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test --env=testing", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67167125_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install && npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \\\n  -H \"Authorization: Bearer $PANTHEON_OAUTH_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"description\": \"Deploying via GitHub Actions\"}' \\\n  \"https://api.pantheon.io/v1/sites/$PANTHEON_SITE/environments/$PANTHEON_ENV/deploy\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67167369_0", "jobs": [{"name": "manage-webjobs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${AZURE_CREDENTIALS}\" | az login --service-principal --username $(echo \"${AZURE_CREDENTIALS}\" | jq -r .clientId) --password $(echo \"${AZURE_CREDENTIALS}\" | jq -r .clientSecret) --tenant $(echo \"${AZURE_CREDENTIALS}\" | jq -r .tenantId)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# List all Continuous WebJobs and stop them\nappName='your-app-name' # Replace with your Azure App Service name\nresourceGroup='your-resource-group' # Replace with your Azure resource group\nwebJobs=$(az webapp webjob list --name $appName --resource-group $resourceGroup --query \"[?isContinuous].{name:name}\" -o tsv)\n\nif [ -z \"$webJobs\" ]; then\n  echo \"No continuous WebJobs found to stop.\"\nelse\n  for job in $webJobs; do\n    echo \"Stopping WebJob: $job\"\n    az webapp webjob stop --name $job --resource-group $resourceGroup --webapp-name $appName\n  done\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# List all Continuous WebJobs and start them\nwebJobs=$(az webapp webjob list --name $appName --resource-group $resourceGroup --query \"[?isContinuous].{name:name}\" -o tsv)\n\nif [ -z \"$webJobs\" ]; then\n  echo \"No continuous WebJobs found to start.\"\nelse\n  for job in $webJobs; do\n    echo \"Starting WebJob: $job\"\n    az webapp webjob start --name $job --resource-group $resourceGroup --webapp-name $appName\n  done\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67172951_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"RAILS_MASTER_KEY=$RAILS_MASTER_KEY\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create\nbin/rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # or the command you use to run your tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67182881_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$AZURE_CREDENTIALS\" > credentials.json\naz login --service-principal --username $(jq -r .clientId < credentials.json) --password $(jq -r .clientSecret < credentials.json) --tenant $(jq -r .tenantId < credentials.json)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Set the required parameters\nRESOURCE_GROUP=\"your-resource-group\"\nAPP_NAME=\"your-app-name\"\nSUBFOLDER=\"subfolder\"\n\n# Deploy to the Azure Web App\naz webapp deployment source config-zip \\\n  --resource-group $RESOURCE_GROUP \\\n  --name $APP_NAME \\\n  --src <(cd $SUBFOLDER && zip -r - .)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67189941_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r deployment.zip ./dist", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "0.5.0", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --follow-symlinks", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "aws deploy push \\\n  --application-name your-application-name \\\n  --s3-location s3://your-s3-bucket-name/deployment.zip \\\n  --ignore-hidden-files \\\n  --region us-east-1 # Change it to your region\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "aws deploy create-deployment \\\n  --application-name your-application-name \\\n  --s3-location bucket=your-s3-bucket-name,key=deployment.zip,bundleType=zip \\\n  --deployment-group-name your-deployment-group-name \\\n  --region us-east-1 # Change it to your region\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67205529_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nRAILS_ENV=test bundle exec rails db:create\nRAILS_ENV=test bundle exec rails db:schema:load\nRAILS_ENV=test bundle exec rails db:seed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test bundle exec rspec  # Change to 'rails test' for Minitest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "file", "value": "coverage/.resultset.json", "CIvars": []}, {"type": "arg", "name": "flags", "value": "unittests", "CIvars": []}]}]}]}
{"id": "67225772_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ ! -d \"./node_modules/.bin\" ]; then\n  echo \"The .bin folder is missing!\"\n  exit 1\nelse\n  echo \"The .bin folder is present.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-azure-app-name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "67300831_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "maxim-lobanov/setup-xcode", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectDirectory\npod install  # Or use your package manager command if it's not CocoaPods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun instruments -t \"Time Profiler\" -D /tmp/instruments -w 'your-device-name' /path/to/YourApp.app -e UIARESULTSPATH /tmp/instruments-results -only-show-release\n# This command will run your Instruments with the Time Profiler template.\n# Make sure to adjust paths and flags as needed for your setup.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd /tmp/instruments-results\nzip -r instruments-results.zip .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "instruments-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "/tmp/instruments-results/instruments-results.zip", "CIvars": []}]}]}]}
{"id": "67315970_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "${{ secrets.DOCKER_USERNAME }}/your-app-name:${{ github.sha }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "kubeconfig", "value": "${{ secrets.KUBECONFIG }}", "CIvars": [{"name": "KUBECONFIG", "expression": "secrets.KUBECONFIG", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/your-deployment-name your-container-name=${{ secrets.DOCKER_USERNAME }}/your-app-name:${{ github.sha }}\nkubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67317620_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "shell_cmd", "cmd": "echo \"PR Labels: ${{ toJson(github.event.pull_request.labels) }}\"\nif [[ \"${{ github.event.pull_request.labels }}\" == *'\"label_you_are_interested_in\"'* ]]; then\n  echo \"IsLabel=true\" >> $GITHUB_ENV\nelse\n  echo \"IsLabel=false\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}]}]}]}
{"id": "67330220_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67347360_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./build", "CIvars": []}]}]}]}
{"id": "67382262_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "kubectl-use-azure-auth", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" | base64 --decode > $HOME/.kube/config\nchmod 600 $HOME/.kube/config \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Configuring GitHub OAuth for SSO...\"\nkubectl apply -f ./k8s/github-oauth-config.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f ./k8s/application1-deployment.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f ./k8s/application2-deployment.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources...\"\n# Optional: Cleanup actions if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67412139_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rust-lang/rustup-init", "version": "1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "default_toolchain", "value": "stable", "CIvars": []}, {"type": "arg", "name": "components", "value": "rustfmt, clippy", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo '[target.x86_64-pc-windows-msvc]' >> ~/.cargo/config.toml\necho 'linker = \"lld-link\"' >> ~/.cargo/config.toml\necho 'ar = \"llvm-ar\"' >> ~/.cargo/config.toml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cargo build --verbose", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cargo test --verbose", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67430449_1", "jobs": [{"name": "trigger-downstream", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "wei/curl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-X POST  -H \"Authorization: token ${{ secrets.REPO_B_PAT }}\" -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/username-of-repository-b/your-repo-name/actions/workflows/triggered-workflow.yml/dispatches -d '{\"ref\":\"main\"}'  # Adjust 'main' to your target branch\n", "CIvars": [{"name": "REPO_B_PAT", "expression": "secrets.REPO_B_PAT", "type": "secret"}]}]}]}]}
{"id": "67453792_0", "jobs": [{"name": "run_r_script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "use-public-r", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "Rscript -e 'install.packages(c(\"httr\", \"jsonlite\"))'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67483023_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change this if you're using different package management\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Change this command if you have different build steps\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "67528833_0", "jobs": [{"name": "sonar-scan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.m2/repository", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mvn install --no-cache", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn sonar:sonar -Dsonar.host.url=https://your-sonar-url.com -Dsonar.login=$SONAR_TOKEN", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-token", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "sonar-url", "value": "https://your-sonar-url.com", "CIvars": []}]}]}]}
{"id": "67583850_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.MY_CERTIFICATE }}\" > my_certificate.p12\nsecurity create-keychain -p \"password\" build.keychain\nsecurity import my_certificate.p12 -k build.keychain -P \"your_certificate_password\" -T /usr/bin/codesign\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p \"password\" build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"password\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane ios beta --cert \"path_to_specific_certificate.p12\" --cert_password \"your_certificate_password\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "MyArtifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/artifact.ipa", "CIvars": []}]}]}]}
{"id": "67592292_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('devtools')\ndevtools::install_deps(dep = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "library(roxygen2)\nroxygen2::roxygenise()\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD build .\nR CMD check *.tar.gz --as-cran\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./docs", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "67603580_0", "jobs": [{"name": "tmate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mxschmitt/action-tmate", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "bash", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace with your dependencies installation commands\n# For example:\nsudo apt-get install -y some-dependency\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace with your command or tests\necho \"Running tests...\"\nsleep 10  # Simulating a long-running process\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The workflow was canceled.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67622464_0", "jobs": [{"name": "sync-models", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Clone the shared models repository\ngit clone --depth 1 https://github.com/${SHARED_REPO}.git shared-models\ncd shared-models\n\n# Copy Eloquent models from the current repository to the shared repository\ncp -r ../app/Models/* .  # Copy Eloquent models to the shared directory\n\n# Configure git\ngit config user.name \"GitHub Actions\"\ngit config user.email \"actions@github.com\"\n\n# Add changes to the shared repository\ngit add .\ngit commit -m \"Sync Eloquent models from ${GITHUB_REPOSITORY} to shared repository\" || echo \"No changes to commit\"\n\n# Push changes to the shared models repository\ngit push origin ${TARGET_BRANCH} --force\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67659907_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-docker-username/your-image-name:latest", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "appleboy/http-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://your-portainer-url/api/endpoints/1/docker/images/your-docker-username/your-image-name/1/pull", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "Authorization: Bearer ${{ secrets.PORTAINER_API_TOKEN }}  # Portainer API token in secrets\n", "CIvars": [{"name": "PORTAINER_API_TOKEN", "expression": "secrets.PORTAINER_API_TOKEN", "type": "secret"}]}]}]}]}
{"id": "67670107_0", "jobs": [{"name": "k8s-bake", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Set up any required environment variables or secrets\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/k8s-bake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "kustomization_path", "value": "./k8s", "CIvars": []}, {"type": "arg", "name": "output_path", "value": "./output", "CIvars": []}, {"type": "arg", "name": "images", "value": "# Example of images and tags\nmy-app=my-app-image:latest\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Baked files located at: ${{ steps.k8s-bake.outputs.output }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67703839_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2.19.2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh pr create \\\n  --base ${{ github.event.inputs.target_branch }} \\\n  --head ${{ github.event.inputs.branch }} \\\n  --title \"${{ github.event.inputs.title }}\" \\\n  --body \"${{ github.event.inputs.body }}\" \\\n  --assignee YOUR_USERNAME \\\n  --reviewer ANOTHER_USER  # Specify if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67724715_0", "jobs": [{"name": "cleanup-helm-releases", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${KUBE_CONFIG_DATA}\" | base64 --decode > ~/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# List all Helm releases\nhelm list --all-namespaces --output json | jq -r '.[] | select(.status == \"pending-install\") | .name + \" \" + .namespace' | while read name namespace; do\n  echo \"Cleaning up stuck release: $name in namespace: $namespace\"\n  # Delete the stuck release\n  helm delete \"$name\" --namespace \"$namespace\" || echo \"Failed to delete $name\"\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get the list of orphaned Helm processes\norphaned_releases=$(helm ls --all --output json | jq -r '.[] | select(.status == \"pending-install\") | .name')\n\nfor release in $orphaned_releases; do\n  echo \"Terminating orphaned release: $release\"\n  helm uninstall \"$release\" || echo \"Failed to terminate $release\"\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67733762_0", "jobs": [{"name": "gcloud-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "YOUR_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Example: List Google Cloud Storage buckets\ngcloud alpha storage buckets list\n# Add any other gcloud commands you want to run here\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67767888_0", "jobs": [{"name": "vagrant", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y vagrant\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y virtualbox\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant init hashicorp/precise64  # Change to your required box\nvagrant up\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant ssh -c \"echo Hello from Vagrant!\" || echo \"SSH command failed\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vagrant destroy -f  # Clean up the Vagrant environment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67779861_0", "jobs": [{"name": "label-issues", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define users and corresponding labels\ndeclare -A users_labels\nusers_labels=( [\"username1\"]=\"label1\" [\"username2\"]=\"label2\" )\n\n# Get the current issue information\nissue_user=$(echo \"${{ github.event.issue.user.login }}\")\nissue_number=$(echo \"${{ github.event.issue.number }}\")\n\n# Check if the user matches and add the respective label\nif [[ -n \"${users_labels[$issue_user]}\" ]]; then\n    label=\"${users_labels[$issue_user]}\"\n    echo \"Labeling issue #${issue_number} with label '${label}'\"\n    gh issue edit \"$issue_number\" --add-label \"$label\"\nelse\n    echo \"No matching label for user '$issue_user'.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2.23.0/cli-action", "shell": "bash", "with": []}]}]}
{"id": "67838995_0", "jobs": [{"name": "cleanup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up resources...\"\n# Add commands to delete any stuck resources\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "retry_action", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "username/stuck-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.stuck-action.outcome }}\" != \"success\" ]; then\n  echo \"Stuck action failed. Retrying...\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "retry_loop", "steps": [{"type": "shell_cmd", "cmd": "max_retries=3\nfor ((i=1; i<=$max_retries; i++)); do\n  echo \"Attempt $i...\"\n  # Call the action again\n  git checkout main\n  if github_action_call; then\n    echo \"Action succeeded\"\n    exit 0\n  elif [ $i -lt $max_retries ]; then\n    echo \"Action failed. Retrying...\"\n    sleep 10 # Wait before retrying\n  else\n    echo \"Action failed after $max_retries attempts.\"\n    exit 1\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Sending failure notification...\"\n# Could send an email, Slack message, etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67909742_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, gettext", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/codecept bootstrap\nvendor/bin/codecept install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/codecept run acceptance --steps\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67916981_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Customize this command as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Hosting-Action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "projectId", "value": "YOUR_FIREBASE_PROJECT_ID", "CIvars": []}]}]}]}
{"id": "67958269_0", "jobs": [{"name": "R-analysis", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages(\"psych\")\ninstall.packages(\"dplyr\")  # Add any other packages you need\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript cronbach_alpha_analysis.R\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cronbach-alpha-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "results/", "CIvars": []}]}]}]}
{"id": "67959657_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, intl, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "error_reporting = E_ALL\ndisplay_errors = On\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer self-update\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require symfony/symfony:<version> --no-update\ncomposer update symfony/symfony --with-dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67964110_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.10.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Accessing secrets...\"\necho \"$MY_SECRET\"  # Use your secret as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-web-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/web", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying to GitHub Pages...\"\n# Command to deploy your build to GitHub Pages\n# For example, you could use a specific action or script to handle deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "67966349_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Check if your PowerShell script exists\nif (-Not (Test-Path \"./path/to/your-script.ps1\")) {\n  Write-Host \"PowerShell script not found.\"\n  exit 1\n}\n\n# Execute the PowerShell script\ntry {\n  & \"./path/to/your-script.ps1\"  # Adjust the path to your script\n}\ncatch {\n  Write-Error \"An error occurred while running the script: $_\"\n  exit 1\n}\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "67973057_1", "jobs": [{"name": "use_outputs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Output from first workflow: ${{ github.event.workflow_run.outputs.output_value }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68008181_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Access secrets and set them as environment variables\n$Env:MY_SECRET_1 = \"${{ secrets.MY_SECRET_1 }}\"\n$Env:MY_SECRET_2 = \"${{ secrets.MY_SECRET_2 }}\"\n# Example of using the secrets\nWrite-Output \"The value of MY_SECRET_1 is: $Env:MY_SECRET_1\"\nWrite-Output \"The value of MY_SECRET_2 is: $Env:MY_SECRET_2\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# You can call any PowerShell script here\n.\\your-script.ps1\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68017258_0", "jobs": [{"name": "zap-scan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "zaproxy/action-basicauth", "version": "v0.0.1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Xmx2g", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Start ZAP in daemon mode\nzap.sh -daemon -port 8080 -host 0.0.0.0 -config api.addrs.access=localhost,0.0.0.0 &\n\n# Wait for ZAP to start\nsleep 30\n\n# Run AJAX spider\nzap-cli -p 8080 spider $TARGET_URL\n\n# Wait for spider to finish\nsleep 60\n\n# Run active scan\nzap-cli -p 8080 active-scan $TARGET_URL\n\n# Wait for the active scan to finish\nsleep 60\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Generate HTML report\nzap-cli -p 8080 report -o zap-report.html -f html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "zap-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "zap-report.html", "CIvars": []}]}]}]}
{"id": "68033557_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Using environment variable from secrets: $MY_ENV_VAR_1\"\necho \"Using public environment variable: $MY_ENV_VAR_2\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "some-action/some-action", "version": "v1", "shell": "bash", "with": []}]}]}
{"id": "68048790_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "security create-keychain -p \"\" build.keychain\nsecurity set-keychain-settings -lut 21600 build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity list-keychains -s build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CERTIFICATE }}\" | base64 --decode > certificate.p12\nsecurity import certificate.p12 -k build.keychain -P \"$CERTIFICATE_PASSWORD\" -T /usr/bin/codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\necho \"${{ secrets.PROVISIONING_PROFILE }}\" | base64 --decode > ~/Library/MobileDevice/Provisioning\\ Profiles/profile.mobileprovision\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourAppScheme \\\n           -configuration Release \\\n           -sdk iphoneos \\\n           CODE_SIGN_IDENTITY=\"iPhone Distribution: Your Cert Name\" \\\n           CODE_SIGNING_REQUIRED=YES \\\n           CODE_SIGNING_ALLOWED=YES \\\n           PROVISIONING_PROFILE_SPECIFIER=\"com.xxx.app\" \\\n           | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68088974_0", "jobs": [{"name": "update-aks-sp", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-subscription", "value": "${{ secrets.AZURE_SUBSCRIPTION_NAME }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_NAME", "expression": "secrets.AZURE_SUBSCRIPTION_NAME", "type": "secret"}]}, {"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Replace with your Resource Group and AKS Cluster name\nRESOURCE_GROUP_NAME=\"your-resource-group\"\nAKS_CLUSTER_NAME=\"your-aks-cluster\"\n\n# Generate new service principal credentials\nNEW_SP_CREDENTIALS=$(az ad sp create-for-rbac --skip-assignment --query \"{appId: appId, password: password}\" --output json)\nNEW_CLIENT_ID=$(echo $NEW_SP_CREDENTIALS | jq -r '.appId')\nNEW_CLIENT_SECRET=$(echo $NEW_SP_CREDENTIALS | jq -r '.password')\n\n# Update the AKS cluster with new service principal credentials\naz aks update \\\n  --resource-group $RESOURCE_GROUP_NAME \\\n  --name $AKS_CLUSTER_NAME \\\n  --service-principal $NEW_CLIENT_ID \\\n  --client-secret $NEW_CLIENT_SECRET\n\n# Optionally, you can output these new credentials to your secrets management system\necho \"New Client ID: $NEW_CLIENT_ID\"\necho \"New Client Secret: $NEW_CLIENT_SECRET\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68089250_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "YOUR_GCP_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_CREDENTIALS }}", "CIvars": [{"name": "GCP_CREDENTIALS", "expression": "secrets.GCP_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "for file in ./sql/*.sql; do\n  echo \"Running script: $file\"\n  bq query --use_legacy_sql=false < $file\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68119749_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": 14, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}]}, {"name": "auto-merge", "steps": [{"type": "shell_cmd", "cmd": "if [[ \"${{ github.event.pull_request.mergeable }}\" != \"true\" ]]; then\n  echo \"Pull request can't be merged automatically.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "repo-sync/github-sync", "version": "v3.1.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "merge_method", "value": "merge", "CIvars": []}]}]}]}
{"id": "68137965_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, mysqlnd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional: Create your database schema if necessary\n# php artisan migrate --env=testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testsuite Unit --log-junit test-results.xml\n# Optionally store test results for upload\nmv test-results.xml ./results.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deleting all entries from the test database\"\nmysql -h 127.0.0.1 -u root -proot_password -e \"DROP DATABASE test_db; CREATE DATABASE test_db;\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "results.xml", "CIvars": []}]}]}]}
{"id": "68161639_0", "jobs": [{"name": "post-comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment-pr", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thanks for your contribution! \ud83c\udf89  \nWe appreciate your work on this PR. If you have any questions or need help, feel free to ask!\n", "CIvars": []}]}]}]}
{"id": "68188503_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "start_time=$(date +%s)\n# Replace the command below with your actual build command\nnpm run build\nend_time=$(date +%s)\n\n# Calculate build time in seconds\nbuild_time=$((end_time - start_time))\n\necho \"Build time: $build_time seconds\"\n# Set build time as output\necho \"::set-output name=build_time::$build_time\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "http://your-elasticsearch-server:9200/build_metrics/_doc", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "Content-Type: application/json", "CIvars": []}, {"type": "arg", "name": "body", "value": "{\"build_time\": \"${{ steps.build.outputs.build_time }}\", \"commit\": \"${{ github.sha }}\", \"branch\": \"${{ github.ref }}\" }", "CIvars": [{"name": "build.outputs.build_time", "expression": "steps.build.outputs.build_time", "type": "steps"}, {"name": "sha", "expression": "github.sha", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}]}]}]}]}
{"id": "68206369_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.42.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}, {"type": "arg", "name": "subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az datafactory pipeline create --resource-group ${{ secrets.RESOURCE_GROUP }} --factory-name ${{ secrets.DATA_FACTORY_NAME }} --name myPipeline --properties @path/to/your/pipeline-definition.json # Update this path to your pipeline definition file.\n\naz datafactory trigger create --resource-group ${{ secrets.RESOURCE_GROUP }} --factory-name ${{ secrets.DATA_FACTORY_NAME }} --name myTrigger --properties @path/to/your/trigger-definition.json # Update this path to your trigger definition file.\n\necho \"Publishing Azure Data Factory resources\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68257594_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create the database\nbundle exec rails db:create\n# Run migrations\nbundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your test suite\nbundle exec rspec # Change to your test command, e.g., 'rails test', 'rspec', etc.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68260575_0", "jobs": [{"name": "mailcatcher", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/ruby", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-ruby-${{ hashFiles('**/*.gemspec') }}-${{ hashFiles('Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-ruby-${{ hashFiles('**/*.gemspec') }}-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install mailcatcher\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mailcatcher --ip=0.0.0.0 --port=1025 > mailcatcher.log 2>&1 &\necho \"MailCatcher started.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you would typically run your tests that send emails\n# e.g. bundle exec rspec or similar command\necho \"Running tests...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pkill -f mailcatcher\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "mailcatcher-logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "mailcatcher.log", "CIvars": []}]}]}]}
{"id": "68264534_0", "jobs": [{"name": "terraform", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "hashicorp/setup-terraform", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "terraform_version", "value": "1.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "terraform init", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "terraform plan -no-color > plan.txt || true", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ ! -s plan.txt ]]; then\n  echo \"No changes.\"\n  echo \"::set-output name=changes::false\"\nelse\n  echo \"Changes detected.\"\n  echo \"::set-output name=changes::true\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "### Terraform Plan Summary\n```plaintext\n${{ steps.plan.outputs.stdout }}\n```\nSummary of changes detected in this PR. Please review the plan above.\n", "CIvars": [{"name": "plan.outputs.stdout", "expression": "steps.plan.outputs.stdout", "type": "steps"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up workspace...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68279209_0", "jobs": [{"name": "remind", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"## Reminder to Review GitHub Plan\" >> reminder.md\necho \"Please check your GitHub billing settings to make any necessary changes.\" >> reminder.md\necho \"- Date: $(date)\" >> reminder.md\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Monthly GitHub Billing Review Reminder", "CIvars": []}, {"type": "arg", "name": "body", "value": "This is a friendly reminder from your GitHub Action to review your GitHub billing plan. \nPlease visit your billing settings to change your plan if necessary.\n", "CIvars": []}, {"type": "arg", "name": "labels", "value": "reminder\n", "CIvars": []}]}]}]}
{"id": "68281919_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pascalgn/automerge-action", "version": "v0.15.0", "shell": "bash", "with": [{"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "68331724_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig\nexport KUBECONFIG=$(pwd)/kubeconfig\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"CURRENT_TIMESTAMP=$(date +%Y%m%d%H%M%S)\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/my-deployment my-container=my-image:latest\nkubectl patch deployment my-deployment -p \"{\\\"spec\\\": {\\\"template\\\": {\\\"spec\\\": {\\\"containers\\\": [{\\\"name\\\": \\\"my-container\\\", \\\"volumeMounts\\\": [{\\\"name\\\": \\\"my-volume\\\", \\\"mountPath\\\": \\\"/path/to/mount/${{ env.CURRENT_TIMESTAMP }}\\\"}]}]}}}}}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68367787_0", "jobs": [{"name": "behat", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring,intl,xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/behat\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68373383_0", "jobs": [{"name": "upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GCP_CREDENTIALS }}\" > $HOME/gcp-key.json\nexport GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/upload-cloud-storage", "version": "v0.1.1", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "path/to/local/folder/", "CIvars": []}, {"type": "arg", "name": "destination", "value": "gs://your-bucket-name/path/in/bucket/", "CIvars": []}]}]}]}
{"id": "68385185_0", "jobs": [{"name": "create-issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh auth login --with-token < \"${{ secrets.GITHUB_TOKEN }}\"\ngh issue create --title \"New Issue from GitHub Actions\" --body \"This is an issue created automatically by GitHub Actions.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68399221_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "haskell/setup-haskell", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ghc-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "cabal-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cabal install --only-dependencies", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cabal test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68410854_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace 'echo Hello, World!' with your actual command\noutput=$(echo Hello, World!)\necho \"output=$output\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unsplash/comment-on-pr", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "Console Output:\n```\n${{ env.output }}\n```\n", "CIvars": [{"name": "output", "expression": "env.output", "type": "env"}]}]}]}]}
{"id": "68462266_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# If you have a Gemfile, install dependencies here\n# bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby generate_json.rb", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "json-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "output.json", "CIvars": []}]}]}]}
{"id": "68481561_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Your build commands go here\necho \"Building the project...\"\n# For example: npm install && npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/setup-github-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "artifacts=$(gh run list --branch $GITHUB_REF --limit 100 | awk '{print $1}')\nfor artifact_run in $artifacts; do\n  echo \"Checking run $artifact_run\"\n  artifact_ids=$(gh run view $artifact_run --json artifacts --jq '.artifacts[].id')\n  for artifact_id in $artifact_ids; do\n    if [[ \"$artifact_id\" != \"$GITHUB_RUN_ID\" ]]; then\n      echo \"Deleting artifact with ID $artifact_id\"\n      gh run delete $artifact_run --confirm\n    fi\n  done\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-artifact-${{ github.run_id }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "path", "value": "path/to/your/artifact.zip", "CIvars": []}]}]}]}
{"id": "68505380_0", "jobs": [{"name": "capture-output", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "your-username/your-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "some-input", "value": "some-value", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Output from the action: ${{ steps.example_action.outputs.some_output }}\"  # Replace 'some_output' with the actual output name defined in the action\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68534065_0", "jobs": [{"name": "lintr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('lintr')\n# Optionally, you can install lintr dependencies\ninstall.packages('devtools')\ndevtools::install_deps(dependencies=TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"lintr::lint_dir('path/to/your/R/code')\" # Update path as necessary.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68550711_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rainbow6j/qt-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "install-tools", "value": "true", "CIvars": []}, {"type": "arg", "name": "tools", "value": "qmake", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\nqmake ..  # Adjust according to your project structure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake  # Use 'nmake' or 'jom' if you are using those on Windows\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "qt-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/", "CIvars": []}]}]}]}
{"id": "68551982_0", "jobs": [{"name": "create_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git checkout -b new-feature\necho \"This is a new feature\" > feature.txt\ngit add feature.txt\ngit commit -m \"Add new feature file\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin new-feature\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "new-feature", "CIvars": []}, {"type": "arg", "name": "base", "value": "main", "CIvars": []}, {"type": "arg", "name": "title", "value": "Add new feature", "CIvars": []}, {"type": "arg", "name": "body", "value": "This PR adds a new feature.", "CIvars": []}]}]}, {"name": "merge_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/merge-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "pull-request-number", "value": "${{ steps.create_pr.outputs.pull-request-number }}", "CIvars": [{"name": "create_pr.outputs.pull-request-number", "expression": "steps.create_pr.outputs.pull-request-number", "type": "steps"}]}, {"type": "arg", "name": "merge-method", "value": "squash", "CIvars": []}]}]}]}
{"id": "68559893_0", "jobs": [{"name": "set-default-title", "steps": [{"type": "shell_cmd", "cmd": "echo \"Checking Pull Request title...\"\nif [[ -z \"${{ github.event.pull_request.title }}\" ]]; then\n  echo \"title=Default Pull Request Title\" >> $GITHUB_ENV\nelse\n  echo \"title=${{ github.event.pull_request.title }}\" >> $GITHUB_ENV\n  echo \"PR title already set: ${{ github.event.pull_request.title }}\"\n  exit 0\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octocat/create-pull-request", "version": "v0.3.0", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "title", "value": "${{ env.title }}", "CIvars": [{"name": "title", "expression": "env.title", "type": "env"}]}, {"type": "arg", "name": "pull-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "68570682_0", "jobs": [{"name": "build_and_test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-org-id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-project-id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}]}]}]}
{"id": "68580928_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azcliversion", "value": "2.33.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}, {"type": "arg", "name": "subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "RESOURCE_GROUP=\"your-resource-group-name\"\nDATA_FACTORY_NAME=\"your-data-factory-name\"\nLINKED_SERVICE_NAME=\"your-linked-service-name\"\nNEW_URL=\"https://new-url-to-replace.com\"\n\n# Fetch the current linked service JSON\nlinked_service=$(az datafactory linked-service show \\\n  --resource-group $RESOURCE_GROUP \\\n  --factory-name $DATA_FACTORY_NAME \\\n  --name $LINKED_SERVICE_NAME --query \"properties\" -o json)\n\n# Modify the URL in the linked service JSON\nmodified_json=$(echo $linked_service | jq '.connectionString = $NEW_URL')\n\n# Update the linked service with the modified JSON\naz datafactory linked-service create-or-update \\\n  --resource-group $RESOURCE_GROUP \\\n  --factory-name $DATA_FACTORY_NAME \\\n  --name $LINKED_SERVICE_NAME \\\n  --properties \"$modified_json\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68598910_0", "jobs": [{"name": "cucumber", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you want to run cucumber with a URL that includes the SHA\n# For example, if you pass it as a parameter to a Ruby script or directly in Cucumber\ncucumber --tags \"your_tags_here\" --url \"http://example.com/your_test_endpoint?sha=${GITHUB_SHA}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68628352_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBECONFIG}\" > kubeconfig.yaml\nexport KUBECONFIG=kubeconfig.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl create namespace my-namespace || echo \"Namespace already exists\"  # Change 'my-namespace' to your desired namespace\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yml -n my-namespace  # Make sure you have your deployment config at this path\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68631708_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace the following command with the appropriate command for your project\nnpm install  # For JavaScript (Node.js)\n# pip install -r requirements.txt  # For Python\n# mvn install  # For Java with Maven\n# gradle build  # For Java with Gradle\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# For JavaScript (Node.js)\nnpm test -- --coverage\n\n# For Python\npytest --cov=your_package_name\n\n# For Java with Maven\nmvn test surefire-report:report\n\n# For Java with Gradle\n./gradlew test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Change the following command according to your setup\nsonar-scanner \\\n  -Dsonar.projectKey=your_project_key \\\n  -Dsonar.sources=src \\\n  -Dsonar.tests=tests \\\n  -Dsonar.java.binaries=target/classes \\\n  -Dsonar.test.inclusions=**/*Test.java \\\n  -Dsonar.coverageReportPaths=coverage/lcov.info # For JavaScript with Jest\n  # -Dsonar.coverageReportPaths=coverage.xml  # For Java with specific setup\n  # -Dsonar.python.coverage.reportPaths=coverage.xml # For Python\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional: Remove any temporary files or artifacts\nrm -rf coverage\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68648639_0", "jobs": [{"name": "close_pr", "steps": [{"type": "shell_cmd", "cmd": "# Replace this line with your own condition logic\necho \"CLOSING=true\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/close-pull-request", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "comment", "value": "This pull request is being closed automatically by the GitHub Actions workflow.", "CIvars": []}]}]}]}
{"id": "68674148_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running tasks in the parent workflow.\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "workflow", "value": "child.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "inputs", "value": {"service": "service1"}, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "workflow", "value": "child.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "inputs", "value": {"service": "service2"}, "CIvars": []}]}]}]}
{"id": "68720211_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_FUNCTION_APP_NAME", "CIvars": []}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "68781603_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT }}", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running health checks...\"\n# Replace this URL with your app's URL\nAPP_URL=\"https://${{ secrets.GCP_PROJECT }}.appspot.com/\"\nSTATUS_CODE=$(curl --write-out \"%{http_code}\" --silent --output /dev/null \"$APP_URL\")\nif [ \"$STATUS_CODE\" -ne 200 ]; then\n  echo \"Health check failed with status code: $STATUS_CODE\"\n  exit 1\nelse\n  echo \"Health check passed. App is running.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68826854_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "${{ matrix.ruby-version }}", "CIvars": [{"name": "ruby-version", "expression": "matrix.ruby-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec parallel_test test/models test/controllers test/integration\n# Adjust the paths above to match where your tests are located\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Tests completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68830439_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane ios build  # or `android build` for Android, adjust as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane ios distribute  # Replace with your command from Fastlane if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68882451_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "R -e 'if (!requireNamespace(\"devtools\")) install.packages(\"devtools\")'\nR -e 'devtools::install_deps(dep = TRUE)'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'devtools::check(args = \"--as-cran\")'\nR -e 'devtools::check_man()'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'devtools::build()'", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e 'if (!requireNamespace(\"devtools\")) install.packages(\"devtools\")'\nR -e 'devtools::submit_cran()'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68932854_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane changelog_from_git_commits\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "changelog", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/changelog/file", "CIvars": []}]}]}]}
{"id": "68956001_0", "jobs": [{"name": "debug-helm", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${KUBE_CONFIG_DATA}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm lint ./path/to/your/chart", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm template ./path/to/your/chart > output-template.yaml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-release ./path/to/your/chart --values ./path/to/your/values.yaml --debug\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get pods -n default  # Replace 'default' with your namespace as needed\nkubectl logs -l app=my-release  # Change 'my-release' to your release name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm uninstall my-release\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "68978306_0", "jobs": [{"name": "create-renviron", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"MY_SECRET_1=${{ secrets.MY_SECRET_1 }}\" >> .renviron\necho \"MY_SECRET_2=${{ secrets.MY_SECRET_2 }}\" >> .renviron\ncat .renviron  # Optional: view the contents of .renviron for debugging (be careful not to expose secrets in logs)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript your_script.R  # Replace with your actual R script.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69009239_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml # Assuming you have a db config for testing\nRAILS_ENV=test bundle exec rails db:create\nRAILS_ENV=test bundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RAILS_ENV=test rails server -b 0.0.0.0 -p 3000 & # Start the server in the background\nsleep 5 # Wait a moment for the server to start\ncurl -f http://localhost:3000 # Check if the server is responding\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69029030_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy_aws", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-credentials", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd my-aws-directory\nnpm run build\naws s3 sync ./dist s3://my-aws-bucket --delete\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy_azure", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.0.80", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CREDENTIALS }}\" | az login --service-principal --output none --query [0].name", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd my-azure-directory\nnpm run build\naz webapp deployment source config-zip --resource-group my-resource-group --name my-app --src path/to/your/package.zip\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69031511_0", "jobs": [{"name": "psscriptanalyzer", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "powershell/setup-powershell", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force -AllowClobber\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "$scripts = Get-ChildItem -Path . -Recurse -Include *.ps1\nforeach ($script in $scripts) {\n  Invoke-ScriptAnalyzer -Path $script.FullName -Recurse -Severity Warning,Error | Format-Table -AutoSize\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69034292_0", "jobs": [{"name": "use-composite-action", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Creating a new GitHub token environment variable\"\necho \"${GITHUB_TOKEN}\" > /tmp/github_token.txt\necho \"GITHUB_TOKEN_PATH=/tmp/github_token.txt\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "<username>/<private-repo-name>/.github/actions/<action-name>", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "input1", "value": "value1", "CIvars": []}, {"type": "arg", "name": "input2", "value": "value2", "CIvars": []}]}]}]}
{"id": "69043557_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-scripts --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php spark migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php spark test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69088200_0", "jobs": [{"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running build or tests...\"\n# Simulate a successful command\n# Uncomment the following line to test failure handling\n# exit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H \"Content-Type: application/json\" -d '{\n  \"text\": \"Build succeeded! \ud83c\udf89\",\n  \"repository\": \"${{ github.repository }}\",\n  \"commit\": \"${{ github.sha }}\",\n  \"branch\": \"${{ github.ref }}\",\n  \"author\": \"${{ github.actor }}\"\n}' $WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -H \"Content-Type: application/json\" -d '{\n  \"text\": \"Build failed! \ud83d\udea8\",\n  \"repository\": \"${{ github.repository }}\",\n  \"commit\": \"${{ github.sha }}\",\n  \"branch\": \"${{ github.ref }}\",\n  \"author\": \"${{ github.actor }}\",\n  \"error_message\": \"${{ steps.run_script.outcome }}\"\n}' $WEBHOOK_URL\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69105360_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build --stacktrace", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push-action", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "directory", "value": "app/build/outputs/apk/release", "CIvars": []}]}]}]}
{"id": "69108420_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pyside/pyside-setup", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15", "CIvars": []}, {"type": "arg", "name": "install-qt", "value": "qtbase\nqtdeclarative\nqtmultimedia\nqttools  # Add/remove modules as necessary\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "cmake -S . -B build -DCMAKE_PREFIX_PATH=$HOME/Qt/5.15/gcc_64 -DCMAKE_BUILD_TYPE=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cmake --build build --config Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ctest --test-dir build --output-on-failure", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69112842_0", "jobs": [{"name": "automerge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const { pull_request } = context.payload;\nconst [owner, repo] = process.env.GITHUB_REPOSITORY.split(\"/\");\n\n// Check if the PR is ready to be merged (no requests for changes, etc.)\nconst prReviews = await github.pulls.listReviews({\n  owner,\n  repo,\n  pull_number: pull_request.number,\n});\n\nconst isApproved = prReviews.some(review => review.state === \"APPROVED\");\nconst canMerge = pull_request.mergeable && pull_request.mergeable_state === \"clean\";\n\nreturn { canAutoMerge: isApproved && canMerge };\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "pascalgn/automerge-action", "version": "v0.15.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "69126323_0", "jobs": [{"name": "create-release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"RELEASE_VERSION=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"## Release Notes\" > release_notes.md\necho \"Release version: $RELEASE_VERSION\" >> release_notes.md\necho \"\" >> release_notes.md\necho \"### Changes\" >> release_notes.md\ngit log --pretty=oneline \"$RELEASE_VERSION\"..HEAD >> release_notes.md\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/create-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "$RELEASE_VERSION", "CIvars": []}, {"type": "arg", "name": "release_name", "value": "Release $RELEASE_VERSION", "CIvars": []}, {"type": "arg", "name": "body_path", "value": "release_notes.md", "CIvars": []}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset_path", "value": "path/to/your/asset.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "your_asset_name.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "69149159_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.pub-cache\nbuild/\nandroid/app/build\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-flutter-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter doctor", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.bundler\nGemfile.lock\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-fastlane-${{ hashFiles('**/Gemfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-fastlane-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane beta", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69182773_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Replace this with your command\nyour-command-here\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.run_command.outcome }}\" == \"failure\" ]; then\n  echo \"This command failed, checking exit code...\"\n  exit_code=${{ steps.run_command.outcome }} # Save the outcome\n  if [ \"$exit_code\" != \"specific-code-to-ignore\" ]; then\n    echo \"The command failed with exit code $exit_code, which is not ignored. Failing the build.\"\n    exit 1\n  else\n    echo \"Ignored exit code $exit_code, continuing.\"\n  fi\nelse\n  echo \"The command succeeded.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69184653_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "azure_credentials", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deploying ARM Template\"\n\n# Variables\nRESOURCE_GROUP_NAME=<your-resource-group>\nTEMPLATE_FILE=azure-arm-templates/mainTemplate.json\nPARAMETER_FILE=azure-arm-templates/parameters.json\n\n# Check for existing resource group\nif ! az group exists --name $RESOURCE_GROUP_NAME; then\n  echo \"Creating resource group: $RESOURCE_GROUP_NAME\"\n  az group create --name $RESOURCE_GROUP_NAME --location eastus\nelse\n  echo \"Resource group '$RESOURCE_GROUP_NAME' already exists.\"\nfi\n\n# Deploy the template\naz deployment group create --resource-group $RESOURCE_GROUP_NAME --template-file $TEMPLATE_FILE --parameters @$PARAMETER_FILE\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69193883_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysql, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-scripts", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do\n  if mysqladmin ping -h127.0.0.1 -uroot -ppassword --silent; then\n    echo \"MySQL is up\"; exit 0;\n  fi\n  echo \"Waiting for MySQL...\"\n  sleep 1;\ndone\necho \"MySQL didn't start, exiting.\"\nexit 1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --env=testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --parallel --process-time=60 --coverage=none\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.CODECOV_TOKEN }}", "CIvars": [{"name": "CODECOV_TOKEN", "expression": "secrets.CODECOV_TOKEN", "type": "secret"}]}]}]}]}
{"id": "69252289_0", "jobs": [{"name": "run-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Start Xvfb (X virtual framebuffer) to run tests with a UI\nXvfb :99 -ac &\nsleep 3 # wait for Xvfb to start\n# Run your RSpec tests or any testing framework you use\nbundle exec rspec spec/ # or modify this command to fit your needs\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/test_results/**/*", "CIvars": []}]}]}]}
{"id": "69263214_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g firebase-tools", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "firebase emulators:start --only firestore,auth --project your-firebase-project-id &\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sleep 15 # Adjust the sleep time based on your emulator's startup time\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "firebase emulators:stop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69279710_0", "jobs": [{"name": "list-repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Fetching repositories...\"\ngh repo list --limit 100 --json name,sshUrl --jq '.[] | \"\\(.name): \\(.sshUrl)\"' > repo_urls.txt\necho \"List of repositories saved to repo_urls.txt\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The following repository URLs were found:\"\ncat repo_urls.txt\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69282816_3", "jobs": [{"name": "call-ci-workflow", "steps": []}]}
{"id": "69313079_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-msbuild", "version": "v1.1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake .. -G \"Visual Studio 16 2019\" -A ${{ matrix.architecture }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build . --config Release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69343777_1", "jobs": [{"name": "trigger_workflow", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "workflow", "value": "secondary-workflow.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "inputs", "value": {"example_input": "Value"}, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Secondary workflow triggered!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69344089_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install setuptools wheel\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "BRANCH_NAME=$(echo \"${GITHUB_REF}\" | awk -F'/' '{print $3}')\nVERSION=\"0.1.0-${BRANCH_NAME}.0\"\necho \"VERSION=${VERSION}\" >> $GITHUB_ENV\necho \"New version is ${VERSION}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sed -i \"s/version='[^']*'/version='${{ env.VERSION }}'/\" setup.py\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "python setup.py sdist bdist_wheel\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "pypa/legacy-pypi-publish", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "repository-url", "value": "https://test.pypi.org/legacy/", "CIvars": []}, {"type": "arg", "name": "username", "value": "__token__", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.TEST_PYPI_TOKEN }}", "CIvars": [{"name": "TEST_PYPI_TOKEN", "expression": "secrets.TEST_PYPI_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "pypa/legacy-pypi-publish", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "repository-url", "value": "https://upload.pypi.org/legacy/", "CIvars": []}, {"type": "arg", "name": "username", "value": "__token__", "CIvars": []}, {"type": "arg", "name": "password", "value": "${{ secrets.PYPI_TOKEN }}", "CIvars": [{"name": "PYPI_TOKEN", "expression": "secrets.PYPI_TOKEN", "type": "secret"}]}]}]}]}
{"id": "69350407_0", "jobs": [{"name": "selenium-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbin/rails db:create db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails server -b 0.0.0.0 -d -e test\nsleep 10 # Wait for the server to start\nbundle exec rspec # Replace with your test command if different\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69357027_0", "jobs": [{"name": "gcp-task", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "your-gcp-project-id", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud config set project your-gcp-project-id  # Replace with your GCP project ID\ngcloud storage buckets list  # Example command: lists all buckets in the project\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69399814_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "your-username/your-action-repo", "version": "v1.2.# The specific version/tag or branch", "shell": "bash", "with": [{"type": "arg", "name": "some-input", "value": "some value", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/some-action", "version": "^1.0.0", "shell": "bash", "with": []}]}]}
{"id": "69412847_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test || echo \"Tests failed with exit code $?\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ steps.run-tests.outcome }}\" == \"failure\" ]]; then\n  echo \"::error file=${{ github.workspace }}/test-results.txt::Tests have failed. Please check the results.\";\nelse\n  echo \"::notice file=${{ github.workspace }}/test-results.txt::All tests passed.\";\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "STATUS=$(echo \"${{ steps.run-tests.outcome }}\")\nif [ \"$STATUS\" == \"failure\" ]; then\n  MESSAGE=\"Custom Error: Tests did not pass. Please review the logs for details.\"\n  echo \"::error::${MESSAGE}\"\n  exit 1 # Exit with a failure status\nelse\n  MESSAGE=\"Custom Notice: Build completed successfully.\"\n  echo \"::notice::${MESSAGE}\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.custom-error.outcome }}\" == \"success\" ]; then\n  echo \"Deploying application...\"\n  # Your deployment commands here\nelse\n  echo \"Skipping deployment due to previous errors.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69415433_0", "jobs": [{"name": "rubocop", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69417713_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4 --retry 3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create\nbin/rails db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69440446_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dart-lang/setup-dart", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "sdk", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dart pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dart pub publish --force --server https://pub.dev --token $PUB_DEV_TOKEN\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69446036_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "triagebot/issue-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "issue_number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thanks for opening this pull request! \ud83c\udf89\nWe will review it soon! Please ensure that your PR follows the contribution guidelines.\n", "CIvars": []}]}]}]}
{"id": "69446229_0", "jobs": [{"name": "restrict-comments", "steps": [{"type": "shell_cmd", "cmd": "# Get the user who posted the comment\nCOMMENT_USER=\"${{ github.event.comment.user.login }}\"\n# Define users who are restricted from commenting\nRESTRICTED_USERS=(\"user1\" \"user2\" \"user3\")  # Add any usernames you want to restrict\n\n# Check if the user is restricted\nif [[ \" ${RESTRICTED_USERS[@]} \" =~ \" ${COMMENT_USER} \" ]]; then\n  echo \"The comment from ${COMMENT_USER} is restricted.\"\n  echo \"::set-output name=restricted::true\"\nelse\n  echo \"The comment from ${COMMENT_USER} is allowed.\"\n  echo \"::set-output name=restricted::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "DELETE /repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "event.comment.id", "expression": "github.event.comment.id", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.ACCESS_TOKEN }}", "CIvars": [{"name": "ACCESS_TOKEN", "expression": "secrets.ACCESS_TOKEN", "type": "secret"}]}]}]}]}
{"id": "69449197_0", "jobs": [{"name": "R-CMD-check", "steps": []}]}
{"id": "69469079_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "your-username/your-action-repo", "version": "branch-or-tag", "shell": "bash", "with": [{"type": "arg", "name": "input_key", "value": "input_value", "CIvars": []}]}]}]}
{"id": "69469285_1", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "4.2.2", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "folder", "value": "build", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GH_TOKEN }}", "CIvars": [{"name": "GH_TOKEN", "expression": "secrets.GH_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "npm run clean", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69500491_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "69526809_0", "jobs": [{"name": "setup_ruby_env", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"MY_RUBY_VAR=some_value\" >> $GITHUB_ENV\necho \"ANOTHER_VAR=another_value\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"MY_RUBY_VAR: $MY_RUBY_VAR\"\necho \"ANOTHER_VAR: $ANOTHER_VAR\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ruby -e \"puts ENV['MY_RUBY_VAR']\"\nruby -e \"puts ENV['ANOTHER_VAR']\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69527338_0", "jobs": [{"name": "terraform", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y wget unzip\nwget https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip\nunzip terraform_1.3.6_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nterraform --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "terraform init", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "terraform validate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "terraform plan -out=tfplan", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "terraform apply -auto-approve tfplan", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69529042_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/Library/Developer/Xcode/DerivedData\n~/Library/Caches/CocoaPods\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-build-${{ hashFiles('**/*.pbxproj', '**/*.xcworkspace', '**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-build-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f Podfile ]; then\n  pod install --repo-update\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -configuration Release build CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' test CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69532525_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "69534382_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "file", "value": "./Dockerfile", "CIvars": []}, {"type": "arg", "name": "image", "value": "python-tests:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "docker/run-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "image", "value": "python-tests:latest", "CIvars": []}, {"type": "arg", "name": "options", "value": "--rm", "CIvars": []}]}]}]}
{"id": "69540563_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "theqtcompany/setup-qt", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "components", "value": "qtbase, qbs", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y qbs\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nqbs build --jobs 4 # Adjust the number of jobs as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nqbs run --tests # Adjust the command as per your testing framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69584393_1", "jobs": [{"name": "call-common-ci", "steps": []}]}
{"id": "69596278_0", "jobs": [{"name": "check-html", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install html-proofer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "htmlproofer ./path/to/your/html/files --check-html --http-status-ignore 404\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69598856_1", "jobs": [{"name": "call-ci", "steps": []}]}
{"id": "69619675_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('devtools')\ndevtools::install_deps(dependencies = TRUE)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"devtools::build()\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"devtools::check()\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add this step if you want to publish the package after building\n# R -e \"devtools::release()\"\necho \"Build completed successfully.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69624328_0", "jobs": [{"name": "cypress", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "cypress-io/github-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "start", "value": "npm start", "CIvars": []}, {"type": "arg", "name": "wait-on", "value": "http://localhost:3000", "CIvars": []}, {"type": "arg", "name": "wait-on-timeout", "value": 60, "CIvars": []}, {"type": "arg", "name": "config", "value": "video=false", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "cypress/videos\ncypress/screenshots\n", "CIvars": []}]}]}]}
{"id": "69651327_0", "jobs": [{"name": "rename-fork", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set the new name for the fork\nNEW_NAME=\"new-fork-name\"  # Replace with your desired name\n\n# Rename the repository using GitHub CLI\ngh repo rename ${{ github.repository }} --new-name \"$NEW_NAME\"\necho \"Repository renamed to $NEW_NAME\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69694111_0", "jobs": [{"name": "send-message", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "data", "value": "{\"text\": \"Hello world! A new commit has been pushed to the private repo.\"}", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{\"Content-Type\": \"application/json\"}", "CIvars": []}]}]}]}
{"id": "69740308_2", "jobs": [{"name": "run-tests", "steps": []}]}
{"id": "69768540_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Change to your installation step if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Change to your build step if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "awslabs/aws-codedeploy-github-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "application-name", "value": "YourApplicationName", "CIvars": []}, {"type": "arg", "name": "deployment-group", "value": "YourDeploymentGroupName", "CIvars": []}, {"type": "arg", "name": "region", "value": "YourAWSRegion", "CIvars": []}, {"type": "arg", "name": "revision-location", "value": "/path/to/your/revision.zip", "CIvars": []}, {"type": "arg", "name": "zip-file", "value": "./myapp.zip", "CIvars": []}]}]}]}
{"id": "69787722_0", "jobs": [{"name": "build-docc", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Ensure swift package is available\nswift package resolve\n\n# Build the documentation using docc\nxcodebuild -scheme YourSchemeName -destination 'platform=iOS Simulator,OS=latest,name=iPhone 14' \\\nbuild-docs -destination 'platform=macOS'\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "documentation", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/generated/documentation", "CIvars": []}]}]}]}
{"id": "69857794_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt # Assuming you have a requirements.txt file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest # Running tests; replace with your test command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "my-docker-image:latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "slack-webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}]}]}]}
{"id": "69870994_0", "jobs": [{"name": "rubocop", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install rubocop          # Install RuboCop\n# If you're using a Gemfile:\n# bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rubocop\n# If you're using a Gemfile:\n# bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69880096_0", "jobs": [{"name": "restart-pipeline-run", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBECONFIG }}\" > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Get the pipeline run name from the last run or your specific PipelineRun name\nif [ -z \"${PIPELINE_RUN_NAME}\" ]; then\n  echo \"Fetching the name of the last PipelineRun...\"\n  PIPELINE_RUN_NAME=$(kubectl get pipelineruns -n $NAMESPACE --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')\n  echo \"Last PipelineRun name: $PIPELINE_RUN_NAME\"\nfi\n\necho \"Restarting PipelineRun: $PIPELINE_RUN_NAME\"\n\n# Get the PipelineRun's definition and modify if needed\nkubectl get pipelinerun $PIPELINE_RUN_NAME -n $NAMESPACE -o yaml | \\\nsed \"s/creationTimestamp:.*//g\" | \\\nsed \"s/resourceVersion:.*//g\" | \\\nsed \"s/selfLink:.*//g\" | \\\nsed \"s/uid:.*//g\" | \\\nkubectl apply -n $NAMESPACE -f -\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "6990604_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, curl", "CIvars": []}, {"type": "arg", "name": "ini_values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\n# Set up your database and other required settings for Magento\n# The following is a basic example; replace with your setup:\necho \"DB_HOST=localhost\" >> .env\necho \"DB_NAME=magento\" >> .env\necho \"DB_USER=root\" >> .env\necho \"DB_PASSWORD=password\" >> .env\nphp bin/magento setup:install --base-url=http://localhost/ \\\n  --db-host=localhost --db-name=magento --db-user=root --db-password=password \\\n  --admin-firstname=Admin --admin-lastname=Admin \\\n  --admin-email=admin@example.com --admin-user=admin --admin-password=123123q \\\n  --language=en_US --currency=USD --timezone=UTC --use-rewrites=1\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml --testsuite Unit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml --testsuite Integration\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69912570_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip, curl, openssl, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan config:cache\nphp artisan route:cache\nphp artisan view:cache\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/shared/hosting/folder", "CIvars": []}, {"type": "arg", "name": "git-ftp-args", "value": "--insecure", "CIvars": []}]}]}]}
{"id": "69914147_0", "jobs": [{"name": "update_quality_profiles", "steps": [{"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Update the quality profile for PHP with the SonarQube API\ncurl -X POST \"$SONARQUBE_URL/api/qualityprofiles/add\" \\\n-u \"$SONARQUBE_TOKEN:\" \\\n-d \"qualityProfile=YourQualityProfile\" \\\n-d \"language=php\" \\\n-d \"projectKey=your_project_key\"\n\n# Additional commands can be added here to customize the profile, e.g., adding rules\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69917361_0", "jobs": [{"name": "e2e-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl rollout status deployment/your-deployment-name -n your-namespace\n# Optionally wait for a specific pod to be ready\nkubectl wait --for=condition=available --timeout=600s deployment/your-deployment-name -n your-namespace\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install necessary dependencies (if using a script or framework like Cypress or Playwright)\nnpm install\n# Run your E2E tests\nnpm run test:e2e # or replace with your actual command to run E2E tests\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "69931124_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying BI reports to production...\"\n# Replace the command below with your actual deployment command\n./deploy-script.sh  # Your deployment script or command\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sends notification email/message on success or failure of the deployment", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "recipient", "value": "you@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "BI Report Deployment Successful", "CIvars": []}, {"type": "arg", "name": "message", "value": "The BI reports have been successfully deployed to production.", "CIvars": []}]}]}, {"name": "notify", "steps": [{"type": "gh_action", "cmd": "", "name": "sends notification email/message on success or failure of the deployment", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "recipient", "value": "you@example.com", "CIvars": []}, {"type": "arg", "name": "subject", "value": "BI Report Deployment Failed", "CIvars": []}, {"type": "arg", "name": "message", "value": "There was an error deploying the BI reports. Please check the logs.", "CIvars": []}]}]}]}
{"id": "69967043_0", "jobs": [{"name": "render-rmarkdown", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages(\"rmarkdown\")\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R -e \"rmarkdown::render('your_document.Rmd')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "RMarkdown-Report", "CIvars": []}, {"type": "arg", "name": "path", "value": "your_document.html", "CIvars": []}]}]}]}
{"id": "69989987_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "5.3.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.bazel/cache\n/tmp/bazel-*\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-bazel-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-bazel-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "bazel build //...", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.bazel/cache\n/tmp/bazel-*\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-bazel-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}]}
{"id": "70012126_0", "jobs": [{"name": "ssh-to-gce", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCE_SA_KEY }}", "CIvars": [{"name": "GCE_SA_KEY", "expression": "secrets.GCE_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "YOUR_GCP_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud compute instances describe YOUR_INSTANCE_NAME \\\n  --zone YOUR_INSTANCE_ZONE --format='get(networkInterfaces[0].accessConfigs[0].natIP)' > gce-ip.txt\necho \"::set-output name=ip::$(cat gce-ip.txt)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create an SSH key if you do not already have one\nssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa_gce -C \"github-actions\" -N \"\"\n\n# Add the public key to the VM's metadata\ngcloud compute instances add-metadata YOUR_INSTANCE_NAME \\\n  --zone YOUR_INSTANCE_ZONE \\\n  --metadata \"ssh-keys=github-actions:${{ secrets.GCE_SSH_PUBLIC_KEY }}\"\n\necho \"GCE_HOST=${{ steps.get-ip.outputs.ip }}\" >> $GITHUB_ENV\necho \"GCE_USER=YOUR_SSH_USERNAME\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "chmod 600 ~/.ssh/id_rsa_gce\nssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_gce $GCE_USER@$GCE_HOST \"YOUR_COMMAND_HERE\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70018581_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g firebase-tools", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "firebaseextended/action-hosting-deploy", "version": "v0.2.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "projectId", "value": "${{ secrets.FIREBASE_PROJECT_ID }}", "CIvars": [{"name": "FIREBASE_PROJECT_ID", "expression": "secrets.FIREBASE_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "channelId", "value": "live", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "70037313_3", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build/web", "CIvars": []}]}]}]}
{"id": "70038071_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phpunit # Run your tests or any command that utilizes the secrets\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Your deployment command here\necho \"Deploying code...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70100839_0", "jobs": [{"name": "sonarcloud", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.sonar/cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-sonar-${{ hashFiles('**/*.jar', '**/*.gradle', '**/pom.xml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-sonar-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "sonar-scanner \\\n  -Dsonar.projectKey=<YOUR_PROJECT_KEY> \\\n  -Dsonar.organization=<YOUR_ORG> \\\n  -Dsonar.host.url=https://sonarcloud.io \\\n  -Dsonar.login=$SONAR_TOKEN \\\n  -Dsonar.sources=.  # Specify the source files location if needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "-Dsonar.pullrequest.key=$GITHUB_REF -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}\n", "CIvars": [{"name": "head_ref", "expression": "github.head_ref", "type": "context"}, {"name": "base_ref", "expression": "github.base_ref", "type": "context"}, {"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}]}]}
{"id": "70101736_0", "jobs": [{"name": "get-pr-number", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"sha=$(git rev-parse HEAD)\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pr_number=$(gh pr list --state open --base main --json number,headRefOid --limit 100 | jq -r --arg sha \"$sha\" '.[] | select(.headRefOid == $sha) | .number') # Adjust base branch if necessary\nif [ -z \"$pr_number\" ]; then\n    echo \"No pull request found for this commit.\"\n    echo \"pr_number=none\" >> $GITHUB_ENV\nelse\n    echo \"Pull request number: $pr_number\"\n    echo \"pr_number=$pr_number\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"$pr_number\" == \"none\" ]; then\n  echo \"No associated PR number found.\"\nelse\n  echo \"Associated PR number: $pr_number\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70121372_0", "jobs": [{"name": "modify-config", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Updating config.yaml with new values\"\n# Example modification: Suppose we want to replace some placeholder values\nsed -i 's/placeholder_value/new_value/' config.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.name \"github-actions\"\ngit config --local user.email \"github-actions@github.com\"\ngit add config.yaml\ngit commit -m \"Update configuration values\"\ngit push\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cat config.yaml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70123655_2", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install # If you're using Yarn for frontend assets\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github ci/config/database.yml\nrails db:create RAILS_ENV=test\nrails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if grep -q \"Bullet\" log/test.log; then\n  echo \"Bullet warnings found:\"\n  grep \"Bullet\" log/test.log\n  exit 1\nelse\n  echo \"No Bullet warnings.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70135622_0", "jobs": [{"name": "move-issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /projects/columns/{column_id}/cards", "CIvars": []}, {"type": "arg", "name": "column_id", "value": "${{ secrets.PROJECT_COLUMN_ID }}", "CIvars": [{"name": "PROJECT_COLUMN_ID", "expression": "secrets.PROJECT_COLUMN_ID", "type": "secret"}]}, {"type": "arg", "name": "content_id", "value": "${{ github.event.issue.id }}", "CIvars": [{"name": "event.issue.id", "expression": "github.event.issue.id", "type": "context"}]}, {"type": "arg", "name": "content_type", "value": "Issue", "CIvars": []}]}]}]}
{"id": "70154663_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v0.2.2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud run deploy YOUR_SERVICE_NAME \\\n  --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_IMAGE_NAME }} \\\n  --platform managed \\\n  --region YOUR_REGION \\\n  --set-env YOUR_ENV_VAR_NAME1=value1, YOUR_ENV_VAR_NAME2=value2 \\\n  --allow-unauthenticated\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_IMAGE_NAME }} --limit=100 --format='get(digest)' | tail -n +2 | xargs -n 1 gcloud container images delete --quiet gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_IMAGE_NAME }}@\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7016307_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  brew install cocoapods # Install CocoaPods if it\u2019s not already available\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=15.0' build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12,OS=15.0'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70170790_0", "jobs": [{"name": "update-service-name", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "imranmd/kustomize-action", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Extract the current service name from deployment.yaml\nSERVICE_NAME=$(yq eval '.metadata.name' deployment.yaml)\necho \"Current service name: $SERVICE_NAME\"\necho \"service_name=$SERVICE_NAME\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "NEW_SERVICE_NAME=\"new-service-name\"  # Set your new service name here\nyq eval -i '.metadata.name = strenv(NEW_SERVICE_NAME)' deployment.yaml\necho \"Updated service name to: $NEW_SERVICE_NAME\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "NEW_SERVICE_NAME=$(cat $GITHUB_ENV | grep service_name | cut -d '=' -f2)\nyq eval -i '.resources |= map(if . == \"service.yaml\" then \"service.yaml\" else . end)' kustomization.yaml  # Ensure the service is included\nyq eval -i '.patchesStrategicMerge += {\"op\": \"replace\", \"path\": \"/metadata/name\", \"value\": strenv(NEW_SERVICE_NAME), \"from\": {\"service_name\": strenv(NEW_SERVICE_NAME)}}' kustomization.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add deployment.yaml kustomization.yaml\ngit commit -m \"Update service name to ${NEW_SERVICE_NAME}\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70182907_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-dockerhub-username/your-image-name:${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cluster", "value": "${{ secrets.AZURE_AKS_NAME }}", "CIvars": [{"name": "AZURE_AKS_NAME", "expression": "secrets.AZURE_AKS_NAME", "type": "secret"}]}, {"type": "arg", "name": "resource-group-name", "value": "${{ secrets.AZURE_RESOURCE_GROUP }}", "CIvars": [{"name": "AZURE_RESOURCE_GROUP", "expression": "secrets.AZURE_RESOURCE_GROUP", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "helm upgrade --install your-release-name ./path/to/your/chart \\\n  --set image.tag=${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get pods\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70197423_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecr-login", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Build Docker images for multiple tasks\ndocker build -t $REPOSITORY_URI:latest .\ndocker tag $REPOSITORY_URI:latest $REPOSITORY_URI:${IMAGE_TAG}\ndocker push $REPOSITORY_URI:latest\ndocker push $REPOSITORY_URI:${IMAGE_TAG}\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/amazon-ecs-deploy-task-definition", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "task-definition", "value": "${{ secrets.ECS_TASK_DEFINITION }}", "CIvars": [{"name": "ECS_TASK_DEFINITION", "expression": "secrets.ECS_TASK_DEFINITION", "type": "secret"}]}, {"type": "arg", "name": "service", "value": "${{ secrets.ECS_SERVICE_NAME }}", "CIvars": [{"name": "ECS_SERVICE_NAME", "expression": "secrets.ECS_SERVICE_NAME", "type": "secret"}]}, {"type": "arg", "name": "cluster", "value": "${{ secrets.ECS_CLUSTER_NAME }}", "CIvars": [{"name": "ECS_CLUSTER_NAME", "expression": "secrets.ECS_CLUSTER_NAME", "type": "secret"}]}, {"type": "arg", "name": "image", "value": "${{ secrets.ECR_REPO_URI }}:${{ github.sha }}", "CIvars": [{"name": "ECR_REPO_URI", "expression": "secrets.ECR_REPO_URI", "type": "secret"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "region", "value": "${{ secrets.AWS_REGION }}", "CIvars": [{"name": "AWS_REGION", "expression": "secrets.AWS_REGION", "type": "secret"}]}]}]}]}
{"id": "70215933_1", "jobs": [{"name": "use-reusable-job", "steps": []}, {"name": "another-job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"This is another job running alongside the reusable job.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70221020_2", "jobs": [{"name": "test-node-16", "steps": []}, {"name": "test-node-18", "steps": []}]}
{"id": "70226456_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "my-docker-repo/my-app:${{ github.sha }}\nmy-docker-repo/my-app:latest\n", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "v3.7.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set the FQIN with the latest image tag\nIMAGE_TAG=${{ github.sha }}\nHELM_IMAGE_NAME=\"my-docker-repo/my-app:${IMAGE_TAG}\"\n\n# Update values in the helm chart\nhelm upgrade --install my-release path/to/your/chart \\\n  --set image.repository=my-docker-repo/my-app \\\n  --set image.tag=${IMAGE_TAG} \\\n  --set image.pullPolicy=IfNotPresent\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70231685_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd server\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd frontend\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Waiting for services to start...\"\nsleep 20 # Adjust depending on your services\u2019 startup time\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd server\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd frontend\nnpm test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70240570_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "70263810_0", "jobs": [{"name": "shinytest", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "r-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages(c('shiny', 'shinytest', 'devtools'), repos = 'https://cloud.r-project.org/')\nif (file.exists('DESCRIPTION')) {\n  devtools::install_deps(dependencies = TRUE)\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "library(shinytest)\napp_dir <- \"path/to/your/testapp\"  # Update this to the correct path\ntest_results <- shinytest::runTests(app_dir, suffix = \"_suffix\")  # Replace \"_suffix\" with your desired suffix\nif (test_results$errors > 0) {\n  stop(\"Some tests failed!\")\n}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70273505_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -H \"Content-Type: application/json\" \\\n     -d '{\"directory\": \"build/web\", \"site_id\": \"'\"$NETLIFY_SITE_ID\"'\", \"auth_token\": \"'\"$NETLIFY_AUTH_TOKEN\"'\"}' \\\n     \"https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70274705_0", "jobs": [{"name": "get_workflow_run_history", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gh auth login --with-token <<<\"$GITHUB_TOKEN\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'your-workflow-file.yml' with your actual workflow file name\nWORKFLOW_FILE='your-workflow-file.yml'\necho \"Fetching run history for workflow: $WORKFLOW_FILE\"\ngh run list --workflow=\"$WORKFLOW_FILE\" --json=databaseId,name,status,conclusion,createdAt --jq='.[] | {id: .databaseId, name: .name, status: .status, conclusion: .conclusion, createdAt: .createdAt}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70293306_0", "jobs": [{"name": "apply-tekton", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBECONFIG }}\" > ${HOME}/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f path/to/your/tekton/resources\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70374251_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/setup-gh", "version": "v2.0.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh auth login --with-token <<< \"$GITHUB_TOKEN\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout -b feature-branch\n# Make any changes you want to include in your PR, e.g.:\necho \"Some changes\" >> changes.txt\ngit add changes.txt\ngit commit -m \"Add changes for PR\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin feature-branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gh pr create --base main --head feature-branch --title \"My Feature PR\" --body \"This PR implements my new feature.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70381850_0", "jobs": [{"name": "check-prs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "query", "value": "query {\n  repository(owner: \"YOUR_USERNAME\", name: \"YOUR_REPO_NAME\") {\n    pullRequests(first: 100, states: OPEN) {\n      nodes {\n        headRefName\n        baseRefName\n      }\n    }\n  }\n}\n", "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "for pr in $(echo '${{ steps.get-prs.outputs.data }}' | jq -r '.data.repository.pullRequests.nodes[] | @base64'); do\n  echo \"Processing PR: $(echo $pr | base64 --decode | jq -r .headRefName) on base branch: $(echo $pr | base64 --decode | jq -r .baseRefName)\"\n  \n  # Here you can add commands to run your checks or tests\n  # For example:\n  # git fetch origin $(echo $pr | base64 --decode | jq -r .headRefName):${{ env.PR_BRANCH }}\n  # run-your-tests-or-checks-command\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7038600_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-restore --collect:\"XPlat Code Coverage\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "**/coverage.cobertura.xml", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-name", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}, {"name": "feature-toggle", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Configuring feature toggles...\"\n# Replace with the actual command/scripts you need to set up your feature toggles\n# Example Manipulation of appsettings.json if needed\n\n# Here you can edit appsettings.json or use your FeatureToggle mechanism\nsed -i 's/\"FeatureX\": false/\"FeatureX\": true/' appsettings.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70395443_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "JamesIArmes/github-pages-deploy-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "folder", "value": "dist", "CIvars": []}]}]}]}
{"id": "70396978_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test --dart-define=MY_ENV_VARIABLE=${{ secrets.MY_ENV_VARIABLE }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release --dart-define=MY_ENV_VARIABLE=${{ secrets.MY_ENV_VARIABLE }}", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk", "CIvars": []}]}]}]}
{"id": "70411844_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "denoland/setup-deno", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "deno-version", "value": "v1.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "deno test --unstable --allow-all --json > test_results.json || echo \"Tests failed\" \ndeno run --allow-read --allow-write https://deno.land/x/junit@1.1.3/convert_json_to_junit.ts test_results.json > junit.xml || echo \"Failed to generate JUnit XML\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "junit-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "junit.xml", "CIvars": []}]}]}]}
{"id": "70433865_0", "jobs": [{"name": "find-repos", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const keyword = 'YOUR_SEARCH_KEYWORD'; // Replace with your search keyword\nconst response = await github.rest.search.repos({\n  q: keyword,\n  sort: 'stars',\n  order: 'desc',\n  per_page: 5, // Change this to control the number of results returned\n});\n\nconst repos = response.data.items.map(repo => {\n  return `- [${repo.full_name}](${repo.html_url}) - \u2b50 ${repo.stargazers_count}`;\n});\n\nconst resultMessage = `\n## Repositories found for keyword: \"${keyword}\"\n${repos.join('\\n')}\n`;\n\n// Posting the result as a comment on the pull request or issue if it exists\nif (context.payload.issue) {\n  await github.rest.issues.createComment({\n    ...context.repo,\n    issue_number: context.payload.issue.number,\n    body: resultMessage,\n  });\n} else {\n  console.log(resultMessage);\n}\n", "CIvars": []}]}]}]}
{"id": "70439855_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run start &   # Start your app in the background\nnpx wait-on http://localhost:3000  # Wait for the app to be ready\nnpx cypress run  # Run Cypress tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "FirebaseExtended/action-hosting-deploy", "version": "v0", "shell": "bash", "with": [{"type": "arg", "name": "repoToken", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "channelId", "value": "live", "CIvars": []}, {"type": "arg", "name": "projectId", "value": "your-firebase-project-id", "CIvars": []}]}]}]}
{"id": "70450908_0", "jobs": [{"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "echo \"Running scheduled job...\"\n# Here goes your main script. For this example, we'll just write to a file.\necho \"Scheduled job executed at $(date)\" >> job.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.gmail.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.EMAIL_PASSWORD }}", "CIvars": [{"name": "EMAIL_PASSWORD", "expression": "secrets.EMAIL_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Scheduled Job Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "The scheduled job has been completed successfully.\nLogs:\n```\n$(cat job.log)\n```\n", "CIvars": []}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "${{ secrets.EMAIL_USERNAME }}", "CIvars": [{"name": "EMAIL_USERNAME", "expression": "secrets.EMAIL_USERNAME", "type": "secret"}]}]}]}]}
{"id": "70470970_0", "jobs": [{"name": "laravel", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, sqlite3", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-scripts --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env\nphp artisan key:generate\nphp artisan config:cache\necho \"DB_CONNECTION=sqlite\" >> .env\necho \"DB_DATABASE=/tmp/test.db\" >> .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan db:seed", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70485789_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sSL https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml | kubectl apply -n argocd -f -\nkubectl wait --for=condition=available --timeout=60s deployment argocd-server -n argocd\n# You might want to change this based on your deployment strategy.\nsudo curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux_amd64 -o /usr/local/bin/argocd\nsudo chmod +x /usr/local/bin/argocd\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argocd app create my-app --repo https://github.com/your-repo.git --path path/to/manifests --dest-server https://kubernetes.default.svc --dest-namespace default --sync-policy automated --timeout 300\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argocd app wait my-app --timeout 600\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70494868_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "tools", "value": "composer", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70498560_0", "jobs": [{"name": "check-branch-lock", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Set the branch you want to lock\nLOCKED_BRANCH=\"restricted-branch-name\"\n\n# Get the source branch of the PR\nSOURCE_BRANCH=\"${{ github.head_ref }}\"\n\nif [[ \"$SOURCE_BRANCH\" == \"$LOCKED_BRANCH\" ]]; then\n  echo \"The source branch '${LOCKED_BRANCH}' is locked from merges.\"\n  echo \"::set-output name=locked::true\"\nelse\n  echo \"The source branch '${SOURCE_BRANCH}' is allowed.\"\n  echo \"::set-output name=locked::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "script", "value": "const prNumber = context.payload.pull_request.number;\nconst commentBody = `\u274c The source branch '${{ github.head_ref }}' is locked from merging. Please use a different branch.`;\nawait github.rest.issues.createComment({\n  ...context.repo,\n  issue_number: prNumber,\n  body: commentBody,\n});\n", "CIvars": [{"name": "head_ref", "expression": "github.head_ref", "type": "context"}]}]}]}]}
{"id": "70499794_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir -p my_folder\necho \"This is a test file\" > my_folder/test_file.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "0.5.0", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --follow-symlinks --delete", "CIvars": []}]}]}]}
{"id": "70546811_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "nwtgck/actions-netlify", "version": "v1.2.2", "shell": "bash", "with": [{"type": "arg", "name": "publish-dir", "value": "./build", "CIvars": []}, {"type": "arg", "name": "production-deploy", "value": true, "CIvars": []}, {"type": "arg", "name": "github-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "deploy-id", "value": "${{ secrets.NETLIFY_DEPLOY_ID }}", "CIvars": [{"name": "NETLIFY_DEPLOY_ID", "expression": "secrets.NETLIFY_DEPLOY_ID", "type": "secret"}]}, {"type": "arg", "name": "netlify-access-token", "value": "${{ secrets.NETLIFY_ACCESS_TOKEN }}", "CIvars": [{"name": "NETLIFY_ACCESS_TOKEN", "expression": "secrets.NETLIFY_ACCESS_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "site-id", "value": "${{ secrets.NETLIFY_SITE_ID }}", "CIvars": [{"name": "NETLIFY_SITE_ID", "expression": "secrets.NETLIFY_SITE_ID", "type": "secret"}]}]}]}]}
{"id": "70570733_0", "jobs": [{"name": "python-coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pip install pytest pytest-cov\npytest --cov=my_package tests/  # Replace 'my_package' with your package name\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "node-coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm install --save-dev jest\nnpx jest --coverage\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "ruby-coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --coverage\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70590449_0", "jobs": [{"name": "migrate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ramitsurana/setup-mariadb", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "mariadb-version", "value": "10.5", "CIvars": []}, {"type": "arg", "name": "username", "value": "root", "CIvars": []}, {"type": "arg", "name": "password", "value": "root_password", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "wget https://flywaydb.org/download/community/flyway-commandline-7.10.0-linux-x64.tar.gz\ntar -xzf flyway-commandline-7.10.0-linux-x64.tar.gz\nsudo mv flyway-7.10.0 /usr/local/flyway\necho 'export PATH=$PATH:/usr/local/flyway' >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cat <<EOL > /usr/local/flyway/conf/flyway.conf\nflyway.url=jdbc:mariadb://localhost:3306/your_db_name  # Replace with your DB name\nflyway.user=root\nflyway.password=root_password  # Replace with your actual DB password\nEOL\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flyway migrate\n# Optionally, you can run a command to generate the migration script based on your code changes.\n# For example:\n# flyway info\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flyway validate\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70596112_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"bookdown\", \"tidyverse\"))'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e 'rmarkdown::render(\"your_file.Rmd\")' # Change 'your_file.Rmd' to the name of your Rmd file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mv your_file.html index.html # Change according to output if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": ".", "CIvars": []}]}]}]}
{"id": "70597740_0", "jobs": [{"name": "download-assets", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "REPO=\"owner/repo\"  # Change this to your repository\nLATEST_RELEASE=$(gh release view --json tagName --jq .tagName -R $REPO)\necho \"Latest Release Tag: $LATEST_RELEASE\"\necho \"latest_release=${LATEST_RELEASE}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "REPO=\"owner/repo\"  # Change this to your repository\nASSET_LIST=$(gh release view ${{ env.latest_release }} --json assets --jq .assets[].name -R $REPO)\n\nif [ -z \"$ASSET_LIST\" ]; then\n  echo \"No assets found for the latest release.\"\n  echo \"assets_found=false\" >> $GITHUB_ENV\nelse\n  echo \"Assets found: $ASSET_LIST\"\n  echo \"$ASSET_LIST\" >> assets.txt\n  echo \"assets_found=true\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "REPO=\"owner/repo\"  # Change this to your repository\nwhile read -r asset; do\n  echo \"Downloading asset: $asset\"\n  gh release download ${{ env.latest_release }} --pattern \"$asset\" -R $REPO\ndone < assets.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"No assets to download for the latest release.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70619949_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install --no-dev --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php yii migrate --interactive=0\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${SSH_PRIVATE_KEY}\" > private_key\nchmod 600 private_key\nrsync -avz --delete --exclude='vendor/' --exclude='.git/' ./ ${SSH_USER}@${SSH_HOST}:/path/to/your/yii2-app/\n\n# Optional: Execute post-deploy commands (adjust as necessary)\nssh -o StrictHostKeyChecking=no -i private_key ${SSH_USER}@${SSH_HOST} << 'EOF'\n  cd /path/to/your/yii2-app/\n  php yii cache/flush-all\n  php yii serve --port=8080 # Example command, change as needed\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70623814_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -sSL https://get.rvm.io | bash -s stable --ruby\necho \"source $HOME/.rvm/scripts/rvm\" >> $BASH_ENV\nsource $BASH_ENV\nrvm use 2.7 --default\ngem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane your_lane_name # Replace with your actual lane name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70628889_0", "jobs": [{"name": "comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"COMMENT_BODY=This is a multi-line comment\\nIt has several lines.\\nHere is another line.\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "oktokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "request", "value": "POST /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments\n{\n  \"body\": \"${{ env.COMMENT_BODY }}\"\n}\n", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}, {"name": "COMMENT_BODY", "expression": "env.COMMENT_BODY", "type": "env"}]}]}]}]}
{"id": "70634734_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az deployment group create --resource-group ${{ secrets.RESOURCE_GROUP }} \\\n  --template-file path/to/your/template.json \\\n  --parameters path/to/your/parameters.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70646417_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.21.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az deployment group create \\\n  --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \\\n  --template-file path/to/your/template.json \\\n  --parameters path/to/your/parameters.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az keyvault set-policy --name ${{ secrets.KEY_VAULT_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \\\n  --object-id ${{ secrets.AZURE_OBJECT_ID }} --secret-permissions get list \\\n  --certificate-permissions get list \\\n  --storage-permissions get list\n  \n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70666214_1", "jobs": [{"name": "trigger_level_2", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "workflow", "value": "workflow_level_2.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}]}]}
{"id": "70666214_2", "jobs": [{"name": "trigger_level_3", "steps": [{"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "workflow", "value": "workflow_level_3.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}]}]}
{"id": "70667132_0", "jobs": [{"name": "approve", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GITHUB_TOKEN_USER }}\" | gh auth login --with-token\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "PR_NUMBER=${{ github.event.number }}\ngh pr review $PR_NUMBER --approval\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70668071_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production server...\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-send", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "message", "value": "Deployment to production successful!", "CIvars": []}]}]}]}
{"id": "70672715_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "${{ matrix.ruby-version }}", "CIvars": [{"name": "ruby-version", "expression": "matrix.ruby-version", "type": "matrix"}]}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Or any other test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70673363_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.5", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build appbundle --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo $SERVICE_ACCOUNT_JSON | base64 --decode > service-account.json\n./gradlew publishBundle --serviceAccountJson=service-account.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build ios --release --no-codesign", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70706487_0", "jobs": [{"name": "match", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane match development --app_identifier $APP_IDENTIFIER\nbundle exec fastlane match distribution --app_identifier $APP_IDENTIFIER\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane match development --app_identifier $APP_IDENTIFIER\nbundle exec fastlane match distribution --app_identifier $APP_IDENTIFIER\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70709394_0", "jobs": [{"name": "download_artifacts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "gh auth login --with-token <<< \"${{ secrets.GITHUB_TOKEN }}\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Set variables\nREPO=\"username/private-repo\" # Replace with your private repo\nARTIFACT_NAME=\"artifact-name\" # Replace with your desired artifact name\n\n# Get the latest artifact ID\nARTIFACT_ID=$(gh api repos/$REPO/actions/artifacts --jq '.artifacts[] | select(.name==\"'\"$ARTIFACT_NAME\"'\") | .id')\n\n# Download the artifact\nif [ -n \"$ARTIFACT_ID\" ]; then\n  gh api repos/$REPO/actions/artifacts/$ARTIFACT_ID/zip --output artifact.zip\nelse\n  echo \"No artifact found with the name: $ARTIFACT_NAME\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "unzip artifact.zip\necho \"Artifact downloaded and unzipped successfully.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70759594_0", "jobs": [{"name": "coverage", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir coverage\nflutter test --coverage\nmv coverage/lcov.info coverage/lcov.info\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f coverage/lcov.info ]; then\n  echo \"Generating coverage report...\"\n  genhtml coverage/lcov.info --output-directory coverage_report\nelse\n  echo \"No coverage report found!\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Uploading coverage report...\"\nbash <(curl -s https://codecov.io/bash) -f coverage/lcov.info\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage_report/", "CIvars": []}]}]}]}
{"id": "70781758_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "your-app-service-name", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "connection-strings", "value": "DefaultConnection=${{ secrets.CONNECTION_STRING }} # Replace with your connection string secret\n", "CIvars": [{"name": "CONNECTION_STRING", "expression": "secrets.CONNECTION_STRING", "type": "secret"}]}]}]}]}
{"id": "70815869_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "70838947_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish -c Release -o ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "rm -rf ./output", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70865615_1", "jobs": [{"name": "create_repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-pwsh", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "pwsh ./create-repo.ps1 -token $GITHUB_TOKEN -repoName ${{ github.event.inputs.repoName }}\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70867323_0", "jobs": [{"name": "performance-tests", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo gem install cocoapods # If you are using CocoaPods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -configuration Release build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourApp.xcworkspace -scheme YourApp -configuration Release -enableCodeCoverage YES TEST_AFTER_BUILD=YES | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "OUTPUT_FILE=\"PerformanceResults.plist\"\nBASELINE_FILE=\"PerformanceBaseline.plist\"\n# Use the xcodebuild command's output to set or validate the baselines\nif [ -f \"$OUTPUT_FILE\" ]; then\n  echo \"Setting performance test baselines...\"\n  cp \"$OUTPUT_FILE\" \"$BASELINE_FILE\"\nelse\n  echo \"Performance test results not found.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "performance-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "PerformanceResults.plist", "CIvars": []}]}]}]}
{"id": "70880099_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"sha=$(git rev-parse HEAD)\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "workflow", "value": "workflow-b.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "inputs", "value": "sha: ${{ env.sha }}\n", "CIvars": [{"name": "sha", "expression": "env.sha", "type": "env"}]}]}]}]}
{"id": "70893560_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "erlef/setup-beam", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "elixir-version", "value": "1.12.3", "CIvars": []}, {"type": "arg", "name": "otp-version", "value": "24.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mix deps.get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix compile", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70906546_0", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "TAG_NAME=${GITHUB_REF#refs/tags/}  # Extract tag name from ref\ngh release create \"$TAG_NAME\" --title \"Release $TAG_NAME\" --notes \"Release notes for version $TAG_NAME\" --generate-notes\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "TAG_NAME=${GITHUB_REF#refs/tags/}  # Extract tag name from ref\n# Assuming your assets are built and located in the `build/` directory\nfor file in build/*; do\n  gh release upload \"$TAG_NAME\" \"$file\" --clobber\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Release $TAG_NAME created and assets uploaded!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70907287_0", "jobs": [{"name": "clear-cache", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, pdo, pdo_mysql", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M, memory_limit=512M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console cache:clear --env=prod --no-debug", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70908132_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --prefer-dist --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan config:cache\nphp artisan route:cache\nphp artisan view:cache\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.0.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "port", "value": "${{ secrets.FTP_PORT }}", "CIvars": [{"name": "FTP_PORT", "expression": "secrets.FTP_PORT", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/public_html/", "CIvars": []}, {"type": "arg", "name": "git-ftp", "value": true, "CIvars": []}, {"type": "arg", "name": "dry-run", "value": false, "CIvars": []}]}]}]}
{"id": "70924438_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "wget https://apt.puppetlabs.com/puppet6-release-bionic.deb\nsudo dpkg -i puppet6-release-bionic.deb\nsudo apt-get update\nsudo apt-get install -y puppet-agent\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"/opt/puppetlabs/bin\" >> $GITHUB_PATH\necho \"$(ruby -e 'puts Gem.bindir')\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "puppet-lint .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec spec/\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Example deployment command\necho \"$DEPLOY_KEY\" > deploy_key\nchmod 600 deploy_key\nscp -i deploy_key -r ./my_module/ user@server:/path/to/deploy/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70929443_0", "jobs": [{"name": "comment_on_pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "title=\"${{ github.event.pull_request.title }}\"\n# Customize this logic to create your comment based on the title\nif [[ $title == *\"bug\"* ]]; then\n  echo \"This PR relates to a bug fix.\" >> comment.txt\nelif [[ $title == *\"feature\"* ]]; then\n  echo \"This PR introduces a new feature.\" >> comment.txt\nelse\n  echo \"Please ensure that the PR title is descriptive.\" >> comment.txt\nfi\n# Reading the comment from the generated file\ncomment=$(cat comment.txt)\necho \"::set-output name=comment::$comment\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "${{ steps.generate_comment.outputs.comment }}", "CIvars": [{"name": "generate_comment.outputs.comment", "expression": "steps.generate_comment.outputs.comment", "type": "steps"}]}]}]}]}
{"id": "70938782_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "${{ matrix.ruby-version }}", "CIvars": [{"name": "ruby-version", "expression": "matrix.ruby-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test\nbundle exec coveralls push coverage/.resultset.json || echo \"No coverage results\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "coveralls < coverage/.resultset.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70951899_0", "jobs": [{"name": "mirror", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "swiftwasm/setup-swift", "version": "v0.11", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.swiftpm\n~/.cache\n.build\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-swift-${{ hashFiles('**/Package.swift') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-swift-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "swift package resolve", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p mirror\npushd mirror\nfor package in $(swift package show-dependencies --format=json | jq -r '.dependencies[] | .url'); do\n  # Cloning the package repos into our mirror directory\n  git clone --mirror \"$package\"\ndone\npopd\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "tar -czf mirror-packages.tar.gz -C mirror .\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "mirror-packages", "CIvars": []}, {"type": "arg", "name": "path", "value": "mirror-packages.tar.gz", "CIvars": []}]}]}]}
{"id": "70958448_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force -Repository PSGallery -SkipPublisherCheck\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Connect to the Service Fabric Cluster\n$clusterConnection = Connect-ServiceFabricCluster -ConnectionEndpoint $env:SF_CLUSTER_URL -Credential (New-Object System.Management.Automation.PSCredential(\"username\", (ConvertTo-SecureString $env:SF_CREDENTIALS -AsPlainText -Force)))\n\n# Application package should be specified and deployed\nPublish-ServiceFabricApplication -ApplicationPathInImage $env:SF_PACKAGE_PATH -ApplicationName $env:SF_APP_NAME\n\n# Optionally, you can restart the service or perform health checks after deployment\n# Restart-ServiceFabricService -ServiceName \"$env:SF_APP_NAME/YourServiceName\"\n# Invoke-ServiceFabricGetServiceHealth -ServiceName \"$env:SF_APP_NAME/YourServiceName\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "70972588_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane gym --scheme YourAppScheme --export_method app-store", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This assumes you have a Fastlane lane for generating symbols\nbundle exec fastlane generate_symbols\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "./path/to/your/xcode/archives/*.xcarchive", "CIvars": []}]}]}]}
{"id": "70979239_1", "jobs": [{"name": "call-deploy", "steps": []}]}
{"id": "70979239_2", "jobs": [{"name": "call-deploy", "steps": []}]}
{"id": "70980759_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions-setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.21.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build && cd build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake ..  # Adjust if your CMakeLists.txt is not in the root\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\ncmake --build .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git diff HEAD^ HEAD -- path/to/CMakeLists.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git diff HEAD^ HEAD -- path/to/your/source/file.cpp\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unsplash/comment-on-pr", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "body", "value": "The project was successfully built and tests have run. \nPlease review changes made to `path/to/CMakeLists.txt` and `path/to/your/source/file.cpp`.\n", "CIvars": []}]}]}]}
{"id": "70991896_0", "jobs": [{"name": "fetch-data", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Powershell script to fetch data from GitHub API\n$baseUrl = \"https://api.github.com\"\n$path = \"/repos/${{ github.repo }}/issues\"\n$allResults = @()\n$page = 1\n$perPage = 100\n\ndo {\n    $uri = \"$baseUrl$path?per_page=$perPage&page=$page\"\n    $response = Invoke-RestMethod -Uri $uri -Headers @{Authorization = \"token $env:GITHUB_TOKEN\"; \"User-Agent\" = \"PowerShell\"}\n    if ($response.Count -eq 0) {\n        break  # Break if no more results\n    }\n    $allResults += $response\n    $page++\n} while ($true)\n\n# Output all results to console\n$allResults | ConvertTo-Json -Depth 10 | Out-File -FilePath \"./all_issues.json\"\nWrite-Host \"Fetched $($allResults.Count) issues.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71020182_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your-plugin-directory # Update this to your plugin's directory\nwget https://wordpress.org/wordpress-5.8.zip # Change this version as required\nunzip wordpress-5.8.zip\nmv wordpress/* ./\nrm -rf wordpress wordpress-5.8.zip\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php -S localhost:8080 -t .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..10}; do curl -s http://localhost:8080 && break || sleep 5; done\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST -d \"to=test@example.com&subject=Test&message=This is a test message\" http://localhost:8080/wp-admin/admin-ajax.php?action=send_test_email\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you would verify the email was sent.\n# Depending on how you handle this, you may call the SendGrid API to look for the test email.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kill $(jobs -p) # Kill background PHP server process\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71020471_2", "jobs": [{"name": "call-build", "steps": []}, {"name": "call-deploy", "steps": []}]}
{"id": "71032102_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Adjust according to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flake8 .  # Assuming you're using flake8 for linting in a Python project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest  # Assuming you're using pytest for testing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ $? -ne 0 ]; then\n  echo \"Tests failed. Please fix the issues before merging.\" >> $GITHUB_ENV\n  exit 1\nelse\n  echo \"All checks passed!\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-script", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const message = `All checks passed! :tada:\\n\\nPlease review the code.`;\nawait github.issues.createComment({\n  issue_number: context.payload.pull_request.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: message\n});\n", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-script", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const message = `Some checks failed. Please see the logs for details.`;\nawait github.issues.createComment({\n  issue_number: context.payload.pull_request.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: message\n});\n", "CIvars": []}]}]}]}
{"id": "71032268_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore YourAspNetProject.csproj", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourAspNetProject.csproj --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourAspNetProject.csproj --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build --prod", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAzureWebAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "YourAspNetProject/bin/Release/net7.0/publish", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/CLI", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azcliversion", "value": "latest", "CIvars": []}, {"type": "arg", "name": "inline", "value": "az storage blob upload-batch -s ClientApp/dist/ClientApp -d '$web' --account-name YourStorageAccountName  # Change to your Azure Storage account name\n", "CIvars": []}]}]}]}
{"id": "71042065_0", "jobs": [{"name": "notify", "steps": [{"type": "shell_cmd", "cmd": "echo \"ACTOR=${{ github.actor }}\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mikeal/send-email", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "from", "value": "<your-email@example.com>", "CIvars": []}, {"type": "arg", "name": "to", "value": "${{ env.ACTOR }}", "CIvars": [{"name": "ACTOR", "expression": "env.ACTOR", "type": "env"}]}, {"type": "arg", "name": "subject", "value": "GitHub Action Notification", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello ${{ env.ACTOR }},\n\nA new push has been made to the repository 'your-repo-name'.\n\nBest,\nYour GitHub Actions", "CIvars": [{"name": "ACTOR", "expression": "env.ACTOR", "type": "env"}]}]}]}]}
{"id": "71046096_5", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "71047802_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "71060675_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec --color --profile --format documentation --format RspecJunitFormatter --out test-results/rspec.xml --options spec/.rspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results/rspec.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle exec rake coverage\n# You can customize this if you have rdoc or another format you prefer.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71068152_0", "jobs": [{"name": "dependabot", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "dependabot/dependabot-core", "version": "v2.6.0", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "bundle install\nbundle exec dependabot update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -d \".dep\" ]; then\n  echo \"Dependencies are outdated!\"\n  exit 1\nelse\n  echo \"All dependencies are up to date.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71068476_0", "jobs": [{"name": "access-repo", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.GH_TOKEN }}", "CIvars": [{"name": "GH_TOKEN", "expression": "secrets.GH_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Install the GitHub CLI (only if not using the above step)\n# Here's an example command to list all issues in another repo\ngh repo view <owner>/<repo> --json issues --jq '.[].title'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71071562_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "<your-org>/<forked-repo>", "version": "<your-branch-or-tag>", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 1, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"This is a sample workflow!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71086285_0", "jobs": [{"name": "pylint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install pylint  # Install pylint; also you might want to install other dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pylint_output=$(pylint .)  # Run pylint on your codebase\necho \"$pylint_output\" > pylint_output.txt  # Save output to file\necho \"::set-output name=result::$pylint_output\"  # Set output as a variable for later use\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/github-action-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "## Pylint Results\n\\`\\`\\`plaintext\n${{ steps.pylint_step.outputs.result }}\n\\`\\`\\`\n", "CIvars": [{"name": "pylint_step.outputs.result", "expression": "steps.pylint_step.outputs.result", "type": "steps"}]}]}]}]}
{"id": "71093275_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build ios --release --no-codesign\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/ios/iphoneos/*.app", "CIvars": []}]}]}]}
{"id": "71094400_0", "jobs": [{"name": "create_review_app", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-cli-action", "version": "v2.3.1", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "APP_NAME=\"${{ github.event.pull_request.head.ref }}-review\"\nheroku create $APP_NAME --remote review --stack heroku-20 --region us\nheroku addons:create heroku-postgresql:hobby-dev --app $APP_NAME\necho \"Review app created: $APP_NAME\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "DATABASE_URL=$(heroku config:get DATABASE_URL --app $APP_NAME)\necho \"DATABASE_URL=${DATABASE_URL}\" >> $GITHUB_ENV\necho \"::set-output name=db_url::$DATABASE_URL\"\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "destroy_review_app", "steps": [{"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-cli-action", "version": "v2.3.1", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "APP_NAME=\"${{ github.event.pull_request.head.ref }}-review\"\nheroku apps:destroy --app $APP_NAME --confirm $APP_NAME\necho \"Review app destroyed: $APP_NAME\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71118955_1", "jobs": [{"name": "call-tests", "steps": []}]}
{"id": "71129210_0", "jobs": [{"name": "request-review", "steps": [{"type": "gh_action", "cmd": "", "name": "pullrequest-approval-action/request-review", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "team-name", "CIvars": []}]}]}, {"name": "check-approvals", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const pull_request_number = context.payload.pull_request.number;\nconst reviews = await github.pulls.listReviews({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  pull_number: pull_request_number,\n});\n\nconst approved = reviews.data.filter(review => review.state === 'APPROVED');\nif (approved.length === 0) {\n  throw new Error('No approvals yet. This PR cannot be merged.');\n} else {\n  console.log(`Approved by: ${approved.map(r => r.user.login).join(', ')}`);\n}\n", "CIvars": []}]}]}, {"name": "labeling", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const pull_request_number = context.payload.pull_request.number;\nconst labels = [\"ready-for-review\"];  // Change label as necessary\nawait github.issues.addLabels({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  issue_number: pull_request_number,\n  labels: labels,\n});\n", "CIvars": []}]}]}]}
{"id": "71147118_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [ -f \"Podfile\" ]; then\n  pod install\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -configuration Debug build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcrun simctl boot \"iPhone 14\" # Change to the desired simulator model\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sleep 10 # Adjust if needed to ensure that the simulator is ready\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace 'path/to/local/file.txt' with the file you want to add and its destination.\nxcrun simctl addmedia \"iPhone 14\" path/to/local/file.txt # addmedia could be used for images/videos\n\n# For regular files, we can use a different workaround as follows:\nxcrun simctl install \"iPhone 14\" path/to/local/app.app\n# Note: You may need to explore how to handle files depending on your app's requirements.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71160770_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# (Optional) Add commands to run your tests here\necho \"Add your test commands here if needed.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r my_flask_app.zip . -x \"*.git*\" \"*.github*\" \"*/__pycache__/*\"  # Exclude unnecessary files\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "my_flask_app.zip", "CIvars": []}]}]}]}
{"id": "71165376_2", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "71174459_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "goanpeca/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/conda", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-conda-${{ hashFiles('**/environment.yml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-conda-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "conda env create -f environment.yml\nconda activate your-env-name # replace with your environment name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda build . --output-folder conda-packages\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "conda-packages", "CIvars": []}, {"type": "arg", "name": "key", "value": "conda-package-${{ runner.os }}-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "conda-package-${{ runner.os }}-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "conda-package", "CIvars": []}, {"type": "arg", "name": "path", "value": "conda-packages/", "CIvars": []}]}]}]}
{"id": "71208276_0", "jobs": [{"name": "build", "steps": []}]}
{"id": "71233905_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --logger \"trx;LogFileName=test_results.trx\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dajobe/trx2junit", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "trxFiles", "value": "test_results.trx", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "junit-TestResult.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "**/*.dll\n**/*.pdb\ntest_results.trx\n", "CIvars": []}]}]}]}
{"id": "71239487_0", "jobs": [{"name": "build_and_test", "steps": []}, {"name": "build_and_test_python", "steps": []}, {"name": "build_and_test_ruby", "steps": []}]}
{"id": "71246950_0", "jobs": [{"name": "ruby", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor/ruby", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-bundles-${{ hashFiles('**/*.gemspec') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-bundles-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "${{ matrix.ruby-version }}", "CIvars": [{"name": "ruby-version", "expression": "matrix.ruby-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "cd ${{ matrix.service }}\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ${{ matrix.service }}\nbundle exec rspec  # or `bundle exec rake test`, depending on your test framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ${{ matrix.service }}\nbundle exec rake build # Customize this if you have a specific build task\n# Optionally push the gem to a gem server like Gemfury or RubyGems if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71251279_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, xml, curl, zip", "CIvars": []}, {"type": "arg", "name": "ini_values", "value": {"date.timezone": "UTC"}, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {30..0}; do\n  if mysql -h 127.0.0.1 -u homestead -psecret -e 'SELECT 1'; then\n    break\n  fi\n  echo 'MySQL is unavailable - sleeping'\n  sleep 1\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71276355_0", "jobs": [{"name": "comment-link", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v6", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const pullRequestComment = `\ud83d\udee0\ufe0f A new pull request has been created! You can view it [here](${context.payload.pull_request.html_url}).`;\nawait github.pulls.createReviewComment({\n  ...context.repo,\n  pull_number: context.payload.pull_request.number,\n  body: pullRequestComment,\n});\n", "CIvars": []}]}]}]}
{"id": "71277978_0", "jobs": [{"name": "install", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pod repo add private-repo https://github.com/USERNAME/private-cocoapod-repo.git\npod install --repo-update\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71297218_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "71307686_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, zip, gd", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "vendor", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-composer-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env && php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "samuelmeuli/action-envoyer", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "api_token", "value": "${{ secrets.ENVOYER_API_TOKEN }}", "CIvars": [{"name": "ENVOYER_API_TOKEN", "expression": "secrets.ENVOYER_API_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.ENVOYER_PROJECT_ID }}", "CIvars": [{"name": "ENVOYER_PROJECT_ID", "expression": "secrets.ENVOYER_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "server_id", "value": "${{ secrets.ENVOYER_SERVER_ID }}", "CIvars": [{"name": "ENVOYER_SERVER_ID", "expression": "secrets.ENVOYER_SERVER_ID", "type": "secret"}]}, {"type": "arg", "name": "description", "value": "Deploy from GitHub Actions", "CIvars": []}]}]}]}
{"id": "71319988_0", "jobs": [{"name": "check_ticket_and_update", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if [[ ! \"${{ github.event.pull_request.title }}\" =~ TICKET-[0-9]+ ]]; then\n  echo \"No ticket reference found in PR title.\"\n  exit 1\nfi\nTICKET_ID=\"${BASH_REMATCH[0]}\"\necho \"Ticket ID: $TICKET_ID\"\necho \"::set-output name=ticket_id::$TICKET_ID\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "stylize/monday-api", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "api_key", "value": "${{ secrets.MONDAY_API_KEY }}", "CIvars": [{"name": "MONDAY_API_KEY", "expression": "secrets.MONDAY_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "ticket_id", "value": "${{ steps.verify_ticket.outputs.ticket_id }}", "CIvars": [{"name": "verify_ticket.outputs.ticket_id", "expression": "steps.verify_ticket.outputs.ticket_id", "type": "steps"}]}, {"type": "arg", "name": "status", "value": "In Progress", "CIvars": []}]}]}]}
{"id": "71353932_0", "jobs": [{"name": "main_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "your-action/main-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "example_input", "value": "example_value", "CIvars": []}]}]}, {"name": "secondary_job", "steps": [{"type": "gh_action", "cmd": "", "name": "another-action/first-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "example_input", "value": "example_value", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "another-action/second-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "example_input", "value": "example_value", "CIvars": []}]}]}]}
{"id": "71354480_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "ref", "value": "${{ matrix.branch }}", "CIvars": [{"name": "branch", "expression": "matrix.branch", "type": "matrix"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd codebase-1\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd codebase-1\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd codebase-2\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd codebase-2\nbundle exec rake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd codebase-3\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd codebase-3\npytest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71362028_1", "jobs": [{"name": "label", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "github-actions/labeler", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "config", "value": ".github/labeler.yml", "CIvars": []}]}]}]}
{"id": "71394641_0", "jobs": [{"name": "retrieve-credentials", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.30.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assume you have some Azure function to fetch GitHub credentials\n# Replace this with your actual command or function call as required\necho \"Fetching GitHub credentials...\"\n# Placeholder command below, replace with the actual command you use to get credentials\necho \"::set-output name=github-token::$(az functionapp function show --name YourFunctionAppName --resource-group YourResourceGroup --query 'properties.invokeUrlTemplate' -o tsv)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Using GitHub Token\"\n# Here you can call any GitHub API with the token\ncurl -H \"Authorization: token $GITHUB_TOKEN\" https://api.github.com/user\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71431369_0", "jobs": [{"name": "review-comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/review-requests", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "pull-request", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "message", "value": "# Review Comment\nThis is an inline review comment on a specific line in the diff.\n```\nPlease check this part of the code for improvements.\n```\n", "CIvars": []}, {"type": "arg", "name": "body", "value": "Please refer to the comments in the diff view.\n", "CIvars": []}, {"type": "arg", "name": "comments", "value": "Here is a general comment for this pull request.\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gh pr review ${{ github.event.pull_request.number }} --comment \"Great job!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71432614_0", "jobs": [{"name": "get-branch-details", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace <branch-name> with the branch you want to get details of\nBRANCH_NAME=\"<branch-name>\"\necho \"Fetching details for branch: $BRANCH_NAME\"\n\n# Get branch details using the GitHub API\nBRANCH_INFO=$(gh api repos/${{ github.repository }}/branches/$BRANCH_NAME)\necho \"Branch Info: $BRANCH_INFO\"\n\n# Optionally parse and structure output\necho \"Branch Name: $(echo $BRANCH_INFO | jq -r .name)\"\necho \"Commit SHA: $(echo $BRANCH_INFO | jq -r .commit.sha)\"\necho \"Commit Message: $(echo $BRANCH_INFO | jq -r .commit.commit.message)\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Detailed branch information has been retrieved. Check the previous logs for details.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71444350_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --flavor development\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.codemagic.io/builds\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer ${{ secrets.CODMAGIC_API_TOKEN }}\" \\\n-d '{\n      \"app_id\": \"<YOUR_APP_ID>\",\n      \"workflow_id\": \"<YOUR_WORKFLOW_ID>\",\n      \"branch\": \"main\",\n      \"env\": {\n        \"FLAVOR\": \"development\"\n      }\n    }'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --flavor staging\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.codemagic.io/builds\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer ${{ secrets.CODMAGIC_API_TOKEN }}\" \\\n-d '{\n      \"app_id\": \"<YOUR_APP_ID>\",\n      \"workflow_id\": \"<YOUR_WORKFLOW_ID>\",\n      \"branch\": \"main\",\n      \"env\": {\n        \"FLAVOR\": \"staging\"\n      }\n    }'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --flavor production\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://api.codemagic.io/builds\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer ${{ secrets.CODMAGIC_API_TOKEN }}\" \\\n-d '{\n      \"app_id\": \"<YOUR_APP_ID>\",\n      \"workflow_id\": \"<YOUR_WORKFLOW_ID>\",\n      \"branch\": \"main\",\n      \"env\": {\n        \"FLAVOR\": \"production\"\n      }\n    }'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71479198_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, pcntl, pdo, pdo_pgsql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:database:create --if-not-exists\nphp bin/console doctrine:migrations:migrate --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console doctrine:schema:validate && php bin/phpunit", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php bin/console cache:clear", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71485841_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.10.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test --timeout none", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71486958_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Hosting-Github-Action", "version": "v1.3.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "channelId", "value": "live", "CIvars": []}, {"type": "arg", "name": "projectId", "value": "your-firebase-project-id", "CIvars": []}, {"type": "arg", "name": "folder", "value": "build", "CIvars": []}]}]}]}
{"id": "71498125_0", "jobs": [{"name": "migrate-and-seed", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, zip, gd", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "for i in {1..30}; do \n  if mysql -h127.0.0.1 -uroot -proot -e \"SELECT 1;\" &> /dev/null; then \n    break; \n  fi; \n  echo \"Waiting for MySQL to be ready...\"; \n  sleep 2; \ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env\nsed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' .env\nsed -i 's/DB_PORT=3306/DB_PORT=3306/' .env\nsed -i 's/DB_DATABASE=laravel/DB_DATABASE=your_database_name/' .env\nsed -i 's/DB_USERNAME=root/DB_USERNAME=user/' .env\nsed -i 's/DB_PASSWORD=/DB_PASSWORD=password/' .env\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan db:seed --force", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71508559_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "destination_dir", "value": ".", "CIvars": []}]}]}]}
{"id": "71524542_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "71529879_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/static-web-apps-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_static_web_apps_api_token", "value": "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}", "CIvars": [{"name": "AZURE_STATIC_WEB_APPS_API_TOKEN", "expression": "secrets.AZURE_STATIC_WEB_APPS_API_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "action", "value": "upload", "CIvars": []}, {"type": "arg", "name": "app_location", "value": "/", "CIvars": []}, {"type": "arg", "name": "api_location", "value": "", "CIvars": []}, {"type": "arg", "name": "output_location", "value": "build", "CIvars": []}, {"type": "arg", "name": "item_location", "value": "path/to/your/subfolder", "CIvars": []}]}]}]}
{"id": "7153830_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --configuration phpunit.xml", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bash <(curl -s https://codecov.io/bash) -t your_codecov_token\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your deployment steps here\n# For example, using SSH to deploy:\nssh user@yourserver.com 'cd /path/to/your/app && git pull && php artisan migrate'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71570210_0", "jobs": [{"name": "swiftlint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install swiftlint\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swiftlint\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71575594_0", "jobs": [{"name": "check-pod-status", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Configure your kubeconfig here, examples:\nmkdir -p ~/.kube\necho \"${{ secrets.KUBECONFIG }}\" > ~/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "POD_NAME=\"your-pod-name\"  # Change to your actual pod name\nNAMESPACE=\"your-namespace\" # Change to your actual namespace\n\n# Check if the Pod is terminating or a new Pod is up\nwhile true; do\n  # Get the pod status\n  STATUS=$(kubectl get pods -n ${NAMESPACE} ${POD_NAME} -o jsonpath='{.status.phase}')\n  echo \"Current pod status: ${STATUS}\"\n  \n  if [ \"${STATUS}\" == \"Running\" ]; then\n    echo \"Pod is running and ready.\"\n    break\n  elif [ \"${STATUS}\" == \"Terminating\" ]; then\n    echo \"Pod is terminating. Waiting for new pod...\"\n    sleep 5  # Wait before checking again\n  else\n    echo \"Pod is in status: ${STATUS}. Waiting...\"\n    sleep 5  # Wait before checking again\n  fi\n\n  # Optionally, check for a new pod being created and ready\n  NEW_POD_STATUS=$(kubectl get pods -n ${NAMESPACE} -l app=${POD_NAME} --field-selector=status.phase=Running --no-headers | wc -l)\n  if [ \"${NEW_POD_STATUS}\" -ge 1 ]; then\n    echo \"New pod is ready.\"\n    break\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Now deploying the next step...\"\n# Add your deployment command here, e.g.:\n# kubectl apply -f your-deployment.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71586216_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --collect:\"XPlat Code Coverage\" --no-build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SonarSource/sonarcloud-github-action", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "sonar-projectKey", "value": "${{ secrets.SONAR_PROJECT_KEY }}", "CIvars": [{"name": "SONAR_PROJECT_KEY", "expression": "secrets.SONAR_PROJECT_KEY", "type": "secret"}]}, {"type": "arg", "name": "sonar-org", "value": "${{ secrets.SONAR_ORG }}", "CIvars": [{"name": "SONAR_ORG", "expression": "secrets.SONAR_ORG", "type": "secret"}]}, {"type": "arg", "name": "sonar-token", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "dotnet tool install --global dotnet-sonarscanner\nexport PATH=\"$PATH:/home/runner/.dotnet/tools\"\ndotnet sonarscanner begin \\\n  /k:\"${{ secrets.SONAR_PROJECT_KEY }}\" \\\n  /d:sonar.login=\"${{ secrets.SONAR_TOKEN }}\" \\\n  /d:sonar.cs.vstest.reportsPath=\"$GITHUB_WORKSPACE/TestResults/*.trx\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --no-restore\ndotnet sonarscanner end /d:sonar.login=\"${{ secrets.SONAR_TOKEN }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71589366_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.pub-cache\n~/.gradle/caches/\n~/.gradle/wrapper/\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.yaml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter analyze", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run tests in parallel and generate coverage\nflutter test --coverage\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage/lcov.info", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Optionally, run integration tests in parallel (customize as needed)\nflutter drive --target=test_driver/app.dart\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71602577_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "71623045_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}]}, {"name": "merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/auto-merge", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "merge_method", "value": "merge", "CIvars": []}, {"type": "arg", "name": "title", "value": "Auto-merge PR", "CIvars": []}, {"type": "arg", "name": "message", "value": "This PR was automatically merged because the tests passed.", "CIvars": []}]}]}]}
{"id": "71647241_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install --repo-update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourAppDirectory  # Change to your app directory\nxcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO clean build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourAppDirectory  # Change to your app directory\nxcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('Podfile', 'Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}]}]}
{"id": "71676655_0", "jobs": [{"name": "restart_build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "workflow", "value": "ci.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}]}]}]}
{"id": "71694683_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Fetching variable group...\"\naz pipelines variable-group variable list --group-id \"<YOUR_VARIABLE_GROUP_ID>\" --detect-appropriate-repos --org \"<YOUR_ORG_URL>\" --project \"<YOUR_PROJECT_NAME>\" > vars.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Setting environment variables...\"\ncat vars.json | jq -r '.[] | \"export \\(.name)=\\(.value)\"' > vars.sh\nsource vars.sh\n# Ensure to clean up after sourcing\nrm vars.json vars.sh\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Terraform Init...\"\nterraform init\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running Terraform Plan...\"\nterraform plan -out=tfplan\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Applying Terraform changes...\"\nterraform apply -auto-approve tfplan\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71712675_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages('devtools')\ninstall.packages('roxygen2')\n# Add any other package dependencies you might have\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -f DESCRIPTION ]; then\n  R CMD check .\nelse\n  echo \"No DESCRIPTION file found. Not an R package.\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71765227_0", "jobs": [{"name": "check-pattern", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Extract the diff from the pull request\ngit fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge\ndiff=$(git diff origin/${{ github.event.base.ref }} --name-only)\n\n# Initialize a variable to accumulate messages\nmessage=\"\"\n\n# Loop through the changed files and check for 'TODO'\nfor file in $diff; do\n  if [[ \"$file\" == *.js ]] || [[ \"$file\" == *.py ]] || [[ \"$file\" == *.java ]]; then\n    if grep -q 'TODO' \"$file\"; then\n      message+=\"TODO found in $file\\n\"\n    fi\n  fi\ndone\n\n# Append comment if TODOs were found\nif [ -n \"$message\" ]; then\n  echo \"TODO patterns found:\\n$message\" > todo_report.txt\nelse\n  echo \"No TODO patterns found.\" > todo_report.txt\nfi\n\n# Read the report into an output variable\nreport=$(<todo_report.txt)\necho \"::set-output name=report::$report\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "unsplash/comments", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "**Pattern Check Report:**\n${{ steps.check_todo.outputs.report }}\n", "CIvars": [{"name": "check_todo.outputs.report", "expression": "steps.check_todo.outputs.report", "type": "steps"}]}]}]}]}
{"id": "71765471_0", "jobs": [{"name": "helm-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "3.8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "helm dependency update ./your-chart\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm lint ./your-chart\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install your-release-name ./your-chart --namespace your-namespace --values ./your-chart/values.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71777657_0", "jobs": [{"name": "remove-inactive-environments", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gh auth login --with-token <<< \"${{ secrets.GITHUB_TOKEN }}\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gh environment list --json name,updatedAt --jq '.[] | { name: .name, updatedAt: .updatedAt }' > environments.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "INACTIVE_DAYS=30\nCURRENT_DATE=$(date +%s)\nINACTIVE_DATE=$(date -d \"$INACTIVE_DAYS days ago\" +%s)\n\nfor env in $(jq -c '.[]' environments.json)\ndo\n  NAME=$(echo $env | jq -r '.name')\n  UPDATED_AT=$(echo $env | jq -r '.updatedAt')\n  UPDATED_DATE=$(date -d \"$UPDATED_AT\" +%s)\n\n  if [ $UPDATED_DATE -lt $INACTIVE_DATE ]; then\n    echo \"Removing inactive environment: $NAME\"\n    gh environment delete \"$NAME\"\n  fi\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71785133_0", "jobs": [{"name": "manage-contributions", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ github.event_name }}\" == \"issue\" ]]; then\n  echo \"Contributing to Issues\"\n  if [[ \"${{ github.event.action }}\" == \"opened\" ]]; then\n    echo \"::set-output name=label::new-issue\"\n  fi\nelif [[ \"${{ github.event_name }}\" == \"pull_request\" ]]; then\n  echo \"Contributing to Pull Requests\"\n  if [[ \"${{ github.event.action }}\" == \"opened\" ]]; then\n    echo \"::set-output name=label::new-pr\"\n  fi\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions-ecosystem/action-add-labels", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "labels", "value": "${{ steps.analyze.outputs.label }}", "CIvars": [{"name": "analyze.outputs.label", "expression": "steps.analyze.outputs.label", "type": "steps"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/stale", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "repo-token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "days-before-stale", "value": 7, "CIvars": []}, {"type": "arg", "name": "days-before-close", "value": 7, "CIvars": []}, {"type": "arg", "name": "stale-message", "value": "This issue has been marked as stale due to inactivity.", "CIvars": []}, {"type": "arg", "name": "close-message", "value": "This issue has been closed due to inactivity.", "CIvars": []}]}]}]}
{"id": "7178977_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Wait for Selenium to be available\nwhile ! nc -z localhost 4444; do\n  echo \"Waiting for Selenium...\"\n  sleep 5\ndone\n\n# Execute your Selenium tests here\n# For example, if you are using a test suite with Behatch or similar:\n./vendor/bin/behat\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "chmod +x your-bash-script.sh\n./your-bash-script.sh\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "upload-artifacts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "PHPUnit Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "tests/_output/*.xml", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Selenium Results", "CIvars": []}, {"type": "arg", "name": "path", "value": "selenium-results/", "CIvars": []}]}]}]}
{"id": "71794072_1", "jobs": [{"name": "call-aws-deploy", "steps": []}]}
{"id": "71803941_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Ruby version:\"\nruby -v\necho \"Gems installed:\"\ngem list\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Running tests...\"\nbundle exec rake test # or `bundle exec rspec` depending on your test framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Debugging information:\"\necho \"Last 10 lines of the log:\"\ntail -n 10 log/test.log || true # assuming you have a log file; adjust for your setup\necho \"List of installed gems:\"\ngem list\necho \"Ruby environment:\"\nprintenv | grep -i ruby || true\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"All tests passed!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71816958_0", "jobs": [{"name": "upload-artifacts", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Your build command here, e.g.:\n# npm install && npm run build\necho \"Building the project...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This is where you create or prepare your artifacts\necho \"Creating artifact...\"\nmkdir -p artifact-folder\necho \"This is a sample artifact\" > artifact-folder/sample-artifact.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ github.event.release.upload_url }}", "CIvars": [{"name": "event.release.upload_url", "expression": "github.event.release.upload_url", "type": "context"}]}, {"type": "arg", "name": "asset_path", "value": "artifact-folder/sample-artifact.txt", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "sample-artifact.txt", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "text/plain", "CIvars": []}]}]}]}
{"id": "71830645_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, sqlite3, gd, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y sqlite3 libsqlite3-dev\ntouch database/database.sqlite\nphp artisan migrate --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add deployment commands here, for example:\n# ssh user@server \"cd /path/to/your/app && git pull && composer install && php artisan migrate --force\"\necho \"Deploying to production...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71843224_0", "jobs": [{"name": "publish", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require vendor/package-name", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Generate the TER-compatible zip file\nzip -r extension.zip . -x \".*\" -x \"*.git*\"\n\n# Make any modifications to the extension before publishing\n# For example, update the version number (if necessary)\n# Modify this command as per your versioning strategy\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.TYPO3_TER_USERNAME }}\" > ~/.typo3_ter_user\necho \"${{ secrets.TYPO3_TER_API_KEY }}\" > ~/.typo3_ter_api_key\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Use the TYPO3 extension manager command to upload the extension\ncurl -X POST -u \"${{ secrets.TYPO3_TER_USERNAME }}:${{ secrets.TYPO3_TER_API_KEY }}\" \\\n-F \"file=@extension.zip\" \\\n\"https://extensions.typo3.org/api/v1/upload\"  # Check the correct endpoint for your use case\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rm extension.zip", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71847363_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "security", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "snyk/actions/nodejs", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "executable", "value": "snyk", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm run lint  # Modify according to your linter setup\nnpm run eslint  # or other static analysis tools you use\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "GitHub-Toolbox/detect-secrets-action", "version": "v1", "shell": "bash", "with": []}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying application...\"  # Customize your deployment steps\n# Here add your deployment command (e.g., using AWS CLI, Heroku, etc.)\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71857563_0", "jobs": [{"name": "clone-issue", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Get the issue details\nISSUE_TITLE=\"${{ github.event.issue.title }}\"\nISSUE_BODY=\"${{ github.event.issue.body }}\"\nISSUE_LABELS=$(echo \"${{ github.event.issue.labels }}\" | jq -r 'map(.name) | join(\",\")')\nSOURCE_REPO=\"${{ github.repository }}\"\nTARGET_REPOS=(\"user1/repo1\" \"user2/repo2\")  # Replace with the target repositories\n\nfor TARGET_REPO in \"${TARGET_REPOS[@]}\"; do\n  # Create the issue in the target repository\n  gh issue create --repo \"$TARGET_REPO\" --title \"$ISSUE_TITLE\" --body \"$ISSUE_BODY\" --label \"$ISSUE_LABELS\"\ndone\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71865204_0", "jobs": [{"name": "trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/{owner}/{repo}/dispatches", "CIvars": []}, {"type": "arg", "name": "owner", "value": "your-github-username", "CIvars": []}, {"type": "arg", "name": "repo", "value": "repo-b", "CIvars": []}, {"type": "arg", "name": "event_type", "value": "trigger-action", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.REPO_B_TOKEN }}", "CIvars": [{"name": "REPO_B_TOKEN", "expression": "secrets.REPO_B_TOKEN", "type": "secret"}]}]}]}]}
{"id": "71865958_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v3", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourArtifactName", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore YourProjectName.csproj --configfile nuget.config", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build YourProjectName.csproj --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test YourProjectName.csproj --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish YourProjectName.csproj --configuration Release --output ./output", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Example deployment steps\n# You can add your deployment scripts or commands here\necho \"Deploying the project...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71890155_0", "jobs": [{"name": "terraform", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "hashicorp/setup-terraform", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "terraform_version", "value": "1.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "terraform init\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "terraform plan -out=tfplan\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "aws-actions/s3-sync", "version": "v0.4.0", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "sync tfplan s3://your-s3-bucket-name/path/to/store/tfplan", "CIvars": []}]}]}]}
{"id": "71904047_3", "jobs": [{"name": "build", "steps": []}, {"name": "test", "steps": []}]}
{"id": "71913088_0", "jobs": [{"name": "notify_support", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.gmail.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 587, "CIvars": []}, {"type": "arg", "name": "username", "value": "${YOUR_EMAIL}", "CIvars": []}, {"type": "arg", "name": "password", "value": "${YOUR_EMAIL_APP_PASSWORD}", "CIvars": []}, {"type": "arg", "name": "subject", "value": "Account Blocked - Action Needed", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hello Vercel Support,\n\nI'm reaching out because I encountered an issue with my Vercel account, which is currently blocked. The system prompted me to contact you for assistance. \n\nPlease let me know what steps I should take to resolve this.\n\nThank you!\n\nBest regards,\nGitHub Actions Workflow\n", "CIvars": []}, {"type": "arg", "name": "to", "value": "registration@vercel.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "YOUR_EMAIL", "CIvars": []}]}]}]}
{"id": "71924098_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter analyze", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build ios --release --no-codesign", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71964289_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-restore --verbosity normal", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "7.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YOUR_AZURE_APP_NAME", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment to Azure successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "71977341_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run generate-report", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "html-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "path/to/your/report-directory/*.html", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "html-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "./downloaded-html-reports", "CIvars": []}]}]}]}
{"id": "71997371_4", "jobs": [{"name": "build", "steps": []}, {"name": "test", "steps": []}, {"name": "deploy", "steps": []}]}
{"id": "72003275_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install  # Adjust your package manager if necessary (e.g., yarn)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust your build command as appropriate\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20.4.0", "shell": "bash", "with": [{"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}, {"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-org-id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-project-id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment completed!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72008176_0", "jobs": [{"name": "dispatch", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"::set-output name=message::$(git log -1 --pretty=%B)\"", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "${{ github.repository }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}]}, {"type": "arg", "name": "workflow", "value": "child-workflow.yml", "CIvars": []}, {"type": "arg", "name": "ref", "value": "${{ github.ref }}", "CIvars": [{"name": "ref", "expression": "github.ref", "type": "context"}]}, {"type": "arg", "name": "inputs", "value": {"commit_message": "${{ steps.commit_message.outputs.message }}"}, "CIvars": []}]}]}]}
{"id": "7203138_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-redirects", "value": true, "CIvars": []}, {"type": "arg", "name": "vercel-project-id", "value": "${{ secrets.VERCEL_PROJECT_ID }}", "CIvars": [{"name": "VERCEL_PROJECT_ID", "expression": "secrets.VERCEL_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "vercel-org-id", "value": "${{ secrets.VERCEL_ORG_ID }}", "CIvars": [{"name": "VERCEL_ORG_ID", "expression": "secrets.VERCEL_ORG_ID", "type": "secret"}]}, {"type": "arg", "name": "working-directory", "value": "./path-to-your-app", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Deployment complete: https://your-deployed-app-url.com\"\necho \"::set-output name=url::https://your-deployed-app-url.com\" # Use the actual URL from the deployment output\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72033107_0", "jobs": [{"name": "swiftlint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "swiftbrew/installer", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.swiftlint\ncurl -L -o ~/.swiftlint/swiftlint.zip \"https://github.com/realm/SwiftLint/releases/latest/download/swiftlint.zip\"\nunzip -d ~/.swiftlint ~/.swiftlint/swiftlint.zip\nsudo mv ~/.swiftlint/swiftlint /usr/local/bin/\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swiftlint", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72054128_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.24f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneWindows", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./Unity/Editor/Unity -quit -batchmode -nographics \\\n-projectPath ${{ github.workspace }} \\\n-buildTarget StandaloneWindows \\\n-executeMethod YourNamespace.EditorBuild.Build \\\n-logFile\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "build_output_directory/", "CIvars": []}]}]}]}
{"id": "72069089_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "12.5", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "brew install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -scheme YourAppScheme -archivePath $PWD/build/YourAppName.xcarchive archive\nxcodebuild -exportArchive -archivePath $PWD/build/YourAppName.xcarchive -exportPath $PWD/build -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p $PWD/build/YourAppName.dmg\nhdiutil create -volname \"YourAppName\" -srcfolder $PWD/build/YourAppName.app -ov -format UDZO $PWD/build/YourAppName.dmg\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourAppName.dmg", "CIvars": []}, {"type": "arg", "name": "path", "value": "$PWD/build/YourAppName.dmg", "CIvars": []}]}]}]}
{"id": "72075255_1", "jobs": [{"name": "send_email", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "groovy/groovy-actions", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "groovy scripts/sendEmailWithCsv.groovy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72079903_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install # or any other command relevant to your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build # Replace with your build command, if applicable\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}]}]}]}
{"id": "72125592_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.CERTIFICATE }}\" > certificate.p12\necho \"${{ secrets.PROFILE }}\" > profile.mobileprovision\nsecurity create-keychain -p \"\" build.keychain\nsecurity import certificate.p12 -k build.keychain -P \"${{ secrets.CERTIFICATE_PASSWORD }}\" -A\nsecurity list-keychains -s build.keychain\nsecurity unlock-keychain -p \"\" build.keychain\nsecurity set-key-partition-list -S apple-tool:,apple: -s -k \"\" build.keychain\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\ncp profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/\necho \"export DEVELOPER_DIR=$(xcode-select -p)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane ios beta # Adjust lane name as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72128581_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane your_lane_name --skip_app_store_check\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72133102_1", "jobs": [{"name": "run-remote-script", "steps": []}]}
{"id": "72142402_1", "jobs": [{"name": "call-common-workflow", "steps": []}]}
{"id": "72142402_2", "jobs": [{"name": "call-common-workflow", "steps": []}]}
{"id": "72142928_0", "jobs": [{"name": "create-pr", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --global user.name 'github-actions'\ngit config --global user.email 'action@github.com'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git checkout target-branch # Replace with your target branch\ngit checkout -b temp-branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git cherry-pick source-branch..source-branch # Replace with your source branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin temp-branch\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "repo-sync/github-sync", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "source_branch", "value": "temp-branch", "CIvars": []}, {"type": "arg", "name": "destination_branch", "value": "target-branch", "CIvars": []}, {"type": "arg", "name": "pr_title", "value": "Merge changes from source-branch", "CIvars": []}, {"type": "arg", "name": "pr_body", "value": "This pull request merges changes from source-branch into target-branch.", "CIvars": []}, {"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "72162683_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker-compose build\ndocker-compose push\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker-compose run app1 npm test\ndocker-compose run app2 npm test\ndocker-compose run app3 npm test\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "digitalocean/action-doctl", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "access_token", "value": "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}", "CIvars": [{"name": "DIGITALOCEAN_ACCESS_TOKEN", "expression": "secrets.DIGITALOCEAN_ACCESS_TOKEN", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "doctl app deploy your-app-id\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72203245_0", "jobs": [{"name": "build_and_upload", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "jakejarvis/s3-sync-action", "version": "0.5.0", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "--acl public-read --follow-symlinks --exclude \".git/*\"", "CIvars": []}]}]}]}
{"id": "72207701_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish --no-build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR-APP-NAME>", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_WEBAPP_PUBLISH_PROFILE", "expression": "secrets.AZURE_WEBAPP_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "72214919_0", "jobs": [{"name": "import-solution", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "microsoft/PowerPlatform-CLI", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pac auth create --url $POWERAPPS_ENVIRONMENT --username $POWERAPPS_USERNAME --password $POWERAPPS_PASSWORD\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pac solution import --path ./path/to/your/solution.zip --environment $POWERAPPS_ENVIRONMENT --unpack --async\n# Wait for import to complete (Polling)\nIMPORT_STATUS=\"inProgress\"\nwhile [ \"$IMPORT_STATUS\" = \"inProgress\" ]; do\n  IMPORT_STATUS=$(pac solution list --environment $POWERAPPS_ENVIRONMENT | grep \"$SOLUTION_NAME\" | awk '{print $5}') \n  echo \"Current import status: $IMPORT_STATUS\"\n  sleep 10\ndone\nif [ \"$IMPORT_STATUS\" != \"Succeeded\" ]; then\n  echo \"Solution import failed.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "OUTPUT_VAR=$(pac solution listoutput --solution \"$SOLUTION_NAME\" --environment \"$POWERAPPS_ENVIRONMENT\" | jq -r '.outputVariableName') # Assuming JSON output\necho \"OUTPUT_VAR=${OUTPUT_VAR}\" >> $GITHUB_ENV\necho \"Output variable retrieved: $OUTPUT_VAR\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72215265_0", "jobs": [{"name": "example_job", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"This command will fail...\"\nexit 1  # Simulating a failure\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/some-action", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"This step runs regardless of the previous command's success.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72219700_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.0.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az deployment group create \\\n  --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \\\n  --template-file ./path/to/template.json \\\n  --parameters ./path/to/parameters.json\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72226779_0", "jobs": [{"name": "secret-scan", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "trufflesuite/secret-scanner", "version": "v1.0.1", "shell": "bash", "with": [{"type": "arg", "name": "fail_on_first_secret", "value": true, "CIvars": []}, {"type": "arg", "name": "fail_on_warning", "value": false, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Secret scan failed! Please fix the reported issues.\"\necho \"Please take care to remove passwords and other sensitive information.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72227903_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-Pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-Pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "pod install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "set -o pipefail && xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/YourApp.xcarchive -exportOptionsPlist /path/to/YourExportOptions.plist -exportPath ${{ github.workspace }}/build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp.ipa", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.ipa", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "bundle exec fastlane upload_to_testflight", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72256387_1", "jobs": [{"name": "uninstall", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler:2.2.15 # Specify your bundler version\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane uninstall_app\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72262646_0", "jobs": [{"name": "sync", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CREDENTIALS }}\" > azure_creds.json\naz login --service-principal --username $(jq -r .clientId azure_creds.json) --password $(jq -r .clientSecret azure_creds.json) --tenant $(jq -r .tenantId azure_creds.json)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "RESOURCE_GROUP_NAME=\"<your-resource-group-name>\"\nSYNAPSE_WORKSPACE_NAME=\"<your-synapse-workspace-name>\"\nTARGET_WORKSPACE_NAME=\"<target-synapse-workspace-name>\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az synapse workspace sql pool create --name <sql-pool-name> --resource-group $RESOURCE_GROUP_NAME --workspace-name $SYNAPSE_WORKSPACE_NAME\naz synapse workspace sql pool export-unmanaged-backup --resource-group $RESOURCE_GROUP_NAME --workspace-name $SYNAPSE_WORKSPACE_NAME --name <sql-pool-name> --target $TARGET_WORKSPACE_NAME\n\n# Additional commands can be added here to sync other artifacts (notebooks, pipelines, etc.)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72265271_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane pilot upload --ipa 'path/to/your.ipa' --skip_submission --skip_waiting_for_upload\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72271696_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "YOUR_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo ${{ secrets.GCP_CREDENTIALS_JSON }} > ${HOME}/gcloud_key.json\ngcloud auth activate-service-account --key-file=${HOME}/gcloud_key.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud container clusters get-credentials YOUR_CLUSTER_NAME --zone YOUR_ZONE --project YOUR_PROJECT_ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get pods\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72286943_2", "jobs": [{"name": "call-reusable", "steps": []}]}
{"id": "72294938_0", "jobs": [{"name": "update-status", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shyguys/github-status", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "state", "value": "success", "CIvars": []}, {"type": "arg", "name": "context", "value": "PR Status Check", "CIvars": []}, {"type": "arg", "name": "description", "value": "This is a custom message for your pull request status.", "CIvars": []}, {"type": "arg", "name": "target_url", "value": "https://example.com", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"The PR status has been updated with a custom message.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72322632_0", "jobs": [{"name": "undraft-pr", "steps": [{"type": "shell_cmd", "cmd": "echo \"Comment body: ${{ github.event.comment.body }}\"\nif [[ \"${{ github.event.comment.body }}\" != \"/undraft\" ]]; then\n  echo \"not triggering undraft\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2.x", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "PUT /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}]}, {"type": "arg", "name": "mediaType", "value": "application/vnd.github.v3+json\n", "CIvars": []}, {"type": "arg", "name": "body", "value": "{\"draft\": false}", "CIvars": []}]}]}]}
{"id": "72331753_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github actions\nrails db:create RAILS_ENV=test\nrails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec    # Replace with your test command if different\n# or for other test frameworks\n# bundle exec rails test\n# yarn test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# If you want to clean up after tests\n# For example, stopping services\necho \"Cleaning up\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72340765_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "my-actions/my-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "param1", "value": "value1", "CIvars": []}, {"type": "arg", "name": "param2", "value": "value2", "CIvars": []}]}]}]}
{"id": "72353130_1", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-subscription-id", "value": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "CIvars": [{"name": "AZURE_SUBSCRIPTION_ID", "expression": "secrets.AZURE_SUBSCRIPTION_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "azure-client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "azure-tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }} --overwrite-existing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get nodes", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72360076_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "destination_dir", "value": "/", "CIvars": []}]}]}]}
{"id": "72381041_0", "jobs": [{"name": "update-packages", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-swift", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "swift-version", "value": "5.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift package update", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add Package.resolved\ngit commit -m \"Update Package.resolved\" || echo \"No changes to commit.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin main  # Change to your target branch if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72381259_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build appbundle --release\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72384905_0", "jobs": [{"name": "analyze", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/setup", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "languages", "value": "javascript,python,ruby", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/init", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "languages", "value": "javascript,python,ruby", "CIvars": []}, {"type": "arg", "name": "queries", "value": "security-queries", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Add build commands if necessary for your project setup\nnpm install  # For Node.js projects\n# or your relevant build commands for other languages\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/analyze", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "upload", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "filename", "value": "results.sarif", "CIvars": []}, {"type": "arg", "name": "name", "value": "codeql-results", "CIvars": []}]}]}]}
{"id": "72385316_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "72387730_0", "jobs": [{"name": "check_team_membership", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Ensure GitHub CLI is installed\nif ! command -v gh &> /dev/null\nthen\n  echo \"GitHub CLI could not be found, please install it.\"\n  exit 1\nfi\n\n# Get the PR creator\nPR_CREATOR=$(jq -r \".pull_request.user.login\" \"$GITHUB_EVENT_FILE\")\n\n# Define your organization and team name\nORG_NAME=\"your-organization-name\"\nTEAM_NAME=\"your-team-name\"\n\n# Check if the PR creator is a member of the specified team\nIS_MEMBER=$(gh api -X GET \"/orgs/$ORG_NAME/teams/$TEAM_NAME/members/$PR_CREATOR\" --silent --fail || echo \"false\")\n\nif [[ \"$IS_MEMBER\" == \"false\" ]]; then\n  echo \"PR creator $PR_CREATOR is not a member of the team $TEAM_NAME.\"\n  exit 1\nelse\n  echo \"PR creator $PR_CREATOR is a member of the team $TEAM_NAME.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"PR check failed. Please ensure you are a member of the required team.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72430520_0", "jobs": [{"name": "integration", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-qemu-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/compose-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "up --abort-on-container-exit --exit-code-from app", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "docker-compose down --volumes\ndocker volume rm pgdata\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72431905_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install jekyll bundler # Install Jekyll and Bundler\nbundle install # Install the gems specified in your Gemfile\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build # Builds the site, outputting to _site/ directory\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "72435142_0", "jobs": [{"name": "run-action", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/your-action-name", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "your-input", "value": "your-value", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Action successfully executed after merge.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72445812_0", "jobs": [{"name": "add-comment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "Thank you for your contribution! We appreciate your effort.\nIf you have any questions, feel free to ask.\n", "CIvars": []}]}]}]}
{"id": "72448969_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, bcmath, xml, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "error_reporting=E_ALL\ndisplay_errors=1\nmemory_limit=2G\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit -c dev/tests/unit/phpunit.xml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72454182_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "72465616_0", "jobs": [{"name": "validate", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Define the string to validate (you can modify this value)\n$stringToValidate = '!@#$%^&*()'\n\n# Check if the string is null or empty\nif (-not [string]::IsNullOrEmpty($stringToValidate)) {\n    Write-Host \"The string is not null or empty.\"\n} else {\n    Write-Host \"The string is null or empty.\"\n    exit 1 # Exit with an error code if it is null or empty\n}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"String validation complete!\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "724854_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST \"https://your-url-here.com/callback\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"status\": \"${{ job.status }}\", \"log\": \"${{ steps.build.outcome }}\"}'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72489225_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build ios --release --no-codesign", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk\nbuild/ios/ipa/Runner.ipa\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "apk_file=$(basename build/app/outputs/flutter-apk/app-release.apk)\nipa_file=$(basename build/ios/ipa/Runner.ipa)\n\ncurl -X POST https://api.codemagic.io/v1/app/build \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: ${CODEMAGIC_API_KEY}\" \\\n  -d '{\n    \"workflow_id\": \"your-workflow-id\",\n    \"email\": [\"email1@example.com\", \"email2@example.com\"],  # Specify your target email list\n    \"artifacts\": [{\n      \"apk\": \"'\"$apk_file\"'\",\n      \"ipa\": \"'\"$ipa_file\"'\"\n    }]\n  }'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72499937_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "lfs", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "game-ci/unity-builder", "version": "v2.0.11", "shell": "bash", "with": [{"type": "arg", "name": "unityVersion", "value": "2021.3.0f1", "CIvars": []}, {"type": "arg", "name": "targetPlatform", "value": "StandaloneLinux64", "CIvars": []}, {"type": "arg", "name": "buildName", "value": "LinuxBuild", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Running custom Unity project setup\"\n# Add any additional Unity commands here\n# For example, you might want to run some scripts or import assets\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Building the project\"\nunity-editor -batchmode -quit -projectPath ./ -executeMethod YourNamespace.YourBuildClass.YourBuildMethod\n# Add your custom Unity build method here\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "UnityBuild", "CIvars": []}, {"type": "arg", "name": "path", "value": "./Builds/LinuxBuild", "CIvars": []}]}]}]}
{"id": "72520372_0", "jobs": [{"name": "analyze", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/setup", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "languages", "value": "javascript,python,java", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Add steps here to build your project, for example:\n# npm install\n# npm run build\necho \"Building the project...\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/analyze", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "category", "value": "security", "CIvars": []}, {"type": "arg", "name": "output", "value": "codeql-database", "CIvars": []}]}]}]}
{"id": "72553639_0", "jobs": [{"name": "deploy_aws", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "aws-actions/configure-aws-credentials", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "aws-access-key-id", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "CIvars": [{"name": "AWS_ACCESS_KEY_ID", "expression": "secrets.AWS_ACCESS_KEY_ID", "type": "secret"}]}, {"type": "arg", "name": "aws-secret-access-key", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "CIvars": [{"name": "AWS_SECRET_ACCESS_KEY", "expression": "secrets.AWS_SECRET_ACCESS_KEY", "type": "secret"}]}, {"type": "arg", "name": "aws-region", "value": "us-east-1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "INSTANCE_ID=$(aws ec2 run-instances \\\n  --image-id ami-12345678 \\ # Change to your desired AMI\n  --count 1 \\\n  --instance-type t2.micro \\\n  --key-name my-key-pair \\ # Change to your key pair name\n  --query 'Instances[0].InstanceId' \\\n  --output text)\necho \"EC2 instance $INSTANCE_ID launched.\"\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy_azure", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.30.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az vm create \\\n  --resource-group MyResourceGroup \\ # Change to your resource group\n  --name MyVM \\ # Change to your VM name\n  --image UbuntuLTS \\ # Change to your desired image\n  --admin-username azureuser \\\n  --admin-password ${{ secrets.AZURE_VM_PASSWORD }} \\\n  --size Standard_B1s\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72555315_0", "jobs": [{"name": "start-vm", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "enable_azure_cli", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "creds", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "az vm start --resource-group <YourResourceGroup> --name <YourVMName>\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"VM has been started successfully.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72561141_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl, gd", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size = 200M\nupload_max_filesize = 200M\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --prefer-dist\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force  # Use this if you're using Laravel\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72564660_0", "jobs": [{"name": "check-merge-conflict", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge:refs/heads/merge-temp || echo \"Merge conflict detected!\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if git ls-files -u | grep -q '^'; then\n  echo \"Merge conflicts detected! Please resolve them.\";\n  echo \"::set-output name=conflict::true\"\nelse\n  echo \"No merge conflicts.\";\n  echo \"::set-output name=conflict::false\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Merge Conflict Detected in PR #${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "This was automatically created because merge conflicts were detected in this pull request.\nPlease resolve the conflicts before proceeding.\n", "CIvars": []}, {"type": "arg", "name": "labels", "value": "conflict, alert", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v4", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const { owner, repo } = context.repo;\nconst prNumber = context.payload.pull_request.number;\nconst comment = \"\ud83d\udd34 Merge conflict detected! Please resolve the conflicts before merging.\";\nawait github.issues.createComment({\n  owner,\n  repo,\n  issue_number: prNumber,\n  body: comment\n});\n", "CIvars": []}]}]}]}
{"id": "72566050_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}]}]}]}
{"id": "72568209_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "UnrealEngine/UnrealEngineSetup", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "ue_version", "value": "5.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd YourProjectName  # Change to your project's directory\n\"C:\\Program Files\\Epic Games\\{YourUE5Folder}\\Engine\\Binaries\\Win64\\UE4Editor.exe\" YourProjectName.uproject -run=BuildCookRun -platform=Win64 -cook -allmaps -build -stage -archive -archivedirectory=./build_output\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd YourProjectName  # Change to your project's directory\n\"C:\\Program Files\\Epic Games\\{YourUE5Folder}\\Engine\\Binaries\\Win64\\UE4Editor.exe\" YourProjectName.uproject -run=SmokeTest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./build_output", "CIvars": []}]}]}]}
{"id": "72571119_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -sL https://deb.nodesource.com/setup_14.x | bash -\napt-get install -y nodejs\nnpm install -g appium\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd your_app_directory # Change this to your app's directory\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath build/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportOptionsPlist YourExportOptions.plist -exportPath build/YourApp.ipa\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "appium & # Run Appium in the background\nsleep 10 # Wait a moment for the server to start\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run test-appium # Assuming you have a script defined for running tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kill $(pgrep -f appium) # Stop the Appium server\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72578646_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosite/flutter-action", "version": "v2.0.2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Prevent retries by using the FLUTTER_ROOT env variable to skip the default cache.\nexport FLUTTER_ROOT=\"$HOME/flutter\"\nflutter pub get --no-retry || true # Use the --no-retry flag if applicable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72596183_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Logging into Azure...\"\naz login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Setting Azure subscription...\"\naz account set --subscription $AZURE_SUBSCRIPTION_ID\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to Azure API Management...\"\n# Replace the following commands with the appropriate Azure CLI commands\n# for your specific deployment strategy.\n\n# For example, if you are deploying an API definition from an OpenAPI spec file:\naz apim api import --resource-group $RESOURCE_GROUP_NAME --service-name $APIM_SERVICE_NAME --path 'your-api-path' --api-id 'your-api-id' --specification-format OpenApi --specification-path './path-to-your-openapi-spec.yml'\n\necho \"Deployment to Azure API Management completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72598831_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.7.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.pub-cache\n~/.flutter\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-flutter-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter drive --target=test_driver/app.dart\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72599124_0", "jobs": [{"name": "pull-container", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud auth configure-docker ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker pull ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.DOCKER_IMAGE }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker images\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72602726_0", "jobs": [{"name": "disable-build-phase", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}, {"type": "arg", "name": "cache-bundler", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane disable_build_phase", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72619070_0", "jobs": [{"name": "render-rmd", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "R-version", "value": "4.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "install.packages('rmarkdown')\n# add any other package dependencies your Rmd file might need\ninstall.packages(c('dplyr', 'ggplot2'))  # Example additional dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript -e \"rmarkdown::render('your_file.Rmd')\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "rendered-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "your_file.html", "CIvars": []}]}]}]}
{"id": "72629709_0", "jobs": [{"name": "run-powershell", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/pwsh", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Example: Running a simple PowerShell command.\npwsh -Command \"Write-Host 'Hello from PowerShell!'\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pwsh -File './path/to/your-script.ps1'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72646632_0", "jobs": [{"name": "send-webhook", "steps": [{"type": "gh_action", "cmd": "", "name": "fjogeleit/http-request-action", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://your-webhook-url.com/endpoint", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "{\"Content-Type\": \"application/json\"}", "CIvars": []}, {"type": "arg", "name": "data", "value": "{\"action\": \"${{ github.event.action }}\", \"ref\": \"${{ github.ref }}\", \"repository\": \"${{ github.repository }}\" }", "CIvars": [{"name": "event.action", "expression": "github.event.action", "type": "context"}, {"name": "ref", "expression": "github.ref", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}]}]}]}]}
{"id": "7264788_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler # Install Bundler.\nbundle install        # Install project dependencies.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace `cruisecontrol.rb build_command` with your specific command\nbundle exec cruise_control --some-option # Adjust options accordingly.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test # Run the test command, adjust as needed.\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./test-results/", "CIvars": []}]}]}]}
{"id": "72660571_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Create a build_config.dart to use as a dedicated config\necho \"class BuildConfig {\n  static const String apiUrl = '${{ secrets.API_URL }}';\n  static const String anotherSecret = '${{ secrets.ANOTHER_SECRET }}';\n}\" > lib/build_config.dart\nflutter build web --release\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build/web", "CIvars": []}]}]}]}
{"id": "72674524_0", "jobs": [{"name": "auto-merge", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gh auth login --with-token <<< \"${{ secrets.GITHUB_TOKEN }}\"\npr_number=${{ github.event.pull_request.number }}\ngit diff --exit-code || exit 1\ngh pr merge \"$pr_number\" --merge --admin\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72688410_0", "jobs": [{"name": "create-pull-request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "cli/cli", "version": "latest", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Retrieve the current branch name\nBRANCH_NAME=$(echo \"${GITHUB_REF#refs/heads/}\")\n\n# Create a pull request from the feature branch to main\ngh pr create --base main --head \"$BRANCH_NAME\" --title \"Merge back $BRANCH_NAME\" --body \"This PR merges changes from $BRANCH_NAME back to main.\"\n\n# Check if the pull request was created successfully\nif [ $? -ne 0 ]; then\n  echo \"Failed to create pull request!\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72703363_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda-incubator/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}, {"type": "arg", "name": "conda-version", "value": "4.10.3", "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda activate myenv  # Replace 'myenv' with your environment name\n# Your command to run tests or scripts goes here, for example:\npython -m unittest discover\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda deactivate\nconda remove --name myenv --all -y\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72708254_1", "jobs": [{"name": "use-reusable", "steps": []}]}
{"id": "72718990_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "samuelmeuli/ftp-deploy", "version": "v1.2.0", "shell": "bash", "with": [{"type": "arg", "name": "server", "value": "${{ secrets.FTP_SERVER }}", "CIvars": [{"name": "FTP_SERVER", "expression": "secrets.FTP_SERVER", "type": "secret"}]}, {"type": "arg", "name": "username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "./dist", "CIvars": []}, {"type": "arg", "name": "remote-dir", "value": "/path/to/your/remote/directory", "CIvars": []}]}]}]}
{"id": "72722358_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "exports", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Updating app.yaml with environment variables\"\necho \"env: [ '${{ secrets.ENV_VAR_NAME }}' ]\" >> app.yaml \n# Modify the above line according to the structure of your app.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud app deploy app.yaml --quiet", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72739399_0", "jobs": [{"name": "elixir", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ericblade/elixir-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "elixir-version", "value": "1.12", "CIvars": []}, {"type": "arg", "name": "otp-version", "value": "24.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mix local.hex --force\nmix local.rebar --force\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix deps.get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mix test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72740856_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "./test-results", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "riywo/github-comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "## CI Results\n- The project was built successfully.\n- The tests have passed.\n", "CIvars": []}]}]}]}
{"id": "72742338_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "crepererum/gradle-coverage", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "test jacocoTestReport", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "coverage-report", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/reports/jacoco/test", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Pull request checks passed successfully!\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Pull request checks failed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72743092_0", "jobs": [{"name": "copy-folder", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azcliversion", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.AZURE_CLIENT_SECRET }}\" | az login --service-principal -u \"${{ secrets.AZURE_CLIENT_ID }}\" -p --tenant \"${{ secrets.AZURE_TENANT_ID }}\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az storage blob copy start-batch --source-container \"${{ secrets.SOURCE_CONTAINER }}\" --destination-container \"${{ secrets.DESTINATION_CONTAINER }}\" --source-account-name \"${{ secrets.AZURE_STORAGE_ACCOUNT }}\" --destination-account-name \"${{ secrets.AZURE_STORAGE_ACCOUNT }}\" --pattern \"${{ secrets.SOURCE_FOLDER }}/*\" --destination-path \"${{ secrets.DESTINATION_FOLDER }}/\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72749771_4", "jobs": [{"name": "run-my-action", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "<your-username>/action-repo", "version": "main", "shell": "bash", "with": []}]}]}
{"id": "72749771_5", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building something...\" > output.txt", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "output-files", "CIvars": []}, {"type": "arg", "name": "path", "value": "output.txt", "CIvars": []}]}]}, {"name": "run-my-action", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "output-files", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "<your-username>/action-repo", "version": "main", "shell": "bash", "with": []}]}]}
{"id": "7275932_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Test run completed at $(date)\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72769164_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "gcc-version", "value": "10", "CIvars": []}, {"type": "arg", "name": "cmake-version", "value": "3.20.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\ncmake --build .\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "analyze", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/init", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "languages", "value": "cpp", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/autobuild", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "github/codeql-action/analyze", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "format", "value": "sarif", "CIvars": []}, {"type": "arg", "name": "output", "value": "codeql-results.sarif", "CIvars": []}]}]}]}
{"id": "72780397_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build --prod", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "nvim-lua/action-github-pages", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./dist", "CIvars": []}]}]}]}
{"id": "72802010_0", "jobs": [{"name": "analyze", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, gd, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpstan analyse -c phpstan.neon", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/psalm", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72820273_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.pub-cache\nbuild\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pub-cache-${{ hashFiles('my_flutter_app/pubspec.yaml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pub-cache-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "cd my_flutter_app\nflutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd my_flutter_app\nflutter test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd my_flutter_app\nflutter build apk  # Change this if you want to build for iOS or a web build\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72830387_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore <path-to-your-dotnet-project>", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build <path-to-your-dotnet-project> --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish <path-to-your-dotnet-project> --configuration Release --output ./dotnet-publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get <path-to-your-flutter-project>", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release --output=./flutter-build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Install SSH and rsync (necessary for deployment)\nsudo apt-get install -y sshpass\n\n# Copy .NET publish directory to server\nrsync -avz -e \"ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY\" ./dotnet-publish/ $SSH_USER@$SSH_HOST:/path/to/dotnet/publish/\n\n# Copy Flutter web build to server\nrsync -avz -e \"ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY\" ./flutter-build/web/ $SSH_USER@$SSH_HOST:/path/to/flutter/publish/\n\n# Optional: Execute additional commands to restart services, etc.\nssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY $SSH_USER@$SSH_HOST << 'EOF'\n  # Navigate to dotnet project directory and restart the service\n  cd /path/to/dotnet/project\n  sudo systemctl restart your-dotnet-service  # Adjust as per your service manager\nEOF\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72830713_0", "jobs": [{"name": "cypress", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run cypress:run", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "firebase/firebase-tools", "version": "v9.0.0", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "storage:upload path/to/your/image.jpg --project=${{ secrets.FIREBASE_PROJECT_ID }}", "CIvars": [{"name": "FIREBASE_PROJECT_ID", "expression": "secrets.FIREBASE_PROJECT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "rm -rf path/to/your/image.jpg", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72853980_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "macos-actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pods-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "cd ios\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test \\\n  -workspace YourProject.xcworkspace \\\n  -scheme YourScheme \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n  | xcpretty\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild analyze \\\n-workspace YourProject.xcworkspace \\\n-scheme YourScheme \\\n-destination 'platform=iOS Simulator,name=iPhone 14,OS=latest'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild test -workspace YourProject.xcworkspace -scheme YourSchemeUITests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' | xcpretty\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72858563_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, sqlite3, json", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --seed --no-interaction\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox --fail-on-warning --fail-on-risky", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan route:list --json | jq empty", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72861485_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Your build commands here\necho \"Building the project...\"\necho \"Sample build output\" > output.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifact", "CIvars": []}, {"type": "arg", "name": "path", "value": "output.txt", "CIvars": []}]}]}, {"name": "run-reusable-workflow", "steps": []}]}
{"id": "72864586_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-powershell", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "./path/to/your_script.ps1  # Adjust the path to your actual .ps1 file\n", "name": "", "version": "", "shell": "pwsh"}]}]}
{"id": "72872360_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"GEM_HOST=https://gems.evalhq.com\" >> $GITHUB_ENV\necho \"SIDEKIQ_PRO_API_KEY=${{ secrets.SIDEKIQ_PRO_API_KEY }}\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72883839_0", "jobs": [{"name": "unset-context", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$KUBE_CONFIG_DATA\" | base64 --decode > $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl config current-context", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Unset the context, replacing <context-name> with the name of the context you want to unset\nkubectl config unset contexts.<context-name>\necho \"K8s context unset.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl config get-contexts", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72894926_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, sqlite3, curl", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-cache", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp .env.example .env", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan key:generate", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "storage/logs/*.log", "CIvars": []}]}]}]}
{"id": "72899931_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy_vercel", "steps": [{"type": "gh_action", "cmd": "", "name": "amondnet/vercel-action", "version": "v20.0.0", "shell": "bash", "with": [{"type": "arg", "name": "vercel-token", "value": "${{ secrets.VERCEL_TOKEN }}", "CIvars": [{"name": "VERCEL_TOKEN", "expression": "secrets.VERCEL_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "vercel-args", "value": "--prod", "CIvars": []}, {"type": "arg", "name": "working-directory", "value": "./path-to-your-project", "CIvars": []}]}]}, {"name": "deploy_heroku", "steps": [{"type": "gh_action", "cmd": "", "name": "akhilrajput/heroku-deploy", "version": "v3.11.2", "shell": "bash", "with": [{"type": "arg", "name": "heroku_app_name", "value": "${{ secrets.HEROKU_APP_NAME }}", "CIvars": [{"name": "HEROKU_APP_NAME", "expression": "secrets.HEROKU_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "heroku_email", "value": "${{ secrets.HEROKU_EMAIL }}", "CIvars": [{"name": "HEROKU_EMAIL", "expression": "secrets.HEROKU_EMAIL", "type": "secret"}]}, {"type": "arg", "name": "buildpack", "value": "heroku/nodejs", "CIvars": []}]}]}]}
{"id": "72930816_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v0.2.2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GOOGLE_CLOUD_PROJECT }}", "CIvars": [{"name": "GOOGLE_CLOUD_PROJECT", "expression": "secrets.GOOGLE_CLOUD_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "IMAGE_NAME=gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/my-app:${{ github.sha }}\ndocker build -t $IMAGE_NAME .\ndocker push $IMAGE_NAME\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "IMAGE_NAME=gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/my-app:${{ github.sha }}\ngcloud run deploy my-service \\\n  --image $IMAGE_NAME \\\n  --platform managed \\\n  --region us-central1 \\\n  --set-env-vars \"BRANCH_NAME=${{ github.ref_name }},COMMIT_SHA=${{ github.sha }}\" \\\n  --allow-unauthenticated\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72938350_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install  # Ensure your Gemfile is in the repo\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"FL_APP_ID=${{ secrets.FASTLANE_APP_ID }}\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane <your_lane_name>", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "output", "CIvars": []}, {"type": "arg", "name": "path", "value": "output_directory/", "CIvars": []}]}]}]}
{"id": "72943344_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/repo-a", "CIvars": []}, {"type": "arg", "name": "path", "value": "repo-a", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/repo-b", "CIvars": []}, {"type": "arg", "name": "path", "value": "repo-b", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd repo-a\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd repo-a\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd repo-a\nnpm run build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd repo-a\ndocker build . -t your-docker-username/repo-a:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "docker push your-docker-username/repo-a:latest\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "your-username/repo-b", "CIvars": []}, {"type": "arg", "name": "path", "value": "repo-b", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd repo-b\nkubectl set image deployment/your-deployment-name your-container-name=your-docker-username/repo-a:latest\nkubectl rollout status deployment/your-deployment-name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72944129_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "published-files", "CIvars": []}, {"type": "arg", "name": "path", "value": "./publish/", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "published-files", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "Azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR_AZURE_APP_NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "72952908_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y chromium-browser\nsudo apt-get install -y libnss3 libgconf-2-4\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create db:schema:load\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Xvfb :99 -ac &\nbundle exec rspec  # Assume you are using RSpec for testing, adjust accordingly\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72959144_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u \"${{ github.actor }}\" --password-stdin\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > $KUBECONFIG\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Using kubectl to apply your deployment or pod manifest\nkubectl apply -f path/to/your/deployment.yaml\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72975133_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v1", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "registry", "value": "ghcr.io", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ github.actor }}", "CIvars": [{"name": "actor", "expression": "github.actor", "type": "context"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest", "CIvars": [{"name": "repository_owner", "expression": "github.repository_owner", "type": "context"}, {"name": "repository", "expression": "github.repository", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl set image deployment/<YOUR_DEPLOYMENT_NAME> <YOUR_CONTAINER_NAME>=ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest\nkubectl rollout status deployment/<YOUR_DEPLOYMENT_NAME>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72985028_0", "jobs": [{"name": "require", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "${{ matrix.php-version }}", "CIvars": [{"name": "php-version", "expression": "matrix.php-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer require vendor/package-name", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72992939_0", "jobs": [{"name": "trigger_ado_pipeline", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://dev.azure.com/{organization}/{project}/_apis/pipelines/{pipeline-id}/runs?api-version=6.0-preview.1", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "Content-Type: application/json\nAuthorization: Basic ${TOKEN}\n", "CIvars": []}, {"type": "arg", "name": "body", "value": "{\n  \"resources\": {\n    \"repositories\": {\n      \"self\": {\n        \"refName\": \"refs/heads/{branch-name}\"  # Change to your branch name, e.g., 'main'\n      }\n    }\n  }\n}\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Response: ${{ steps.trigger_ado_pipeline.outputs.response }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72996069_0", "jobs": [{"name": "upload-artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Hello, World!\" > hello.txt", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "hello-artifact-${{ github.run_id }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "path", "value": "hello.txt", "CIvars": []}]}]}, {"name": "retrieve-last-artifact", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "hello-artifact-${{ github.run_id }}", "CIvars": [{"name": "run_id", "expression": "github.run_id", "type": "context"}]}, {"type": "arg", "name": "path", "value": "./downloaded-artifact", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Listing downloaded artifacts:\"\nls -l ./downloaded-artifact\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"The last uploaded artifact: hello-artifact-${{ github.run_id }}\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72997689_1", "jobs": [{"name": "call-reusable", "steps": []}]}
{"id": "72998146_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/login-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "username", "value": "${{ secrets.DOCKER_USERNAME }}", "CIvars": [{"name": "DOCKER_USERNAME", "expression": "secrets.DOCKER_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.DOCKER_PASSWORD }}", "CIvars": [{"name": "DOCKER_PASSWORD", "expression": "secrets.DOCKER_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/build-push-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "context", "value": ".", "CIvars": []}, {"type": "arg", "name": "push", "value": true, "CIvars": []}, {"type": "arg", "name": "tags", "value": "your-dockerhub-username/your-repo-name:${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig.yml\nexport KUBECONFIG=$(pwd)/kubeconfig.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argo submit workflow.yaml --from=dontract\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "argo watch $(argo get -o name) --watch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "72999989_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "73026597_0", "jobs": [{"name": "use-reusable-workflow", "steps": []}]}
{"id": "73026681_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github actions/config/database.yml\nbin/rails db:create RAILS_ENV=test\nbin/rails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails test # Or `bin/rspec` or any test command applicable\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"My environment variable: $MY_ENV_VARIABLE\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73026734_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "pip install -r requirements.txt", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./your_program # Change this to the command that runs your program\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.run_program.out }}\" -ne 0 ]; then\n  echo \"The program crashed!\"\n  exit 1\nelse\n  echo \"The program ran successfully!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73027328_1", "jobs": [{"name": "cancel_builds", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "groovy/gradle-groovy:latest", "version": null, "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "groovy cancel_builds.groovy\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73040728_1", "jobs": [{"name": "call_reusable_workflow", "steps": []}]}
{"id": "73061055_1", "jobs": [{"name": "call_reusable", "steps": []}]}
{"id": "73063977_0", "jobs": [{"name": "rollback", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "imranismail/setup-helm", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "v3.8.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$KUBECONFIG\" | base64 --decode > $HOME/.kube/config\nchmod 600 $HOME/.kube/config\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm rollback $HELM_RELEASE --namespace $NAMESPACE\necho \"Rollback complete for Helm release: $HELM_RELEASE\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7307670_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "r0adkll/setup-android", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "api-level", "value": 31, "CIvars": []}, {"type": "arg", "name": "target", "value": "android-31", "CIvars": []}, {"type": "arg", "name": "script", "value": "yes | sdkmanager \"platform-tools\" \"platforms;android-31\"\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "./gradlew build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew cucumber --info --stacktrace", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "cucumber-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "app/build/reports/cucumber/", "CIvars": []}]}]}]}
{"id": "73083317_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, imagick, bcmath, pdo, pdo_mysql", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist --optimize-autoloader\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"$SSH_PRIVATE_KEY\" > private_key.pem\nchmod 600 private_key.pem\n\nrsync -avz -e \"ssh -o StrictHostKeyChecking=no -i private_key.pem\" --exclude='vendor/' --exclude='.git/' . $SERVER_USER@$SERVER_IP:/path/to/your/laravel/application\n\nssh -o StrictHostKeyChecking=no -i private_key.pem $SERVER_USER@$SERVER_IP << 'EOF'\n  cd /path/to/your/laravel/application\n  composer install --no-dev --optimize-autoloader\n  php artisan migrate --force\n  php artisan config:cache\n  php artisan route:cache\n  php artisan view:cache\n  # Restart your web server if necessary\n  exit\nEOF\n\nrm private_key.pem\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73090161_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean package -DskipTests=true", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mvn test", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT }}", "CIvars": [{"name": "GCP_PROJECT", "expression": "secrets.GCP_PROJECT", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }}", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "helm upgrade --install my-spring-boot-app ./helm/my-chart \\\n  --set image.tag=${{ github.sha }} \\\n  --set image.repository=gcr.io/${{ secrets.GCP_PROJECT }}/my-spring-boot-app \\\n  --namespace my-namespace # Change as per your setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional: Clean up old images if necessary\ngcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT }}/my-spring-boot-app --limit=10 --format='get(digest)' --filter='NOT tags:*' | \\\nawk '{print $1}' | xargs -I {} gcloud container images delete gcr.io/${{ secrets.GCP_PROJECT }}/my-spring-boot-app@{} --force-delete-tags --quiet\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73111898_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nxcodebuild -workspace YourApp.xcworkspace -scheme YourApp -archivePath build/YourApp.xcarchive archive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nxcodebuild -exportArchive -archivePath build/YourApp.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios/build\nfastlane pilot upload YourApp.ipa --testflight_skip_waiting_for_build_processing true --changelog \"$TESTFLIGHT_TEST_NOTES\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73122945_0", "jobs": [{"name": "aks-deployment", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure-cli-version", "value": "2.31.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_SECRET --tenant $AZURE_TENANT\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "az account set --subscription $AZURE_SUBSCRIPTION_ID\naz aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Add your current IP to the AKS authorized IPs\n# Make sure to allow it to access the AKS API server.\nMY_IP=$(curl -s ifconfig.me)  # Gets your current public IP\necho \"My IP: $MY_IP\"\n\n# Example command to update AKS with authorized IP\naz aks update --resource-group $RESOURCE_GROUP --name $AKS_NAME --api-server-authorized-ip-ranges $MY_IP\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl get nodes  # Replace this with any kubectl command you want to run\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73133353_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build appbundle --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "appbundle", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/bundle/release/app-release.aab", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -sL https://firebase.tools | bash\nfirebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \\\n  --app YOUR_APP_ID \\\n  --groups YOUR_TESTER_GROUP\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73139050_0", "jobs": [{"name": "check_review_period", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"PR_CREATED_AT=$(jq -r .pull_request.created_at $GITHUB_EVENT_PATH)\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews", "CIvars": [{"name": "repository", "expression": "github.repository", "type": "context"}, {"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}, {"type": "shell_cmd", "cmd": "# Set the minimum review period (in hours)\nMIN_REVIEW_PERIOD_HOURS=24\n\n# Get the current time and the PR creation time\nCURRENT_TIME=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\nPR_CREATED_AT=${{ env.PR_CREATED_AT }}\n\n# Calculate the time difference in hours\nTIME_DIFF_HOURS=$(( $(date -d \"$CURRENT_TIME\" +%s) - $(date -d \"$PR_CREATED_AT\" +%s) ))\nTIME_DIFF_HOURS=$(( TIME_DIFF_HOURS / 3600 ))\n\n# Check if the time difference is less than the minimum review period\nif [ \"$TIME_DIFF_HOURS\" -lt \"$MIN_REVIEW_PERIOD_HOURS\" ]; then\n  echo \"The PR must wait at least ${MIN_REVIEW_PERIOD_HOURS} hours before merging.\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73150226_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "echo ${{ secrets.GCP_SA_KEY }} | base64 --decode --ignore-garbage > ${HOME}/gcloud-key.json\ngcloud auth activate-service-account --key-file ${HOME}/gcloud-key.json\ngcloud auth configure-docker\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker build . -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:${{ github.sha }}\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "gcloud container clusters get-credentials my-cluster --zone us-central1-a --project ${{ secrets.GCP_PROJECT_ID }}\nkubectl set image deployment/my-deployment my-app=gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:${{ github.sha }}\n# Add the rollout command to force a rollout and handle checksum changes\nkubectl rollout restart deployment/my-deployment\nkubectl rollout status deployment/my-deployment\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73156174_0", "jobs": [{"name": "format-logs", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.KUBE_CONFIG }}\" > kubeconfig.yaml\nexport KUBECONFIG=$(pwd)/kubeconfig.yaml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "POD_NAME=$(kubectl get pods -n <your-namespace> -l <label-selector> -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl logs \"$POD_NAME\" -n <your-namespace> > pod_logs.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Sample format: prepend timestamp to each line\nawk '{ print strftime(\"[%Y-%m-%d %H:%M:%S]\"), $0 }' pod_logs.txt > formatted_logs.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cat formatted_logs.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "formatted-logs", "CIvars": []}, {"type": "arg", "name": "path", "value": "formatted_logs.txt", "CIvars": []}]}]}]}
{"id": "73164621_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pgruppi/setup-swift", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "swift-version", "value": "5.6", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "swift package resolve", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swift build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "swift test --enable-code-coverage", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bash <(curl -s https://codecov.io/bash) -f .build/debug/test_codecov.json", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73203174_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}, {"type": "arg", "name": "distribution", "value": "temurin", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2.2.1", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.3.0", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.pub-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pub-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${SERVICE_ACCOUNT_JSON}\" > ${HOME}/service-account.json", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build/app/outputs/flutter-apk\necho \"Deploying to Google Play...\"\n# Here you would use a tool like Google Play Publisher SDK or another action to upload APK\n# Below is just a placeholder command\n# Use a proper action or script to deploy your app\n# Example: \n#   - name: Upload to Play Store\n#     uses: r0x0n/google-play-publisher@v1\n#     with:\n#       serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}\n#       packageName: com.your.package # Replace with your package name\n#       releaseFile: app-release.apk # Change if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73212108_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios\nbundle install\nbundle exec fastlane <lane_name>\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73217461_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir test-results\n# Assuming your test framework outputs results in a format like JUnit XML\ncp ./path/to/test/output.xml ./test-results/  # Update to your test output path\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "thomaspaulmann/gh-pr-comment", "version": "v1.0.1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "## Test Results\n```\n$(cat ./test-results/output.xml)  # Assuming your test result is printed well with this command\n```\n", "CIvars": []}]}]}]}
{"id": "73228864_0", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "R -e 'install.packages(\"renv\")'\nR -e 'renv::restore()'\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "R CMD check .\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73246460_1", "jobs": [{"name": "test", "steps": []}]}
{"id": "73252484_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install capistrano\ngem install capistrano-rails\ngem install capistrano-bundler\ngem install capistrano-rbenv # or use capistrano-rvm or others based on your setup\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nssh-keyscan -t rsa your.server.com >> ~/.ssh/known_hosts\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec cap production deploy # Adjust the stage as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73254685_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "73281721_1", "jobs": [{"name": "ci", "steps": []}]}
{"id": "73281721_3", "jobs": [{"name": "ci", "steps": []}]}
{"id": "73291453_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath, mysqli", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-interaction --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"MY_ENV_VAR=value\" >> $GITHUB_ENV\necho \"ANOTHER_ENV_VAR=another_value\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73291571_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Build the Docker image\ndocker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/your-service-name:latest .\n\n# Push the image to Google Container Registry\ndocker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/your-service-name:latest\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Deploy the Docker image to Google Cloud Run\ngcloud run deploy your-service-name \\\n  --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/your-service-name:latest \\\n  --platform managed \\\n  --region your-region \\  # e.g., us-central1\n  --allow-unauthenticated   # Adjust based on your authentication needs\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73295861_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}", "CIvars": [{"name": "GCP_SERVICE_ACCOUNT_KEY", "expression": "secrets.GCP_SERVICE_ACCOUNT_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "${{ secrets.GCP_PROJECT_ID }}", "CIvars": [{"name": "GCP_PROJECT_ID", "expression": "secrets.GCP_PROJECT_ID", "type": "secret"}]}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gcloud functions deploy YOUR_FUNCTION_NAME \\\n--runtime nodejs14 \\  # or any runtime you are using\n--trigger-http \\\n--allow-unauthenticated \\\n--entry-point YOUR_ENTRY_POINT \\\n--source .  # Specify the source location if needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73303238_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/php-bin", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-dev --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r ../ci_deployment.zip ./*\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "SamKirkland/FTP-Deploy-Action", "version": "4.1.0", "shell": "bash", "with": [{"type": "arg", "name": "ftp-server", "value": "${{ secrets.FTP_HOST }}", "CIvars": [{"name": "FTP_HOST", "expression": "secrets.FTP_HOST", "type": "secret"}]}, {"type": "arg", "name": "ftp-username", "value": "${{ secrets.FTP_USERNAME }}", "CIvars": [{"name": "FTP_USERNAME", "expression": "secrets.FTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "ftp-password", "value": "${{ secrets.FTP_PASSWORD }}", "CIvars": [{"name": "FTP_PASSWORD", "expression": "secrets.FTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "local-dir", "value": "../ci_deployment.zip", "CIvars": []}, {"type": "arg", "name": "server-dir", "value": "/path/to/your/a2hosting/directory", "CIvars": []}]}]}]}
{"id": "73303795_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}]}]}]}
{"id": "73305126_1", "jobs": [{"name": "invoke", "steps": []}]}
{"id": "73312919_0", "jobs": [{"name": "docker-compose", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "docker/setup-buildx-action", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "/tmp/.buildx-cache", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-buildx-${{ github.sha }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}, {"name": "sha", "expression": "github.sha", "type": "context"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-buildx-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "docker/compose-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "args", "value": "up --build --abort-on-container-exit --exit-code-from <your-service>", "CIvars": []}]}]}]}
{"id": "73318377_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build windows", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter drive --target=test_driver/app.dart\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73336524_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "conda-incubator/setup-miniconda", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "auto-update-conda", "value": true, "CIvars": []}, {"type": "arg", "name": "conda-version", "value": "latest", "CIvars": []}, {"type": "arg", "name": "environment-file", "value": "environment.yml", "CIvars": []}, {"type": "arg", "name": "activate-environment", "value": "my-env", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "conda env update --file environment.yml\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda activate my-env\npytest  # or your testing command\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda activate my-env\npython setup.py sdist bdist_wheel  # Adjust to your build command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73341509_0", "jobs": [{"name": "push", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "git config --local user.name \"GitHub Actions\"\ngit config --local user.email \"actions@github.com\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Here you can add commands to make changes to the code\necho \"Making changes...\" >> changes.txt\ngit add changes.txt\ngit commit -m \"Add changes automatically by GitHub Actions\" || echo \"Nothing to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "ad-m/github-push", "version": "v0.6.0", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "73343729_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, mysqli, xml, zip, gd, curl", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your test suite (you may need to configure it based on your project)\nphpunit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Deploying to server...\"\nssh user@your-server \"cd /path/to/your/wordpress && git pull origin main && composer install\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73343836_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "4.7.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "nuget restore YourProject.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:Configuration=Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "msbuild YourProject.sln /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=FolderProfile /p:PublishUrl=$(BUILD_ARTIFACTS)", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "deployed-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "$(BUILD_ARTIFACTS)", "CIvars": []}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "deployed-artifacts", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_WEBAPP_NAME }}", "CIvars": [{"name": "AZURE_WEBAPP_NAME", "expression": "secrets.AZURE_WEBAPP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "*.zip", "CIvars": []}]}]}]}
{"id": "7335266_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "matlab-actions/setup-matlab", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Make sure to change the directory to where your Simulink files are located\ncd path/to/your/simulink/models\n\n# Run the test suite you have set up\nmatlab -batch \"run(unit_test_suite_name);\"\n\n# Alternatively, run specific test scripts\n# matlab -batch \"run('test_script');\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p results\ncp path/to/test/results/* results/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73355797_0", "jobs": [{"name": "sonarqube", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mvn clean verify sonar:sonar \\\n  -Dsonar.projectKey=<your_project_key> \\\n  -Dsonar.host.url=$SONAR_HOST_URL \\\n  -Dsonar.login=$SONAR_TOKEN\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "sonarsource/sonarcloud-quality-gate-action", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "token", "value": "${{ secrets.SONAR_TOKEN }}", "CIvars": [{"name": "SONAR_TOKEN", "expression": "secrets.SONAR_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "url", "value": "${{ secrets.SONAR_HOST_URL }}", "CIvars": [{"name": "SONAR_HOST_URL", "expression": "secrets.SONAR_HOST_URL", "type": "secret"}]}, {"type": "arg", "name": "projectKey", "value": "<your_project_key>", "CIvars": []}]}]}]}
{"id": "73368762_0", "jobs": [{"name": "job1", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Running tests for job1\u2026\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Job 1 completed successfully.\"", "name": "", "version": "", "shell": "bash"}]}, {"name": "job2", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Building the application in job2\u2026\"", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Job 2 completed successfully.\"", "name": "", "version": "", "shell": "bash"}]}, {"name": "cleanup", "steps": [{"type": "shell_cmd", "cmd": "echo \"Cleaning up resources\u2026\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73368838_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "wzieba/Firebase-Hosting-Action", "version": "v2.0.0", "shell": "bash", "with": [{"type": "arg", "name": "firebaseServiceAccount", "value": "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}", "CIvars": [{"name": "FIREBASE_SERVICE_ACCOUNT", "expression": "secrets.FIREBASE_SERVICE_ACCOUNT", "type": "secret"}]}, {"type": "arg", "name": "channelId", "value": "live", "CIvars": []}, {"type": "arg", "name": "projectId", "value": "your-firebase-project-id", "CIvars": []}]}]}]}
{"id": "73374931_0", "jobs": [{"name": "flutter-build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "3.7.0", "CIvars": []}, {"type": "arg", "name": "channel", "value": "stable", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\ncd ios\npod install\ncd ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane -NV  # Install Fastlane\ncd ios\nbundle install  # Install specified dependencies in your Gemfile if available\ncd ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane <your_lane>  # replace <your_lane> with the lane you wish to execute\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73381914_0", "jobs": [{"name": "run_sql_script", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhileshns/heroku-cli-action", "version": "v2.1.0", "shell": "bash", "with": [{"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "heroku pg:psql --app ${{ secrets.HEROKU_APP_NAME }} < migrate.sql\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73383025_0", "jobs": [{"name": "jmeter", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "sous-chefs/jmeter-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "5.4.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p reports\njmeter -n -t ${{ github.event.inputs.jmeter_test_plan }} \\\n       -Jserver=${{ github.event.inputs.jmeter_server }} \\\n       -Jthreads=${{ github.event.inputs.jmeter_thread_count }} \\\n       -l reports/result.jtl \\\n       -j reports/jmeter.log\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "jmeter-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "reports/", "CIvars": []}]}]}]}
{"id": "73383195_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ -z \"$(grep -E 'version:' pubspec.yaml)\" ]; then\n  echo \"Version number is not set in pubspec.yaml. Please define it.\";\n  exit 1;\nfi\n# Optional: Update the version number if necessary. Uncomment and modify the next line accordingly\n# flutter pub version 1.0.0\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem install fastlane\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane your_lane_name  # Replace 'your_lane_name' with the appropriate Fastlane lane name\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73385112_0", "jobs": [{"name": "encrypt", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"${{ secrets.GPG_PRIVATE_KEY }}\" | gpg --import\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "mozilla/sops-action", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "3.6.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Ensure the file you want to encrypt exists\nFILE_TO_ENCRYPT=\"path/to/your/file.txt\"\nif [ -f \"$FILE_TO_ENCRYPT\" ]; then\n  sops --encrypt \"$FILE_TO_ENCRYPT\" > \"$FILE_TO_ENCRYPT.enc\"\n  echo \"File encrypted successfully to $FILE_TO_ENCRYPT.enc\"\nelse\n  echo \"File $FILE_TO_ENCRYPT does not exist!\"\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"GitHub Action\"\ngit add \"$FILE_TO_ENCRYPT.enc\"\ngit commit -m \"Add encrypted file\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73387215_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, sqlite3, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "touch database/database.sqlite\necho \"DB_CONNECTION=sqlite\" > .env\necho \"DB_DATABASE=/home/runner/work/<YOUR_REPO_NAME>/database/database.sqlite\" >> .env  # Adjust the path as necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan migrate --force", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "php artisan test", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73390754_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane --version\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane deploy_to_testflight  # This should correspond to your Fastlane lane\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73398360_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Set up the GITHUB token for accessing private repos\necho \"##[add-Mask]$GITHUB_TOKEN\"\necho \"[global]\" >> ~/.pip/pip.conf\necho \"index-url = https://pypi.org/simple\" >> ~/.pip/pip.conf\necho \"extra-index-url = https://$GITHUB_TOKEN@github.com/USERNAME/PACKAGE_NAME.git\" >> ~/.pip/pip.conf\necho \"[install]\" >> ~/.pip/pip.conf\necho \"trusted-host = pypi.org\" >> ~/.pip/pip.conf\necho \"               repo.github.com\" >> ~/.pip/pip.conf\n\n# Install the requirements\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# In case of any issues, you may want to clean up here\necho \"Deployment completed.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73405015_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "73429307_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, intl, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage=text", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "composer run phpcs", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73442256_1", "jobs": [{"name": "call_reusable_workflow", "steps": []}]}
{"id": "73447535_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.cache/swiftpm\n.build\n", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-swiftpm-${{ hashFiles('**/Package.resolved') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-swiftpm-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install fastlane\nfastlane install_dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane build\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "fastlane test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73468240_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nrails db:create RAILS_ENV=test\nrails db:schema:load RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec  # Change this if you're using a different test framework\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73477226_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "docker build -t myapp:latest .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have environment variables set in GitHub Secrets\nenvsubst < appsettings.json > appsettings.tmp.json\nmv appsettings.tmp.json appsettings.json\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_credentials", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "YourAppName", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "image", "value": "myapp:latest", "CIvars": []}]}]}]}
{"id": "73483825_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build web --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build/web", "CIvars": []}, {"type": "arg", "name": "publish_branch", "value": "gh-pages", "CIvars": []}, {"type": "arg", "name": "publish_directory", "value": "./build/web", "CIvars": []}]}]}]}
{"id": "73493025_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec fastlane your_lane_name\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [[ \"${{ job.status }}\" == \"cancelled\" ]]; then\n  echo \"Job was cancelled, skipping Slack notification.\"\n  exit 0\nfi\n\n# Proceed to send Slack notification if the job was successful\nbundle exec fastlane notify_slack  # Make sure this lane sends notifications\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73502931_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "rails db:create\nrails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec # or the test command your application uses\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73503353_2", "jobs": [{"name": "call-reusable", "steps": []}]}
{"id": "73556249_0", "jobs": [{"name": "request_approvals", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/review-request", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "reviewers", "value": "<user1>,<user2>,<user3>", "CIvars": []}, {"type": "arg", "name": "team-reviewers", "value": "<org/team>", "CIvars": []}, {"type": "arg", "name": "pull-request-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}]}]}]}
{"id": "73568162_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "submodules", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/functions-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_FUNCTION_APP_NAME }}", "CIvars": [{"name": "AZURE_FUNCTION_APP_NAME", "expression": "secrets.AZURE_FUNCTION_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./path-to-your-function-app/dist", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "Production", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "az logout", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73582578_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --output ./publish", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_CREDENTIALS }}", "CIvars": [{"name": "AZURE_CREDENTIALS", "expression": "secrets.AZURE_CREDENTIALS", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./publish", "CIvars": []}]}]}]}
{"id": "73582582_1", "jobs": [{"name": "release", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"BUILD_NUMBER=${{ github.event.workflow_run.outputs.build_number }}\" >> $GITHUB_ENV", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v1.${{ env.BUILD_NUMBER }}", "CIvars": [{"name": "BUILD_NUMBER", "expression": "env.BUILD_NUMBER", "type": "env"}]}, {"type": "arg", "name": "release_name", "value": "Release v1.${{ env.BUILD_NUMBER }}", "CIvars": [{"name": "BUILD_NUMBER", "expression": "env.BUILD_NUMBER", "type": "env"}]}, {"type": "arg", "name": "draft", "value": false, "CIvars": []}, {"type": "arg", "name": "prerelease", "value": false, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "softprops/action-upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ steps.create_release.outputs.upload_url }}", "CIvars": [{"name": "create_release.outputs.upload_url", "expression": "steps.create_release.outputs.upload_url", "type": "steps"}]}, {"type": "arg", "name": "asset", "value": "path/to/your/build/artifact", "CIvars": []}]}]}]}
{"id": "73586992_0", "jobs": [{"name": "conda_setup", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "msys2/setup-msys2", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "pacman", "value": false, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda\necho \"$HOME/miniconda/bin\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda create -n myenv python=3.8 -y  # Specify the Conda environment name and Python version\nconda activate myenv\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda install -n myenv <your-conda-package> -y  # Replace <your-conda-package> with the package you want to install.\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "conda activate myenv\nconda list  # List installed packages to verify.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73614987_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust this command based on your build process\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/static-web-apps-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_static_web_apps_api_token", "value": "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}", "CIvars": [{"name": "AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING", "expression": "secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING", "type": "secret"}]}, {"type": "arg", "name": "repo_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "action", "value": "upload", "CIvars": []}, {"type": "arg", "name": "app_location", "value": "/", "CIvars": []}, {"type": "arg", "name": "api_location", "value": "api", "CIvars": []}, {"type": "arg", "name": "output_location", "value": "build", "CIvars": []}]}]}]}
{"id": "73614987_1", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build  # Adjust this command based on your build process\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "Azure/static-web-apps-deploy", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "azure_static_web_apps_api_token", "value": "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PRODUCTION }}", "CIvars": [{"name": "AZURE_STATIC_WEB_APPS_API_TOKEN_PRODUCTION", "expression": "secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PRODUCTION", "type": "secret"}]}, {"type": "arg", "name": "repo_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "action", "value": "upload", "CIvars": []}, {"type": "arg", "name": "app_location", "value": "/", "CIvars": []}, {"type": "arg", "name": "api_location", "value": "api", "CIvars": []}, {"type": "arg", "name": "output_location", "value": "build", "CIvars": []}]}]}]}
{"id": "73623629_0", "jobs": [{"name": "request-code-review", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pull-reminders/review-request", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "reviewers", "value": "username1,username2", "CIvars": []}, {"type": "arg", "name": "team_reviewers", "value": "team-name", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Review requested from users: username1, username2\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73626276_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "google-github-actions/setup-gcloud", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "service_account_key", "value": "${{ secrets.GCP_SA_KEY }}", "CIvars": [{"name": "GCP_SA_KEY", "expression": "secrets.GCP_SA_KEY", "type": "secret"}]}, {"type": "arg", "name": "project_id", "value": "YOUR_PROJECT_ID", "CIvars": []}, {"type": "arg", "name": "export_default_credentials", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"This is a generated file\" > generated_file.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gcloud functions deploy YOUR_FUNCTION_NAME \\\n  --runtime nodejs14 \\ # Choose your runtime\n  --trigger-http \\\n  --entry-point YOUR_ENTRY_POINT \\\n  --source ./ \\\n  --update-labels=<your-labels> \\\n  --allow-unauthenticated\n  --project \"${{ secrets.GCP_PROJECT_ID }}\"\n# Note: Adjust the gcloud function options as necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73651574_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, bcmath", "CIvars": []}, {"type": "arg", "name": "ini-values", "value": "post_max_size=256M, upload_max_filesize=256M", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --coverage-clover coverage.xml", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "code-coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p coverage-html\n./vendor/bin/phpunit --coverage-html coverage-html\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "html-coverage", "CIvars": []}, {"type": "arg", "name": "path", "value": "coverage-html/", "CIvars": []}]}]}]}
{"id": "73659356_0", "jobs": [{"name": "embed-figma", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment-pr", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.issue.number || github.event.pull_request.number }}", "CIvars": [{"name": "event.issue.number", "expression": "github.event.issue.number || github.event.pull_request.number", "type": "context"}, {"name": "event.issue.number", "expression": "github.event.issue.number", "type": "context"}, {"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "### Figma Design\nHere is the embedded Figma design for your reference:\n\n<iframe\n  style=\"border: none\"\n  width=\"800\"\n  height=\"600\"\n  src=\"https://www.figma.com/embed?embed_host=github.com&url=<YOUR_FIGMA_FILE_URL>\"\n  allowfullscreen\n></iframe>\n", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}]}]}]}
{"id": "73665972_1", "jobs": [{"name": "call_reusable_workflow", "steps": []}]}
{"id": "73689959_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "73691926_0", "jobs": [{"name": "build-and-deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.9", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Adjust if your requirements file is named differently\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Replace this with your test command\npython -m unittest discover -s tests  # Adjust the command based on your tests\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "<YOUR APP NAME>", "CIvars": []}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_APP_SERVICE_PUBLISH_PROFILE", "expression": "secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": ".", "CIvars": []}]}]}]}
{"id": "73691929_1", "jobs": [{"name": "call_greet_job", "steps": []}]}
{"id": "73702377_0", "jobs": [{"name": "compress", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "pwsh/installer", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "7.2.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd path/to/your/directory", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "tar -czf archive-name.tar.gz *  # Change `archive-name` to your desired archive name\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Archive", "CIvars": []}, {"type": "arg", "name": "path", "value": "archive-name.tar.gz", "CIvars": []}]}]}]}
{"id": "73715344_1", "jobs": [{"name": "use-reusable-workflow", "steps": []}]}
{"id": "73723617_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "bazelbuild/setup-bazel", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "6.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Ensure you have your Xcode project configured properly\n# You might need to do additional setup depending on your project\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bazel build //path/to/your:ios_target # Replace with your Bazel target\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bazel test //path/to/your:test_target # Replace with your test target\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ios-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "bazel-bin/path/to/your/ios_target", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Build failed. Check the logs for details.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73731046_1", "jobs": [{"name": "check", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "r-lib/actions/setup-r", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "install.packages(\"remotes\")\ninstall.packages(\"git2r\")\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "Rscript check_git_status.R", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73745016_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "zip -r build.zip ./build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-release-asset", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "upload_url", "value": "${{ github.event.release.upload_url }}", "CIvars": [{"name": "event.release.upload_url", "expression": "github.event.release.upload_url", "type": "context"}]}, {"type": "arg", "name": "asset_path", "value": "./build.zip", "CIvars": []}, {"type": "arg", "name": "asset_name", "value": "build.zip", "CIvars": []}, {"type": "arg", "name": "asset_content_type", "value": "application/zip", "CIvars": []}]}]}]}
{"id": "73745571_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "eteration/setup-texlive", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "texlive_version", "value": "2021", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Change to the desired directory if your .tex files are not in the root\n# cd path/to/your/tex/files\n\n# Compile LaTeX files; adjust the .tex filenames accordingly\nlatexmk -pdf -interaction=nonstopmode -synctex=1 main.tex  # Change 'main.tex' to your primary LaTeX file\n# If using multiple files or need to compile multiple documents, adjust accordingly\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "compiled-pdf", "CIvars": []}, {"type": "arg", "name": "path", "value": "main.pdf", "CIvars": []}]}]}]}
{"id": "73752520_0", "jobs": [{"name": "make_request", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/http-client", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://api.example.com/your-endpoint", "CIvars": []}, {"type": "arg", "name": "method", "value": "POST", "CIvars": []}, {"type": "arg", "name": "headers", "value": "Content-Type: application/json\nAuthorization: 'Bearer ${{ secrets.YOUR_SECRET_TOKEN }}' # If required for authentication\n", "CIvars": [{"name": "YOUR_SECRET_TOKEN", "expression": "secrets.YOUR_SECRET_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "body", "value": "{\"key\": \"value\"}", "CIvars": []}]}]}]}
{"id": "73756056_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "subosito/flutter-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "flutter-version", "value": "stable", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "flutter pub get", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "flutter build apk --release", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "flutter-apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Ensure the signing keystore is checked out or copied to the appropriate location\nKEYSTORE=${{ secrets.KEYSTORE_NAME }}\nALIAS=${{ secrets.KEYSTORE_ALIAS }}\nPASSWORD=${{ secrets.KEYSTORE_PASSWORD }}\n\n# Sign the APK with apksigner\napksigner sign --ks $KEYSTORE --ks-key-alias $ALIAS --ks-pass pass:$PASSWORD --key-pass pass:$PASSWORD build/app/outputs/flutter-apk/app-release.apk\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "apksigner verify build/app/outputs/flutter-apk/app-release.apk\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "signed-flutter-apk", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/app/outputs/flutter-apk/app-release.apk", "CIvars": []}]}]}]}
{"id": "73760285_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "Pods", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-pod-cache-${{ hashFiles('**/Podfile.lock') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-pod-cache-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -sdk iphoneos -configuration Release archive -archivePath output/YourApp.xcarchive\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath output/YourApp.xcarchive -exportPath output -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp", "CIvars": []}, {"type": "arg", "name": "path", "value": "output/*.ipa", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "softprops/action-gh-release", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "tag_name", "value": "v1.0", "CIvars": []}, {"type": "arg", "name": "release_name", "value": "Your App Release", "CIvars": []}, {"type": "arg", "name": "body", "value": "Changes for this release...\n", "CIvars": []}, {"type": "arg", "name": "files", "value": "output/*.ipa", "CIvars": []}]}]}]}
{"id": "73760765_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "73778209_2", "jobs": [{"name": "use-reusable-workflow", "steps": []}]}
{"id": "73792085_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 2.7, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec jekyll build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./_site", "CIvars": []}]}]}]}
{"id": "73803481_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "3.8", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "python -m pip install --upgrade pip\npip install -r requirements.txt  # Adjust this to your dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pytest test.py || echo \"Tests failed with errors.\" \n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "if [ \"${{ steps.run-tests.outcome }}\" == \"failure\" ]; then\n  echo \"Unit tests failed. Please check the logs.\"\n  exit 1\nelse\n  echo \"All tests passed!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73812442_0", "jobs": [{"name": "copy-config-vars", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akhilmadhavan/heroku-cli-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "heroku_api_key", "value": "${{ secrets.HEROKU_API_KEY }}", "CIvars": [{"name": "HEROKU_API_KEY", "expression": "secrets.HEROKU_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "heroku_app_name", "value": "staging-app-name", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "staging_vars=$(heroku config --app staging-app-name --json)\necho \"STAGING_VARS=$staging_vars\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"${{ env.STAGING_VARS }}\" | jq -r 'to_entries | .[] | \"heroku config:set \\(.key)=\\(.value) --app dev-app-name\"' | bash\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73813624_0", "jobs": [{"name": "trigger-workflow", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "peter-evans/workflow-dispatch", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "repository", "value": "USERNAME/REPOSITORY_NAME", "CIvars": []}, {"type": "arg", "name": "workflow", "value": "TARGET_WORKFLOW.yml", "CIvars": []}, {"type": "arg", "name": "token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/github-script", "version": "v5", "shell": "bash", "with": [{"type": "arg", "name": "script", "value": "const workflowId = 'YOUR_WORKFLOW_ID'; // Replace with the actual workflow ID\nconst runId = '${{ steps.trigger_workflow.outputs.run_id }}';\nlet status;\ndo {\n  const response = await github.actions.getWorkflowRun({\n    owner: 'USERNAME', // Replace with the owner of the target repo\n    repo: 'REPOSITORY_NAME', // Replace with the target repo name\n    run_id: runId,\n  });\n  status = response.data.status;\n  console.log(`Current status: ${status}`);\n  if (status === 'completed') break;\n  await new Promise(res => setTimeout(res, 10000)); // Wait for 10 seconds before checking again\n} while (status !== 'completed');\n", "CIvars": [{"name": "trigger_workflow.outputs.run_id", "expression": "steps.trigger_workflow.outputs.run_id", "type": "steps"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/download-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ARTIFACT_NAME", "CIvars": []}, {"type": "arg", "name": "path", "value": "./artifacts", "CIvars": []}]}]}]}
{"id": "73818036_1", "jobs": [{"name": "call-reusable-workflow", "steps": []}]}
{"id": "73820164_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-kubectl", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"$K8S_CA_CERT\" | base64 -d > ca.crt\nkubectl config set-cluster my-cluster --server=\"$K8S_SERVER\" --certificate-authority=ca.crt\nkubectl config set-credentials my-user --token=\"$K8S_TOKEN\"\nkubectl config set-context my-context --cluster=my-cluster --user=my-user\nkubectl config use-context my-context\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "kubectl apply -f k8s/deployment.yaml -n $K8S_NAMESPACE\nkubectl apply -f k8s/service.yaml -n $K8S_NAMESPACE\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Optional cleanup code here\necho \"Deployment successful!\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "73836560_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "mkdir -p $COMPOSER_HOME\ncomposer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7427557_0", "jobs": [{"name": "webhook", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.mailtrap.io", "CIvars": []}, {"type": "arg", "name": "server_port", "value": 2525, "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "New commit pushed", "CIvars": []}, {"type": "arg", "name": "body", "value": "A new commit has been pushed to the main branch.\nDetails: ${{ github.event.head_commit.message }}\n", "CIvars": [{"name": "event.head_commit.message", "expression": "github.event.head_commit.message", "type": "context"}]}, {"type": "arg", "name": "to", "value": "your-email@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "your-email@example.com", "CIvars": []}]}]}]}
{"id": "7476202_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "11", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "~/.gradle/caches", "CIvars": []}, {"type": "arg", "name": "key", "value": "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "${{ runner.os }}-gradle-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "./gradlew assembleRelease", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./gradlew test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p output\ncp app/build/outputs/apk/release/app-release.apk output/\necho \"Release artifact is located at: output/app-release.apk\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-release", "CIvars": []}, {"type": "arg", "name": "path", "value": "output/app-release.apk", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "samuelmeuli/action-slack", "version": "v1.0.0", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "success", "CIvars": []}, {"type": "arg", "name": "slack_webhook_url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "channel", "value": "#build-status", "CIvars": []}]}]}]}
{"id": "7499518_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github-actions config/database.yml\nbundle exec rails db:create\nbundle exec rails db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec    # or bundle exec rake test for Minitest\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7551118_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run coverage  # Adjust command based on your coverage tool\nmkdir -p coverage\nmv coverage/* coverage/  # Ensure you move the results to a known location\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peaceiris/actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./public", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "message", "value": "Build completed for ${GITHUB_REF} - Check the details!", "CIvars": [{"name": "GITHUB_REF", "expression": "GITHUB_REF", "type": "context"}]}, {"type": "arg", "name": "token", "value": "${{ secrets.NOTIFICATION_TOKEN }}", "CIvars": [{"name": "NOTIFICATION_TOKEN", "expression": "secrets.NOTIFICATION_TOKEN", "type": "secret"}]}]}]}]}
{"id": "7653129_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, zip", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\necho \"${{ github.workspace }}/vendor/bin\" >> $GITHUB_PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing deploy", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p ~/.ssh\necho \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\nssh-keyscan -H your-server.com >> ~/.ssh/known_hosts  # Replace with your server's domain or IP\nssh user@your-server.com 'cd /path/to/deployment && git pull'  # Adjust path and commands as needed\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7671893_0", "jobs": [{"name": "performance", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n# Run migrations for test DB\nRAILS_ENV=test bundle exec rake db:create db:migrate\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Assuming you have a performance test file saved at spec/performance/\nRAILS_ENV=test bundle exec rspec spec/performance/\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7725781_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "fetch-depth", "value": 0, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"export GIT_REPO='git@github.com:YOUR_USERNAME/YOUR_NEW_REPO.git'\" >> $GITHUB_ENV\necho \"export GIT_BRANCH='main'\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "eval $(ssh-agent -s)\necho \"${SSH_PRIVATE_KEY}\" | tr -d '\\r' | ssh-add -\nbundle exec cap production deploy  # Replace 'production' with your appropriate stage\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "ssh-agent -k\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7786735_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer global require phing/phing\necho \"$HOME/.composer/vendor/bin\" >> $GITHUB_PATH  # Add PHING to PATH\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit # Adjust this if you're using a different testing framework\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Cleaning up...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7814845_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "deeuu/setup-clojure", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "clojure-version", "value": "${{ matrix.clojure-version }}", "CIvars": [{"name": "clojure-version", "expression": "matrix.clojure-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "lein deps", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "lein uberjar", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "my-clojure-app", "CIvars": []}, {"type": "arg", "name": "path", "value": "target/my-clojure-app.jar", "CIvars": []}]}]}]}
{"id": "7862488_2", "jobs": [{"name": "test", "steps": []}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "echo \"Deploying to production...\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "7903160_0", "jobs": [{"name": "selenium", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testdox --testsuite Unit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "./vendor/bin/phpunit --testdox --testsuite Selenium --test-suffix .SeleniumTest.php\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8034630_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install cocoapods\npod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -runFirstLaunch\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration Release archive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportPath $GITHUB_WORKSPACE/build/ -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "your-app", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/*.ipa", "CIvars": []}]}]}]}
{"id": "8041785_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "14.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "xcodebuild -project YourProject.xcodeproj -scheme YourScheme -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' test | xcpretty -r junit\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir -p results\nfind . -name \"*.xml\" -exec mv {} results/ \\;\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "ocunit-test-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "results/*.xml", "CIvars": []}]}]}]}
{"id": "8073496_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\nyarn install # If using Yarn for JS dependencies\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:migrate RAILS_ENV=test\nbundle exec rake test # or use 'rspec' or 'rails test' based on your setup\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "curl -X POST http://jenkins-url:8080/job/YOUR_JOB_NAME/build?token=YOUR_JOB_TOKEN\n# Use appropriate Jenkins URL, job name, and token.\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8095444_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "none", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --no-progress --no-suggest --prefer-dist", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --log-junit test-results.xml\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "phpunit-results", "CIvars": []}, {"type": "arg", "name": "path", "value": "test-results.xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "if grep -q '<failure' test-results.xml; then\n  echo \"Test failures found!\"\n  exit 1\nelse\n  echo \"All tests passed!\"\nfi\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8151807_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails db:create RAILS_ENV=test\nbin/rails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bin/rails test  # or bin/rspec if you're using RSpec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8184944_0", "jobs": [{"name": "lint", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint -- --format json > lint-report.json || true", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Parse the JSON report to summarize issues\nISSUE_COUNT=$(jq '.errorCount + .warningCount' lint-report.json)\nWARNINGS=$(jq '.warnings[].message' lint-report.json | wc -l)\necho \"total_issues=$ISSUE_COUNT\" >> $GITHUB_ENV\necho \"total_warnings=$WARNINGS\" >> $GITHUB_ENV\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "dawidd6/action-send-mail", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "server_address", "value": "smtp.example.com", "CIvars": []}, {"type": "arg", "name": "server_port", "value": "587", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SMTP_USERNAME }}", "CIvars": [{"name": "SMTP_USERNAME", "expression": "secrets.SMTP_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SMTP_PASSWORD }}", "CIvars": [{"name": "SMTP_PASSWORD", "expression": "secrets.SMTP_PASSWORD", "type": "secret"}]}, {"type": "arg", "name": "subject", "value": "Static Analysis Report Summary", "CIvars": []}, {"type": "arg", "name": "body", "value": "Hi Team,\n\nHere is the static analysis report summary:\n\n- Total Issues: ${{ env.total_issues }}\n- Total Warnings: ${{ env.total_warnings }}\n\nPlease address the issues at your earliest convenience.\n\nBest,\nYour CI/CD System\n", "CIvars": [{"name": "total_issues", "expression": "env.total_issues", "type": "env"}, {"name": "total_warnings", "expression": "env.total_warnings", "type": "env"}]}, {"type": "arg", "name": "to", "value": "recipient@example.com", "CIvars": []}, {"type": "arg", "name": "from", "value": "sender@example.com", "CIvars": []}]}]}]}
{"id": "8313531_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "qt/qtsetup", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}, {"type": "arg", "name": "qt-module", "value": "qtbase,qtdeclarative,qtmultimedia", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y build-essential cmake", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest -C Debug  # Change 'Debug' to your desired configuration if necessary\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "Coverage Reports", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/coverage/", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd build\nmake clean\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8324673_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "rubygems/ruby-install", "version": "master", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install --jobs 4\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github ci/database.yml\nbin/rails db:create RAILS_ENV=test\nbin/rails db:migrate RAILS_ENV=test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rubocop\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "833733_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd frontend  # Navigate to your Node.js project directory\nnpm install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd frontend\nnpm test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-python", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "python-version", "value": "${{ matrix.python-version }}", "CIvars": [{"name": "python-version", "expression": "matrix.python-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "cd backend  # Navigate to your Python project directory\npython -m pip install --upgrade pip\npip install -r requirements.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd backend\npytest\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-java", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "java-version", "value": "${{ matrix.java-version }}", "CIvars": [{"name": "java-version", "expression": "matrix.java-version", "type": "matrix"}]}, {"type": "arg", "name": "distribution", "value": "adopt", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "cd java-project  # Navigate to your Java project directory\n./gradlew build  # Adjust this to your build system (gradle, maven, etc.)\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd java-project\n./gradlew test\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "${{ matrix.ruby-version }}", "CIvars": [{"name": "ruby-version", "expression": "matrix.ruby-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "cd ruby-project  # Navigate to your Ruby project directory\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ruby-project\nbundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8351278_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios && bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd ios && pod install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild -workspace YourApp.xcworkspace \\\n           -scheme YourAppScheme \\\n           -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \\\n           test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8416195_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test # or any specific test task for your gem\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "gem build your_gem_name.gemspec # Replace your_gem_name with the actual name\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "your_gem_name", "CIvars": []}, {"type": "arg", "name": "path", "value": "your_gem_name-*.gem", "CIvars": []}]}]}]}
{"id": "8424681_0", "jobs": [{"name": "auto-reconcile", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "mono/setup-mono", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# Assuming you have a TFS command line tool ready to use\n# Adjust the URL and authentication as needed\n# This is a placeholder, as TFS 2010 does not have a direct API,\n# you might need to use TF.exe via Wine or similar.\necho \"Installing TFS Command Line Tools\"\nsudo apt-get install -y tfs-commandline-tools # Adjust command according to your environment\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Place your authentication logic here using TF.exe\necho \"Authenticating to TFS\"\n# Example command\ntf workspaces /collection:$TFS_URL\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# This is where you'd implement the reconcile logic\n# Replace the following dummy code with actual logic\necho \"Checking for changes...\"\n\n# List pending changes\ntf status /recursive > changes.txt\n\n# If there are changes, reconcile them\nif [ -s changes.txt ]; then\n  echo \"Changes found, reconciling...\"\n  # Example command to reconcile\n  tf resolve /auto:all\n  echo \"Reconcile process completed!\"\nelse\n  echo \"No changes to reconcile.\"\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Command to check in the changes back to TFS.\ntf checkin /comment:\"Auto-reconciliation performed through GitHub Actions.\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "844215_0", "jobs": [{"name": "manage_non_user_facing_work", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "14", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install -g @your-org/your-script # Change to the actual package to manage issues\nmanage-issues --project your-repo --type non-user-facing\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/slack-notify", "version": "v1.1.1", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "webhook-url", "value": "${{ secrets.SLACK_WEBHOOK_URL }}", "CIvars": [{"name": "SLACK_WEBHOOK_URL", "expression": "secrets.SLACK_WEBHOOK_URL", "type": "secret"}]}, {"type": "arg", "name": "channel", "value": "#team-updates", "CIvars": []}, {"type": "arg", "name": "text", "value": "Non-user facing task management job finished with status: ${{ job.status }}.", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}]}, {"type": "shell_cmd", "cmd": "PROJECT_ID=\"your_project_id\" # Change to your actual project ID\nTASK_LIST=\"Non-User Facing Work\" # Change to your actual task list\n\ncreate-or-update-project-item --project-id $PROJECT_ID --task-list \"$TASK_LIST\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8562031_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "appleboy/setup-xcode", "version": "v1", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "# If you have a Podfile, install pods\nif [ -f \"Podfile\" ]; then\n  pod install\nfi\n# If you use Swift Package Manager\nswift package resolve\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild \\\n  -scheme YourAppScheme \\\n  -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n  archive \\\n  -sdk iphoneos \\\n  -configuration Release \\\n  CODE_SIGN_IDENTITY=\"${{ secrets.CODE_SIGN_IDENTITY }}\" \\\n  CODE_SIGN_STYLE=\"automatic\" \\\n  CODE_SIGN_TEAM=\"${{ secrets.CODE_SIGN_TEAM }}\" \\\n  -allowProvisioningUpdates\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "xcodebuild \\\n  -exportArchive \\\n  -archivePath ${{ github.workspace }}/build/YourApp.xcarchive \\\n  -exportPath ${{ github.workspace }}/build \\\n  -exportOptionsPlist ExportOptions.plist\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "YourApp-Archive", "CIvars": []}, {"type": "arg", "name": "path", "value": "${{ github.workspace }}/build/YourApp.xcarchive", "CIvars": [{"name": "workspace", "expression": "github.workspace", "type": "context"}]}]}]}]}
{"id": "8645579_0", "jobs": [{"name": "versioning", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Ensure you're using semver\nnpm install -g standard-version\nstandard-version --dry-run --skip.tag --skip.commit\necho \"Bump version performed.\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "standard-version\ngit push --follow-tags origin main\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "assets-release-action", "version": "v1.0.2", "shell": "bash", "with": []}]}]}
{"id": "8755349_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.0", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, bcmath", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --coverage-text", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "codecov/codecov-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "files", "value": "./coverage/*.xml", "CIvars": []}]}]}]}
{"id": "883332_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-cpp", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "compiler", "value": "gcc", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Example for installing dependencies, adjust according to your project\nsudo apt-get update\nsudo apt-get install -y cmake g++  # Add any other dependencies required\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build was successful!\"\n# You can run additional scripts here to publish the results or artifacts\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Build failed. Cleaning up...\"\n# Optional: Run any cleanup scripts if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8852453_0", "jobs": [{"name": "install_gem", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": 3.0, "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Specify your gem in the Gemfile with a GitHub branch\necho \"gem 'your_gem_name', git: 'https://github.com/username/repo_name.git', branch: 'desired_branch_name'\" >> Gemfile\n\n# Install the gems including the specified one\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# Run your tests here, for example:\nbundle exec rspec  # Change to your preferred test command\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "8853581_0", "jobs": [{"name": "trigger", "steps": [{"type": "gh_action", "cmd": "", "name": "octokit/request-action", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "route", "value": "POST /repos/OWNER_OF_REPOB/REPOB/actions/workflows/WORKFLOW_FILE_ID/dispatches", "CIvars": []}, {"type": "arg", "name": "ref", "value": "main", "CIvars": []}, {"type": "arg", "name": "inputs", "value": "{\n  \"key\": \"value\"  # Pass any inputs to RepoB if necessary\n}\n", "CIvars": []}]}]}]}
{"id": "8930304_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions-gh-pages", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "github_token", "value": "${{ secrets.GITHUB_TOKEN }}", "CIvars": [{"name": "GITHUB_TOKEN", "expression": "secrets.GITHUB_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "publish_dir", "value": "./build", "CIvars": []}]}]}]}
{"id": "8941497_0", "jobs": [{"name": "update-gems", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.1", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle outdated --quiet\nif [ $? -eq 0 ]; then\n  echo \"No outdated gems found.\"\n  echo \"GEMS_OUTDATED=false\" >> $GITHUB_ENV\nelse\n  echo \"Outdated gems found.\"\n  echo \"GEMS_OUTDATED=true\" >> $GITHUB_ENV\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle update\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --global user.name \"GitHub Action\"\ngit config --global user.email \"action@github.com\"\ngit add Gemfile.lock\ngit commit -m \"Update gem dependencies\" || echo \"No changes to commit\"\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git push origin HEAD:main # Adjust according to your default branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9049066_0", "jobs": [{"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "7.4", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "curl -O https://pear.php.net/go-pear.phar\nphp go-pear.phar -n\necho 'export PATH=\"$HOME/pear/bin:$PATH\"' >> $GITHUB_ENV\npear channel-update pear.php.net\npear install pear/PEAR  # Optional, usually PEAR is installed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "pear global-update\npear install phing/phing\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "phing -f path/to/your/build.xml  # Update this path to your Phing build file\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "# replace with your deployment script/command\necho \"Deploying application...\"\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9068201_0", "jobs": [{"name": "dump_database", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "akcj/postgresql-action", "version": "v1.1.0", "shell": "bash", "with": [{"type": "arg", "name": "postgresql version", "value": "14", "CIvars": []}, {"type": "arg", "name": "connection string", "value": "${{ secrets.DATABASE_URL }}", "CIvars": [{"name": "DATABASE_URL", "expression": "secrets.DATABASE_URL", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "# Set dump filename \nDUMP_FILE=\"db_dump_$(date +%Y%m%d%H%M%S).sql\"\n\n# Dump the database\npg_dump -U ${{ secrets.DB_USER }} -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} ${{ secrets.DB_NAME }} > $DUMP_FILE\n\n# Check if the dump was successful\nif [ $? -ne 0 ]; then\n  echo \"Database dump failed!\"\n  exit 1\nfi\n\n# Move the dump file to the appropriate directory for tracking\nmv $DUMP_FILE ./dumps/$DUMP_FILE\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "git config --local user.email \"actions@github.com\"\ngit config --local user.name \"GitHub Actions\"\ngit add dumps/*\ngit commit -m \"Automated database dump on $(date '+%Y-%m-%d %H:%M:%S')\"\ngit push origin main  # Adjust accordingly to your branch\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9183659_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "subosito/action-svn", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "url", "value": "https://your-svn-repo-url", "CIvars": []}, {"type": "arg", "name": "username", "value": "${{ secrets.SVN_USERNAME }}", "CIvars": [{"name": "SVN_USERNAME", "expression": "secrets.SVN_USERNAME", "type": "secret"}]}, {"type": "arg", "name": "password", "value": "${{ secrets.SVN_PASSWORD }}", "CIvars": [{"name": "SVN_PASSWORD", "expression": "secrets.SVN_PASSWORD", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore your-solution.sln", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build your-solution.sln --configuration Release", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet test your-solution.sln --configuration Release --no-build --verbosity normal", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "echo \"Updating version...\"\n# This sets a new version number based on the current datetime or another criteria.\ndotnet build your-solution.sln /p:Version=$(date +'%Y.%m.%d.%H%M%S')  # Adjust as needed\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish your-solution.sln -c Release -o ./output", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "publish-output", "CIvars": []}, {"type": "arg", "name": "path", "value": "./output", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "git config --local user.email \"action@github.com\"\ngit config --local user.name \"Github Action\"\ngit commit -am \"Update version\" || echo \"No changes to commit\"\ngit push\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9183879_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake db:create RAILS_ENV=test\nbundle exec rake db:migrate RAILS_ENV=test\nbundle exec rspec # Assuming you're using RSpec for testing\n", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "webfactory/create-ssh-key", "version": "v0.5.3", "shell": "bash", "with": [{"type": "arg", "name": "ssh-private-key", "value": "${{ secrets.STAGING_SSH_PRIVATE_KEY }}", "CIvars": [{"name": "STAGING_SSH_PRIVATE_KEY", "expression": "secrets.STAGING_SSH_PRIVATE_KEY", "type": "secret"}]}]}, {"type": "shell_cmd", "cmd": "ssh -oStrictHostKeyChecking=no user@your_staging_server_ip 'cd /path/to/your/app && git pull origin staging && bundle install && RAILS_ENV=staging RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }} bin/rails db:migrate && bin/rails assets:precompile && touch tmp/restart.txt'\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "922325_0", "jobs": [{"name": "test", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "923150_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "${{ matrix.node-version }}", "CIvars": [{"name": "node-version", "expression": "matrix.node-version", "type": "matrix"}]}]}, {"type": "shell_cmd", "cmd": "npm install", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run lint", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm test", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run build", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "app-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "./dist", "CIvars": []}]}]}, {"name": "notifications", "steps": [{"type": "gh_action", "cmd": "", "name": "some-notification-action", "version": null, "shell": "bash", "with": [{"type": "arg", "name": "api-key", "value": "${{ secrets.NOTIFICATION_API_KEY }}", "CIvars": [{"name": "NOTIFICATION_API_KEY", "expression": "secrets.NOTIFICATION_API_KEY", "type": "secret"}]}, {"type": "arg", "name": "message", "value": "Build failed on commit: ${{ github.sha }}", "CIvars": [{"name": "sha", "expression": "github.sha", "type": "context"}]}]}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-node", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "node-version", "value": "16", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "npm install --production", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "npm run deploy", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9258818_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "wix/toolset", "version": "latest", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "${{ matrix.qt_version }}", "CIvars": [{"name": "qt_version", "expression": "matrix.qt_version", "type": "matrix"}]}]}, {"type": "gh_action", "cmd": "", "name": "actions/cache", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "path", "value": "CMakeFiles", "CIvars": []}, {"type": "arg", "name": "key", "value": "cmake-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}, {"type": "arg", "name": "restore-keys", "value": "cmake-${{ runner.os }}-\n", "CIvars": [{"name": "os", "expression": "runner.os", "type": "runner"}]}]}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\ncmake --build .\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9393314_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "3.0", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "gem install bundler\nbundle install\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake # Adjust this line to specify the appropriate Rake task\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rake test # Replace 'test' with your test task if necessary\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "941537_0", "jobs": [{"name": "phpunit", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "shivammathur/setup-php", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "php-version", "value": "8.1", "CIvars": []}, {"type": "arg", "name": "extensions", "value": "mbstring, xml, gd, curl", "CIvars": []}, {"type": "arg", "name": "coverage", "value": "xdebug", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "composer install --prefer-dist --no-progress --no-suggest --no-interaction", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "vendor/bin/phpunit --testdox", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9427763_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "jwlawson/actions/setup-cmake", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "cmake-version", "value": "3.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get update\nsudo apt-get install -y build-essential\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nctest --output-on-failure --schedule-random\nif [ $? -eq 0 ]; then\n  echo \"Test run success, submitting to CDash...\";\n  ctest -D Experimental --submit --test-config /path/to/cdash-config\nelse\n  echo \"Tests failed!\";\n  exit 1\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "build-artifacts", "CIvars": []}, {"type": "arg", "name": "path", "value": "build", "CIvars": []}]}]}]}
{"id": "9501064_0", "jobs": [{"name": "check-violations", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "Snyk/actions/upload-snyk-result", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "snyk_token", "value": "${{ secrets.SNYK_TOKEN }}", "CIvars": [{"name": "SNYK_TOKEN", "expression": "secrets.SNYK_TOKEN", "type": "secret"}]}, {"type": "arg", "name": "fail-on-issues", "value": true, "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "peter-evans/create-issue", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "title", "value": "Automated violation detected", "CIvars": []}, {"type": "arg", "name": "body", "value": "The dependency check found issues. Please review the details in the logs.\nCheck the Snyk dashboard for more information.\n", "CIvars": []}, {"type": "arg", "name": "labels", "value": "violation, automated", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "8398a7/action-slack", "version": "v3", "shell": "bash", "with": [{"type": "arg", "name": "status", "value": "${{ job.status }}", "CIvars": [{"name": "status", "expression": "job.status", "type": "job"}]}, {"type": "arg", "name": "fields", "value": "task, repository, commit", "CIvars": []}]}]}]}
{"id": "9563881_0", "jobs": [{"name": "check-pr-etiquette", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "shell_cmd", "cmd": "if [[ -z \"${{ github.event.pull_request.body }}\" ]]; then\n  echo \"PR description is empty.\" >> $GITHUB_ENV\nelse\n  if [[ ! \"${{ github.event.pull_request.body }}\" =~ (bugfix|feature|refactor|chore) ]]; then\n    echo \"PR description must include a mention of the type of change (bugfix, feature, refactor, chore).\" >> $GITHUB_ENV\n  fi\nfi\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "peter-evans/comment", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "issue-number", "value": "${{ github.event.pull_request.number }}", "CIvars": [{"name": "event.pull_request.number", "expression": "github.event.pull_request.number", "type": "context"}]}, {"type": "arg", "name": "body", "value": "\u26a0\ufe0f **Etiquette Alert** \u26a0\ufe0f\nYour Pull Request description should indicate the nature of your changes:\n- Use **bugfix** for bug fixes\n- Use **feature** for new features\n- Use **refactor** for code refactoring\n- Use **chore** for maintenance tasks\n\nPlease update your PR description accordingly to improve clarity for reviewers!\n", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "echo \"Contribution Etiquette Check completed.\"", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9582926_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-xcode", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "xcode-version", "value": "latest", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "# Replace YourApp.xcodeproj and YourScheme with your actual project and scheme name\nxcodebuild -project YourApp.xcodeproj \\\n           -scheme YourScheme \\\n           -sdk iphonesimulator \\\n           -destination 'platform=iOS Simulator,name=iPhone 12 Pro Max,OS=15.5' \\\n           clean test\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9587262_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "ruby/setup-ruby", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "ruby-version", "value": "2.7", "CIvars": []}, {"type": "arg", "name": "bundler-cache", "value": true, "CIvars": []}]}, {"type": "shell_cmd", "cmd": "bundle install --jobs=4 --retry=3\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cp config/database.yml.github_actions config/database.yml\nrails db:create RAILS_ENV=test\nrails db:schema:load RAILS_ENV=test\n# If you use migrations, run: `rails db:migrate RAILS_ENV=test`\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "bundle exec rspec\n", "name": "", "version": "", "shell": "bash"}]}]}
{"id": "9590422_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "actions/setup-dotnet", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "dotnet-version", "value": "6.0.x", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "dotnet restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet build --configuration Release --no-restore", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "dotnet publish --configuration Release --no-build -o ./output", "name": "", "version": "", "shell": "bash"}]}, {"name": "deploy", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "azure/setup-azure-cli", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "version", "value": "2.0.80", "CIvars": []}]}, {"type": "gh_action", "cmd": "", "name": "azure/login", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "client-id", "value": "${{ secrets.AZURE_CLIENT_ID }}", "CIvars": [{"name": "AZURE_CLIENT_ID", "expression": "secrets.AZURE_CLIENT_ID", "type": "secret"}]}, {"type": "arg", "name": "client-secret", "value": "${{ secrets.AZURE_CLIENT_SECRET }}", "CIvars": [{"name": "AZURE_CLIENT_SECRET", "expression": "secrets.AZURE_CLIENT_SECRET", "type": "secret"}]}, {"type": "arg", "name": "tenant-id", "value": "${{ secrets.AZURE_TENANT_ID }}", "CIvars": [{"name": "AZURE_TENANT_ID", "expression": "secrets.AZURE_TENANT_ID", "type": "secret"}]}]}, {"type": "gh_action", "cmd": "", "name": "azure/webapps-deploy", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "app-name", "value": "${{ secrets.AZURE_APP_NAME }}", "CIvars": [{"name": "AZURE_APP_NAME", "expression": "secrets.AZURE_APP_NAME", "type": "secret"}]}, {"type": "arg", "name": "slot-name", "value": "production", "CIvars": []}, {"type": "arg", "name": "publish-profile", "value": "${{ secrets.AZURE_PUBLISH_PROFILE }}", "CIvars": [{"name": "AZURE_PUBLISH_PROFILE", "expression": "secrets.AZURE_PUBLISH_PROFILE", "type": "secret"}]}, {"type": "arg", "name": "package", "value": "./output", "CIvars": []}]}]}]}
{"id": "9905138_0", "jobs": [{"name": "build", "steps": [{"type": "gh_action", "cmd": "", "name": "actions/checkout", "version": "v2", "shell": "bash", "with": []}, {"type": "gh_action", "cmd": "", "name": "qt/qt-install", "version": "v1", "shell": "bash", "with": [{"type": "arg", "name": "qt-version", "value": "5.15.2", "CIvars": []}]}, {"type": "shell_cmd", "cmd": "sudo apt-get install -y build-essential qt5-default qttools5-dev-tools", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "mkdir build\ncd build\ncmake ..\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake test\n", "name": "", "version": "", "shell": "bash"}, {"type": "shell_cmd", "cmd": "cd build\nmake package  # Assuming you have a packaging target in your CMakeLists.txt\n", "name": "", "version": "", "shell": "bash"}, {"type": "gh_action", "cmd": "", "name": "actions/upload-artifact", "version": "v2", "shell": "bash", "with": [{"type": "arg", "name": "name", "value": "qt-build", "CIvars": []}, {"type": "arg", "name": "path", "value": "build/your-application-name", "CIvars": []}]}]}]}
